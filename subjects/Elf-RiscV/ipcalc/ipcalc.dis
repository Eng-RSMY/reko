void herror()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
herror_entry:
// DataOut: gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000014F20:
	word64 t3_4 = Mem0[0x000000000001A010:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp

herror_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:0000000000014F2C



void __strdup()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
__strdup_entry:
// DataOut: a0 a1 a4 gp ra s0 s1 s10 s2 s3 s4 s5 s6 s7 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000014F30:
	word64 t3_4 = Mem0[0x000000000001A018:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a0 a1 a4 gp ra s0 s1 s10 s2 s3 s4 s5 s6 s7 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp

__strdup_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:0000000000014F3C



void clock_gettime()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
clock_gettime_entry:
// DataOut: a0 gp s1 s10 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000014F40:
	word64 t3_4 = Mem0[0x000000000001A020:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a0 gp s1 s10 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

clock_gettime_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:0000000000014F4C



void close()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
close_entry:
// DataOut: gp s0 s10 s2 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000014F50:
	word64 t3_4 = Mem0[0x000000000001A028:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: gp s0 s10 s2 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

close_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:0000000000014F5C



void read()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
read_entry:
// DataOut: a0 gp s10 s2 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000014F60:
	word64 t3_4 = Mem0[0x000000000001A030:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a0 gp s10 s2 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

read_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:0000000000014F6C



void inet_ntop()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
inet_ntop_entry:
// DataOut: a0 a1 gp ra s0 s1 s10 s2 s3 s4 s5 s6 s7 s8
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000014F70:
	word64 t3_4 = Mem0[0x000000000001A038:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a0 a1 gp ra s0 s1 s10 s2 s3 s4 s5 s6 s7 s8
// DataOut (flags): 
// SymbolicIn: sp:fp

inet_ntop_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:0000000000014F7C



void snprintf()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
snprintf_entry:
// DataOut: gp s0 s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000014F80:
	word64 t3_4 = Mem0[0x000000000001A040:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: gp s0 s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp

snprintf_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:0000000000014F8C



void getaddrinfo()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
getaddrinfo_entry:
// DataOut: a0 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000014F90:
	word64 t3_4 = Mem0[0x000000000001A048:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a0 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp

getaddrinfo_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:0000000000014F9C



void dlopen()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
dlopen_entry:
// DataOut: gp s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000014FA0:
	word64 t3_4 = Mem0[0x000000000001A050:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: gp s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp

dlopen_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:0000000000014FAC



void open()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
open_entry:
// DataOut: a0 gp s10 s2 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000014FB0:
	word64 t3_4 = Mem0[0x000000000001A058:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a0 gp s10 s2 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

open_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:0000000000014FBC



void __snprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
__snprintf_chk_entry:
// DataOut: gp s0 s10 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000014FC0:
	word64 t3_4 = Mem0[0x000000000001A060:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: gp s0 s10 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp

__snprintf_chk_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:0000000000014FCC



void dlsym()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
dlsym_entry:
// DataOut: gp s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000014FD0:
	word64 t3_4 = Mem0[0x000000000001A068:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: gp s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp

dlsym_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:0000000000014FDC



void getopt_long()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
getopt_long_entry:
// DataOut: a0 gp ra s0 s10 s2 s3 s6 s9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000014FF0:
	word64 t3_4 = Mem0[0x000000000001A078:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a0 gp ra s0 s10 s2 s3 s6 s9
// DataOut (flags): 
// SymbolicIn: sp:fp

getopt_long_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:0000000000014FFC



void __vasprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
__vasprintf_chk_entry:
// DataOut: a0 a1 gp ra s4
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015000:
	word64 t3_4 = Mem0[0x000000000001A080:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a0 a1 gp ra s4
// DataOut (flags): 
// SymbolicIn: sp:fp

__vasprintf_chk_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:000000000001500C



void __asprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
__asprintf_chk_entry:
// DataOut: a0 a1 gp ra s0 s10 s2 s4 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015010:
	word64 t3_4 = Mem0[0x000000000001A088:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a0 a1 gp ra s0 s10 s2 s4 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp

__asprintf_chk_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:000000000001501C



void getnameinfo()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
getnameinfo_entry:
// DataOut: a0 a1 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015020:
	word64 t3_4 = Mem0[0x000000000001A090:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a0 a1 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp

getnameinfo_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:000000000001502C



void memset()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
memset_entry:
// DataOut: gp ra s0 s1 s10 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015030:
	word64 t3_4 = Mem0[0x000000000001A098:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: gp ra s0 s1 s10 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp

memset_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:000000000001503C



void inet_pton()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
inet_pton_entry:
// DataOut: a0 a1 gp ra s0 s1 s10 s4 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015040:
	word64 t3_4 = Mem0[0x000000000001A0A0:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a0 a1 gp ra s0 s1 s10 s4 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp

inet_pton_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:000000000001504C



void strcmp()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
strcmp_entry:
// DataOut: a0 gp ra
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015050:
	word64 t3_4 = Mem0[0x000000000001A0A8:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a0 gp ra
// DataOut (flags): 
// SymbolicIn: sp:fp

strcmp_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:000000000001505C



void free()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
free_entry:
// DataOut: a0 a1 gp ra s4
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015060:
	word64 t3_4 = Mem0[0x000000000001A0B0:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a0 a1 gp ra s4
// DataOut (flags): 
// SymbolicIn: sp:fp

free_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:000000000001506C



void __printf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
__printf_chk_entry:
// DataOut: gp s0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015070:
	word64 t3_4 = Mem0[0x000000000001A0B8:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: gp s0
// DataOut (flags): 
// SymbolicIn: sp:fp

__printf_chk_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:000000000001507C



void __sprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
__sprintf_chk_entry:
// DataOut: a1 gp s0 s1 s10 s2 s3 s5 s7 s9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015080:
	word64 t3_4 = Mem0[0x000000000001A0C0:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a1 gp s0 s1 s10 s2 s3 s5 s7 s9
// DataOut (flags): 
// SymbolicIn: sp:fp

__sprintf_chk_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:000000000001508C



void fwrite()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
fwrite_entry:
// DataOut: a1 gp ra s10 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015090:
	word64 t3_4 = Mem0[0x000000000001A0C8:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a1 gp ra s10 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

fwrite_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:000000000001509C



void memcmp()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
memcmp_entry:
// DataOut: a0 a1 gp s0 s10 s2 s3 s5 s6 s7 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000000000150A0:
	word64 t3_4 = Mem0[0x000000000001A0D0:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a0 a1 gp s0 s10 s2 s3 s5 s6 s7 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp

memcmp_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:00000000000150AC



void fputs()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
fputs_entry:
// DataOut: a1 gp ra s10 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000000000150B0:
	word64 t3_4 = Mem0[0x000000000001A0D8:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a1 gp ra s10 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

fputs_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:00000000000150BC



void isatty()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
isatty_entry:
// DataOut: a0 gp ra s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000000000150C0:
	word64 t3_4 = Mem0[0x000000000001A0E0:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a0 gp ra s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp

isatty_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:00000000000150CC



void __fprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
__fprintf_chk_entry:
// DataOut: gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000000000150D0:
	word64 t3_4 = Mem0[0x000000000001A0E8:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp

__fprintf_chk_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:00000000000150DC



void putchar()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
putchar_entry:
// DataOut: gp ra s1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000000000150F0:
	word64 t3_4 = Mem0[0x000000000001A0F8:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: gp ra s1
// DataOut (flags): 
// SymbolicIn: sp:fp

putchar_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:00000000000150FC



void fputc()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
fputc_entry:
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015100:
	word64 t3_4 = Mem0[0x000000000001A100:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:fp

fputc_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:000000000001510C



void __stack_chk_fail()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
__stack_chk_fail_entry:
// DataOut: a0 a1 a2 gp ra s0 s1 s10 s2 s3 s4 s5 s6 s7 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015110:
	word64 t3_4 = Mem0[0x000000000001A108:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a0 a1 a2 gp ra s0 s1 s10 s2 s3 s4 s5 s6 s7 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp

__stack_chk_fail_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:000000000001511C



void __errno_location()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
__errno_location_entry:
// DataOut: a0 gp ra s10 s2 s3 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015120:
	word64 t3_4 = Mem0[0x000000000001A110:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a0 gp ra s10 s2 s3 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

__errno_location_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:000000000001512C



void strtol()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
strtol_entry:
// DataOut: a0 a1 a2 gp ra s1 s10 s2 s3 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015130:
	word64 t3_4 = Mem0[0x000000000001A118:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a0 a1 a2 gp ra s1 s10 s2 s3 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

strtol_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:000000000001513C



void strchr()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
strchr_entry:
// DataOut: a0 gp ra s0 s1 s10 s3 s4 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015140:
	word64 t3_4 = Mem0[0x000000000001A120:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a0 gp ra s0 s1 s10 s3 s4 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp

strchr_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:000000000001514C



void memcpy()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
memcpy_entry:
// DataOut: a1 gp s10 s3 s6 s7
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015150:
	word64 t3_4 = Mem0[0x000000000001A128:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: a1 gp s10 s3 s6 s7
// DataOut (flags): 
// SymbolicIn: sp:fp

memcpy_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:000000000001515C



void abort()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
abort_entry:
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015160:
	word64 t3_4 = Mem0[0x000000000001A130:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:fp

abort_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:000000000001516C



void freeaddrinfo()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: t1 t3
// Preserved: sp
freeaddrinfo_entry:
// DataOut: gp s1 s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015170:
	word64 t3_4 = Mem0[0x000000000001A138:word64]
	word64 sp_6
	word64 t3_7
	word64 t1_8
	call t3_4 (retsize: 0;)
		uses: sp_1,t1_5,t3_4
		defs: sp_6,t1_8,t3_7
	return
// DataOut: gp s1 s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp

freeaddrinfo_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp t3:<invalid> t1:000000000001517C



void fn0000000000015180(word64 ra, word64 gp, word64 a0, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 a1 gp ra
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 fa3 fa4 fa5 ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 sp t1 t3 t4 t5 t6
// Preserved: a0 a1 ra s11 s5
fn0000000000015180_entry:
	def fp
	def s5
	def gp
// DataOut: a0 a1 gp ra
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l0000000000015180:
	sp_1 = fp
	sp_2 = fp + -448
	qwLoc38_4 = s5
	a5 = Mem0[-1936:word64]
	qwLoc18 = s1
	s1 = 0x0000000000011000
	qwLoc78 = a5
	a5 = 0x0000000000010000
	a5 = 65544
	qwLoc10 = s0
	qwLoc20 = s2
	qwLoc28 = s3
	qwLoc30 = s4
	qwLoc40 = s6
	qwLoc48 = s7
	qwLoc50 = s8
	qwLoc58 = s9
	qwLoc60 = s10
	qwLoc68 = s11
	qwLoc08 = ra
	s8 = 0x0000000000001000
	s3 = a0
	s2 = a1
	dwLoc01A4 = 0x0000000000000000
	s0 = 0
	s6 = 0
	s9 = 0
	s10 = 0
	dwLoc01C0 = 0x0000000000000000
	s1 = 0x00000000000108E0
	s4 = 0x0000000000012000
	s7 = 1
	dwLoc01B8 = 65544
// DataOut: gp ra s0 s10 s2 s3 s6 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64) Local -01A4(64) Local -01C0(64)

l0000000000015200:
	a4 = 0
	a3 = 0x00000000000108E0
	a2 = 0x00000000000119A8
	a1 = s2
	a0 = s3
	getopt_long()
	a4 = -1
	a5 = a0
	branch a0 == a4 l0000000000015348
// DataOut: a0 a5 gp ra s0 s10 s2 s3 s6 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:<invalid> s1:0x00000000000108E0 s8:0x0000000000001000 s3:a0 s2:a1 s0:0 s6:0 s9:0 s10:0 s4:0x0000000000012000 s7:1 a4:118 a3:0x00000000000108E0 a2:0x00000000000119A8 a1:a1 a0:a0 t3:<invalid> t1:<invalid> -448(fp):0x0000000000000000 -440(fp):65544 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -01A4(64) Local -01C0(64)

l0000000000015348:
	a4 = (word64) Mem0[gp + -1904:int32]
	branch a4 >= s3 l0000000000015428
// DataOut: a4 a5 gp ra s0 s10 s2 s3 s6 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:0x00000000000108E0 s8:0x0000000000001000 s3:a0 s2:a1 s0:0 s6:0 s9:0 s10:0 s4:0x0000000000012000 s7:1 a4:-1 a3:0x00000000000108E0 a2:0x00000000000119A8 a1:a1 a0:a0 t3:<invalid> t1:<invalid> -448(fp):0x0000000000000000 -440(fp):65544 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -01A4(64) Local -01C0(64)

l0000000000015428:
	s4 = 0
	s1 = 0
// DataOut: a5 gp ra s0 s1 s10 s4 s6 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:0x00000000000108E0 s8:0x0000000000001000 s3:a0 s2:a1 s0:0 s6:0 s9:0 s10:0 s4:0x0000000000012000 s7:1 a4:(word64) Mem0[gp + -1904:int32] a3:0x00000000000108E0 a2:0x00000000000119A8 a1:a1 a0:a0 t3:<invalid> t1:<invalid> -448(fp):0x0000000000000000 -440(fp):65544 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -01A4(64) Local -01C0(64)

l0000000000015350:
	a1 = (int64) ((word32) a4 + 1)
	a3 = a4 << 0x00000003
	s2 = s2 + a3
	Mem0[gp + 2192:word32] = a1
	s1 = Mem0[s2:word64]
	s4 = 0
	branch a1 >= s3 l0000000000015378
// DataOut: a4 a5 gp ra s0 s1 s10 s2 s4 s6 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:0x00000000000108E0 s8:0x0000000000001000 s3:a0 s2:a1 s0:0 s6:0 s9:0 s10:0 s4:0x0000000000012000 s7:1 a4:(word64) Mem0[gp + -1904:int32] a3:0x00000000000108E0 a2:0x00000000000119A8 a1:a1 a0:a0 t3:<invalid> t1:<invalid> -448(fp):0x0000000000000000 -440(fp):65544 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -01A4(64) Local -01C0(64)

l000000000001536C:
	s4 = Mem0[s2 + 8:word64]
	a4 = (int64) ((word32) a4 + 2)
	Mem0[gp + 2192:word32] = a4
// DataOut: a5 gp ra s0 s1 s10 s4 s6 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:a1 + ((word64) Mem0[gp + -1904:int32] << 0x00000003) s0:0 s6:0 s9:0 s10:0 s4:0 s7:1 a4:(word64) Mem0[gp + -1904:int32] a3:(word64) Mem0[gp + -1904:int32] << 0x00000003 a2:0x00000000000119A8 a1:(int64) ((word32) (word64) Mem0[gp + -1904:int32] + 1) a0:a0 t3:<invalid> t1:<invalid> -448(fp):0x0000000000000000 -440(fp):65544 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -01A4(64) Local -01C0(64)

l0000000000015378:
	a3 = PHI(a3, a3, a3)
	a4 = PHI(a4, a4, a4)
	a1 = PHI(a1, a1, a1)
	s4 = PHI(s4, s4, s4)
	s2 = PHI(s2, s2, s2)
	s1 = PHI(s1, s1, s1)
	branch s6 != 0x0000000000000000 l0000000000015588
// DataOut: a5 gp ra s0 s1 s10 s4 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:0 s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:0x00000000000119A8 a1:<invalid> a0:a0 t3:<invalid> t1:<invalid> -448(fp):0x0000000000000000 -440(fp):65544 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -01A4(64) Local -01C0(64)

l0000000000015588:
	a2 = 0x0000000000012000
	a1 = 0x0000000000012000
	a2 = 0x00000000000119C0
	a1 = 0x00000000000119C8
	a0 = 1
	__printf_chk()
	s6 = 0
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:0 s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:0x00000000000119A8 a1:<invalid> a0:a0 t3:<invalid> t1:<invalid> -448(fp):0x0000000000000000 -440(fp):65544 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001537C:
	a4 = (word64) dwLoc01A4
	branch a4 == 0x0000000000000000 l00000000000153B4
// DataOut: a5 gp ra s0 s1 s10 s4 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:0 s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:0x00000000000119A8 a1:<invalid> a0:a0 t3:<invalid> t1:<invalid> -448(fp):0x0000000000000000 -440(fp):65544 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -01A4(64) Local -01C0(64)

l0000000000015384:
	a4 = (word64) dwLoc01C0
	branch a4 == 0x0000000000000000 l00000000000153B4
// DataOut: a5 gp ra s0 s1 s10 s4 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:0 s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:(word64) (int32) 0x0000000000000000 a3:<invalid> a2:0x00000000000119A8 a1:<invalid> a0:a0 t3:<invalid> t1:<invalid> -448(fp):0x0000000000000000 -440(fp):65544 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -01A4(64) Local -01C0(64)

l00000000000153B4:
	a4 = PHI(a4, a4)
	qwLoc01B8 = a5
	branch s9 == 0x0000000000000000 l0000000000015924
// DataOut: gp ra s0 s1 s10 s4 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:0 s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:(word64) (int32) 0x0000000000000000 a3:<invalid> a2:0x00000000000119A8 a1:<invalid> a0:a0 t3:<invalid> t1:<invalid> -448(fp):0x0000000000000000 -440(fp):65544 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -01A4(64) Local -01B8(64) Local -01C0(64)

l0000000000015924:
	a0 = fn0000000000017924(gp)
	a5 = qwLoc01B8
	branch a0 != 0x0000000000000000 l0000000000015458
// DataOut: a5 gp ra s0 s1 s10 s4 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:0 s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:(word64) (int32) 0x0000000000000000 a3:<invalid> a2:0x00000000000119A8 a1:<invalid> a0:a0 t3:<invalid> t1:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -01A4(64) Local -01C0(64)

l0000000000015930:
	a4 = 0x0000000000010000
	a4 = 65544
	a3 = s0 & 65544
	branch a3 != 65544 l0000000000015458
// DataOut: a5 gp ra s0 s1 s10 s4 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:0 s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -01A4(64) Local -01C0(64)

l0000000000015940:
// DataOut: a5 gp ra s0 s1 s10 s4 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:0 s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:65544 a3:0 a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -01A4(64) Local -01C0(64)

l00000000000153BC:
	a0 = fn0000000000017924(gp)
	s2 = s0 | 2
	a5 = qwLoc01B8
	branch a0 == 0x0000000000000000 l0000000000015434
// DataOut: a5 gp ra s0 s1 s10 s2 s4 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:0 s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:(word64) (int32) 0x0000000000000000 a3:<invalid> a2:0x00000000000119A8 a1:<invalid> a0:a0 t3:<invalid> t1:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -01A4(64) Local -01C0(64)

l0000000000015434:
	a4 = 0x0000000000010000
	a4 = 65544
	s0 = s0 & 65544
	branch s0 != 65544 l00000000000153CC
// DataOut: a5 gp ra s1 s10 s2 s4 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:2 s0:0 s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -01A4(64) Local -01C0(64)

l0000000000015444:
	s0 = s2
// DataOut: a5 gp ra s0 s1 s10 s4 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:2 s0:0 s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:65544 a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -01A4(64) Local -01C0(64)

l0000000000015448:
	a3 = PHI(a3, a3)
	a4 = PHI(a4, a4)
	a0 = PHI(a0, a0)
	s0 = PHI(s0, s0)
	a5 = PHI(a5, a5)
	s2 = 0x0000000000004000
	s2 = s0 | 0x0000000000004000
	branch s9 != 0x0000000000000000 l00000000000153CC
// DataOut: a5 gp ra s1 s10 s2 s4 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:65544 a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -01A4(64) Local -01C0(64)

l0000000000015454:
	s0 = s2
// DataOut: a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:65544 a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64)

l0000000000015458:
	a3 = PHI(a3, a3, a3)
	a4 = PHI(a4, a4, a4)
	a0 = PHI(a0, a0, a0)
	s2 = PHI(s2, s2, s2)
	s0 = PHI(s0, s0, s0)
	a5 = PHI(a5, a5, a5)
	branch s10 == 0x0000000000000000 l0000000000015CE4
// DataOut: a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64)

l0000000000015CE4:
	branch s1 != 0x0000000000000000 l0000000000015510
// DataOut: a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015CE8:
	a5 = (word64) Mem0[gp + -2028:int32]
	branch a5 != 0x0000000000000000 l00000000000153D8
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015CF0:
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000012000
	a2 = 28
	a1 = 1
	a0 = 0x0000000000011A30
	fwrite()
	a0 = 1
	fn0000000000015FCC(gp, a0)
	s6 = 1
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:(word64) Mem0[gp + -2028:int32] s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001545C:
	a2 = 1
	a1 = s10
	a0 = fp + -420
	ra = fn00000000000166F4(ra, gp, a0, a1, a2, out sp, out s0, out s1, out a0, out a1, out s4)
	a5 = a0
	branch a0 < 0x0000000000000000 l0000000000015BC8
// DataOut: a5 gp s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015BC8:
	a5 = (word64) Mem0[gp + -2028:int32]
	branch a5 != 0x0000000000000000 l00000000000153D8
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015BD0:
	a5 = (word64) Mem0[sp + 28:int32]
	a0 = Mem0[gp + -1920:word64]
	branch a5 != 0x0000000000000000 l0000000000015E7C
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:(word64) Mem0[gp + -2028:int32] s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015E7C:
	a3 = 0x0000000000012000
	a3 = 0x0000000000011998
	a4 = s10
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015BDC:
	a3 = 0x0000000000012000
	a3 = 0x00000000000119A0
	a4 = s10
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015474:
	a1 = sp + 40
	a0 = 2
	Mem0[sp + 8:word64] = a5
	s1 = (word64) Mem0[sp + 28:int32]
	Mem0[sp + 32:word64] = 0x0000000000000000
	clock_gettime()
	a5 = Mem0[sp + 8:word64]
	branch a0 < 0x0000000000000000 l0000000000015CB0
// DataOut: a5 gp s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015494:
	branch s1 == 0x0000000000000000 l0000000000015C48
// DataOut: a5 gp s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:2 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015C48:
	a1 = 4
	a0 = sp + 256
	Mem0[sp + 8:word64] = a5
	s1 = Mem0[sp + 48:word64]
	ra = fn00000000000164D0(a1, out sp, out s0, out s1, out a0)
	a5 = Mem0[sp + 8:word64]
	branch a0 < 0x0000000000000000 l0000000000015CB0
// DataOut: a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:2 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015C64:
	a4 = 15
	branch a4 >= a5 l0000000000015C7C
// DataOut: a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015C6C:
	a4 = 4
	a4 = s1 | a4
	a3 = 1
	branch a3 >=u a4 l0000000000015DB8
// DataOut: a3 a4 a5 gp ra s0 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:15 a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015DB8:
	branch a4 == a3 l0000000000015E00
// DataOut: a5 gp ra s0 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:1 a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015E00:
	a4 = -64
	Mem0[sp + 256:byte] = a4
	a4 = -88
	Mem0[sp + 257:byte] = a4
// DataOut: a5 gp ra s0 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:1 a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015DBC:
	a4 = -84
	Mem0[sp + 256:byte] = a4
	a4 = Mem0[sp + 48:word64]
	a4 = a4 >> 0x00000004
	a4 = a4 & 15
	a4 = a4 | 16
	Mem0[sp + 257:byte] = a4
// DataOut: a5 gp ra s0 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:1 a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015C7C:
	a3 = PHI(a3, a3)
	a4 = 10
	Mem0[sp + 256:byte] = a4
// DataOut: a5 gp ra s0 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015C84:
	a4 = (word64) Mem0[sp + 256:int32]
	s1 = sp + 264
	a3 = 64
	a2 = s1
	a1 = sp + 24
	a0 = 2
	Mem0[sp + 8:word64] = a5
	Mem0[sp + 24:word32] = a4
	inet_ntop()
	a5 = Mem0[sp + 8:word64]
	branch a0 != 0x0000000000000000 l00000000000154DC
// DataOut: a5 gp ra s0 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015498:
	a4 = Mem0[sp + 48:word64]
	a1 = 15
	a0 = sp + 57
	a4 = a4 & 1
	a4 = a4 | -4
	Mem0[sp + 56:byte] = a4
	ra = fn00000000000164D0(a1, out sp, out s0, out s1, out a0)
	a5 = Mem0[sp + 8:word64]
	branch a0 < 0x0000000000000000 l0000000000015CB0
// DataOut: gp ra s0 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:2 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000154BC:
	s1 = sp + 264
	a3 = 64
	a2 = s1
	a1 = sp + 56
	a0 = 10
	inet_ntop()
	a5 = Mem0[sp + 8:word64]
	branch a0 == 0x0000000000000000 l0000000000015CB0
// DataOut: a5 gp ra s0 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000154DC:
	ra = PHI(ra, ra)
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	a5 = PHI(a5, a5)
	sp = PHI(sp, sp)
	a2 = 0x0000000000012000
	a4 = a5
	a3 = s1
	a2 = 0x0000000000011A90
	a1 = 1
	a0 = sp + 32
	Mem0[sp + 8:word64] = a5
	__asprintf_chk()
	a4 = -1
	a5 = Mem0[sp + 8:word64]
	branch a0 == a4 l0000000000015CB0
// DataOut: a5 gp ra s0 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:64 a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015508:
	s1 = Mem0[sp + 32:word64]
	branch s1 == 0x0000000000000000 l0000000000015CB0
// DataOut: a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:-1 a3:<invalid> a2:0x0000000000011A90 a1:1 a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015CB0:
	a2 = PHI(a2, a2, a2, a2, a2, a2, a2)
	a3 = PHI(a3, a3, a3, a3, a3, a3, a3)
	a1 = PHI(a1, a1, a1, a1, a1, a1, a1)
	a0 = PHI(a0, a0, a0, a0, a0, a0, a0)
	ra = PHI(ra, ra, ra, ra, ra, ra, ra)
	s0 = PHI(s0, s0, s0, s0, s0, s0, s0)
	s1 = PHI(s1, s1, s1, s1, s1, s1, s1)
	a5 = PHI(a5, a5, a5, a5, a5, a5, a5)
	sp = PHI(sp, sp, sp, sp, sp, sp, sp)
	a4 = (word64) Mem0[gp + -2028:int32]
	branch a4 != 0x0000000000000000 l00000000000153D8
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015CB8:
	a0 = Mem0[gp + -1920:word64]
	a2 = 0x0000000000012000
	a3 = a5
	a2 = 0x0000000000011A98
	a1 = 1
	__fprintf_chk()
	s6 = 1
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:(word64) Mem0[gp + -2028:int32] a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000153CC:
	a3 = PHI(a3, a3, a3)
	a4 = PHI(a4, a4, a4)
	a0 = PHI(a0, a0, a0)
	s2 = PHI(s2, s2, s2)
	s0 = PHI(s0, s0, s0)
	a5 = PHI(a5, a5, a5)
	branch s10 == 0x0000000000000000 l00000000000155A8
// DataOut: gp ra s10 s4 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -01A4(64) Local -01C0(64)

l00000000000155A8:
	a4 = (word64) dwLoc01A4
	branch a4 != 0x0000000000000000 l0000000000015944
// DataOut: gp ra s10 s4 s9
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -01C0(64)

l0000000000015944:
	a1 = s9
	a0 = 10
	qwLoc01B8 = a5
	a0 = fn00000000000169D8(gp, a1)
	s1 = a0
	s0 = s2
	a5 = Mem0[sp + 8:word64]
	branch a0 != 0x0000000000000000 l0000000000015510
// DataOut: a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:(word64) (int32) 0x0000000000000000 a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015510:
	qwLoc01B8 = PHI(qwLoc01B8, qwLoc01B8, qwLoc01B8)
	a2 = PHI(a2, a2, a2)
	a3 = PHI(a3, a3, a3)
	a1 = PHI(a1, a1, a1)
	a0 = PHI(a0, a0, a0)
	ra = PHI(ra, ra, ra)
	s4 = PHI(s4, s4, s4)
	s2 = PHI(s2, s2, s2)
	s0 = PHI(s0, s0, s0)
	s1 = PHI(s1, s1, s1)
	a5 = PHI(a5, a5, a5)
	sp = PHI(sp, sp, sp)
	a4 = (word64) Mem0[sp:int32]
	branch a4 != 0x0000000000000000 l00000000000155D8
// DataOut: a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000155B0:
	a4 = (word64) dwLoc01C0
	branch a4 == 0x0000000000000000 l000000000001598C
// DataOut: gp ra s10 s4 s9
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:(word64) (int32) 0x0000000000000000 a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001598C:
	a1 = s9
	a0 = 0
	qwLoc01C0 = a5
	a0 = fn00000000000169D8(gp, a1)
	s1 = a0
	branch a0 == 0x0000000000000000 l0000000000015964
// DataOut: gp ra s1 s10 s2 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:(word64) (int32) 0x0000000000000000 a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000159A4:
	s0 = s2
	a5 = Mem0[sp:word64]
// DataOut: a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):a0 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015518:
	qwLoc01B8 = PHI(qwLoc01B8, qwLoc01B8)
	qwLoc01C0 = PHI(qwLoc01C0, qwLoc01C0)
	a2 = PHI(a2, a2)
	a3 = PHI(a3, a3)
	a4 = PHI(a4, a4)
	ra = PHI(ra, ra)
	s4 = PHI(s4, s4)
	s2 = PHI(s2, s2)
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	a5 = PHI(a5, a5)
	sp = PHI(sp, sp)
	a1 = 58
	a0 = s1
	Mem0[sp:word64] = a5
	strchr()
	a5 = Mem0[sp:word64]
	branch a0 == 0x0000000000000000 l00000000000155D8
// DataOut: a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015530:
	a4 = 1
	Mem0[sp + 28:word32] = a4
	branch s4 == 0x0000000000000000 l0000000000015BEC
// DataOut: a5 gp ra s0 s1 s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:58 a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015BEC:
	a1 = 47
	a0 = s1
	Mem0[sp:word64] = a5
	strchr()
	a5 = Mem0[sp:word64]
	branch a0 != 0x0000000000000000 l0000000000015BB8
// DataOut: a0 a5 gp ra s0 s1 s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:1 a3:<invalid> a2:<invalid> a1:58 a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015C04:
// DataOut: gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:1 a3:<invalid> a2:<invalid> a1:47 a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000155B8:
	a1 = s9
	a0 = 2
	qwLoc01C0 = a5
	a0 = fn00000000000169D8(gp, a1)
	s1 = a0
	branch a0 == 0x0000000000000000 l0000000000015964
// DataOut: gp ra s1 s10 s2 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:(word64) (int32) 0x0000000000000000 a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015964:
	qwLoc01B8 = PHI(qwLoc01B8, qwLoc01B8, qwLoc01B8)
	qwLoc01C0 = PHI(qwLoc01C0, qwLoc01C0, qwLoc01C0)
	a4 = PHI(a4, a4, a4)
	a1 = PHI(a1, a1, a1)
	a0 = PHI(a0, a0, a0)
	s0 = PHI(s0, s0, s0)
	s1 = PHI(s1, s1, s1)
	a5 = (word64) Mem0[gp + -2028:int32]
	branch a5 != 0x0000000000000000 l00000000000153D8
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001596C:
	a0 = Mem0[gp + -1920:word64]
	a2 = 0x0000000000012000
	a3 = s9
	a2 = 0x0000000000011A50
	a1 = 1
	__fprintf_chk()
	s6 = 1
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:(word64) Mem0[gp + -2028:int32] s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000155D0:
	a5 = Mem0[sp:word64]
	s0 = s2
// DataOut: a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):a0 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000155D8:
	qwLoc01B8 = PHI(qwLoc01B8, qwLoc01B8, qwLoc01B8)
	qwLoc01C0 = PHI(qwLoc01C0, qwLoc01C0, qwLoc01C0)
	a2 = PHI(a2, a2, a2)
	a3 = PHI(a3, a3, a3)
	a4 = PHI(a4, a4, a4)
	a1 = PHI(a1, a1, a1)
	a0 = PHI(a0, a0, a0)
	ra = PHI(ra, ra, ra)
	s4 = PHI(s4, s4, s4)
	s2 = PHI(s2, s2, s2)
	s0 = PHI(s0, s0, s0)
	s1 = PHI(s1, s1, s1)
	a5 = PHI(a5, a5, a5)
	sp = PHI(sp, sp, sp)
	branch s4 == 0x0000000000000000 l0000000000015BA0
// DataOut: a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015BA0:
	a1 = 47
	a0 = s1
	Mem0[sp:word64] = a5
	strchr()
	a5 = Mem0[sp:word64]
	branch a0 == 0x0000000000000000 l00000000000155FC
// DataOut: a0 a5 gp ra s0 s1 s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015BB8:
	qwLoc01B8 = PHI(qwLoc01B8, qwLoc01B8)
	qwLoc01C0 = PHI(qwLoc01C0, qwLoc01C0)
	a2 = PHI(a2, a2)
	a3 = PHI(a3, a3)
	a4 = PHI(a4, a4)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	ra = PHI(ra, ra)
	s2 = PHI(s2, s2)
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	a5 = PHI(a5, a5)
	sp = PHI(sp, sp)
	Mem0[a0:byte] = 0x0000000000000000
	s4 = a0 + 1
	branch s4 == 0x0000000000000000 l00000000000155FC
	Mem0[a0:byte] = 0x0000000000000000
	s4 = a0 + 1
	branch s4 == 0x0000000000000000 l00000000000155FC
// DataOut: a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:47 a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015BC4:
// DataOut: gp ra s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:47 a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000155DC:
	a5 = (word64) Mem0[sp + 28:int32]
	branch a5 != 0x0000000000000000 l000000000001553C
// DataOut: gp ra s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001553C:
	qwLoc01B8 = PHI(qwLoc01B8, qwLoc01B8)
	qwLoc01C0 = PHI(qwLoc01C0, qwLoc01C0)
	a2 = PHI(a2, a2)
	a3 = PHI(a3, a3)
	a4 = PHI(a4, a4)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	ra = PHI(ra, ra)
	s4 = PHI(s4, s4)
	s2 = PHI(s2, s2)
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	sp = PHI(sp, sp)
	a5 = (word64) Mem0[gp + -2028:int32]
	branch a5 != 0x0000000000000000 l00000000000153D8
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015544:
	a0 = Mem0[gp + -1920:word64]
	a2 = 0x0000000000012000
	a3 = s4
	a2 = 0x0000000000011AD0
	a1 = 1
	__fprintf_chk()
	a0 = 1
	fn0000000000015FCC(gp, a0)
	s6 = 1
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:(word64) Mem0[gp + -2028:int32] s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000155E4:
	qwLoc01B8 = PHI(qwLoc01B8, qwLoc01B8)
	qwLoc01C0 = PHI(qwLoc01C0, qwLoc01C0)
	a3 = PHI(a3, a3)
	a4 = PHI(a4, a4)
	ra = PHI(ra, ra)
	s4 = PHI(s4, s4)
	s2 = PHI(s2, s2)
	sp = PHI(sp, sp)
	a2 = 0
	a1 = s4
	a0 = sp + 28
	ra = fn00000000000166F4(ra, gp, a0, a1, a2, out sp, out s0, out s1, out a0, out a1, out s4)
	a5 = a0
	branch a0 < 0x0000000000000000 l0000000000015B6C
// DataOut: a5 gp ra s0 s1 s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015B6C:
	a5 = (word64) Mem0[gp + -2028:int32]
	branch a5 != 0x0000000000000000 l00000000000153D8
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015B74:
	a5 = (word64) Mem0[sp + 28:int32]
	a0 = Mem0[gp + -1920:word64]
	branch a5 != 0x0000000000000000 l0000000000015CD8
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:(word64) Mem0[gp + -2028:int32] s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015CD8:
	a3 = 0x0000000000012000
	a3 = 0x0000000000011998
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015B80:
	a3 = 0x0000000000012000
	a3 = 0x00000000000119A0
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015B88:
	a3 = PHI(a3, a3)
	a4 = s4
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015B8C:
	qwLoc01B8 = PHI(qwLoc01B8, qwLoc01B8, qwLoc01B8)
	qwLoc01C0 = PHI(qwLoc01C0, qwLoc01C0, qwLoc01C0)
	a3 = PHI(a3, a3, a3)
	a4 = PHI(a4, a4, a4)
	a0 = PHI(a0, a0, a0)
	ra = PHI(ra, ra, ra)
	s4 = PHI(s4, s4, s4)
	s2 = PHI(s2, s2, s2)
	s0 = PHI(s0, s0, s0)
	s1 = PHI(s1, s1, s1)
	a5 = PHI(a5, a5, a5)
	sp = PHI(sp, sp, sp)
	a2 = 0x0000000000012000
	a2 = 0x0000000000011A70
	a1 = 1
	__fprintf_chk()
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000155FC:
	qwLoc01B8 = PHI(qwLoc01B8, qwLoc01B8, qwLoc01B8)
	qwLoc01C0 = PHI(qwLoc01C0, qwLoc01C0, qwLoc01C0)
	a2 = PHI(a2, a2, a2)
	a3 = PHI(a3, a3, a3)
	a1 = PHI(a1, a1, a1)
	a0 = PHI(a0, a0, a0)
	ra = PHI(ra, ra, ra)
	s4 = PHI(s4, s4, s4)
	s2 = PHI(s2, s2, s2)
	s0 = PHI(s0, s0, s0)
	s1 = PHI(s1, s1, s1)
	a5 = PHI(a5, a5, a5)
	sp = PHI(sp, sp, sp)
	a4 = (word64) Mem0[sp + 28:int32]
	branch a4 == 0x0000000000000000 l00000000000159B0
// DataOut: a5 gp ra s0 s1 s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000159B0:
	a3 = s0
	a2 = sp + 56
	a1 = a5
	a0 = s1
	a0 = fn0000000000016D74(ra, gp, s0, a0, a1, a2, a3)
// DataOut: a0 gp ra s0 s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015604:
	qwLoc01B8 = PHI(qwLoc01B8, qwLoc01B8)
	qwLoc01C0 = PHI(qwLoc01C0, qwLoc01C0)
	a4 = PHI(a4, a4)
	ra = PHI(ra, ra)
	s4 = PHI(s4, s4)
	s2 = PHI(s2, s2)
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	a5 = PHI(a5, a5)
	sp = PHI(sp, sp)
	a3 = s0
	a2 = sp + 56
	a1 = a5
	a0 = s1
	a0 = fn00000000000175BC(gp)
// DataOut: a0 gp ra s0 s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:0x0000000000001000 s3:<invalid> s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015618:
	qwLoc01B8 = PHI(qwLoc01B8, qwLoc01B8)
	qwLoc01C0 = PHI(qwLoc01C0, qwLoc01C0)
	a2 = PHI(a2, a2)
	a3 = PHI(a3, a3)
	a4 = PHI(a4, a4)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	ra = PHI(ra, ra)
	s4 = PHI(s4, s4)
	s2 = PHI(s2, s2)
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	a5 = PHI(a5, a5)
	sp = PHI(sp, sp)
	branch a0 < 0x0000000000000000 l00000000000153D8
// DataOut: gp ra s0 s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001561C:
	a5 = 0x00000000FFFAC000
	a5 = 4294623231
	a5 = s0 & 4294623231
	branch a5 != 0x0000000000000000 l0000000000015630
// DataOut: gp ra s0 s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001562C:
	s0 = s0 | 8
// DataOut: gp ra s0 s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015630:
	s0 = PHI(s0, s0)
	a0 = 1
	isatty()
	branch a0 == 0x0000000000000000 l0000000000015644
// DataOut: gp ra s0 s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001563C:
	a4 = 1
	Mem0[gp + 2064:word32] = a4
// DataOut: gp ra s0 s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015644:
	a4 = PHI(a4, a4)
	a5 = s0 & 8
	branch a5 == 0x0000000000000000 l00000000000159C8
// DataOut: gp ra s0 s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000159C8:
	a5 = s0 & 128
	branch a5 != 0x0000000000000000 l0000000000015D18
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015D18:
	a2 = Mem0[sp + 104:word64]
	a1 = 0x0000000000012000
	a1 = 0x0000000000011C28
	a0 = 1
	__printf_chk()
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000159D0:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	a5 = s0 & 512
	branch a5 != 0x0000000000000000 l0000000000015D48
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015D48:
	a2 = (word64) Mem0[sp + 216:int32]
	a1 = 0x0000000000012000
	a1 = 0x0000000000011C38
	a0 = 1
	__printf_chk()
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000159D8:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	a5 = s0 & 64
	branch a5 == 0x0000000000000000 l00000000000159FC
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000159E0:
	a5 = (word64) Mem0[sp + 28:int32]
	branch a5 != 0x0000000000000000 l00000000000159FC
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000159E8:
	a2 = Mem0[sp + 96:word64]
	a1 = 0x0000000000012000
	a1 = 0x0000000000011C48
	a0 = 1
	__printf_chk()
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000159FC:
	a2 = PHI(a2, a2, a2)
	a1 = PHI(a1, a1, a1)
	a0 = PHI(a0, a0, a0)
	a5 = s0 & 256
	branch a5 != 0x0000000000000000 l0000000000015D30
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015D30:
	a2 = Mem0[sp + 88:word64]
	a1 = 0x0000000000012000
	a1 = 0x0000000000011C58
	a0 = 1
	__printf_chk()
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015A04:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	a5 = s0 << 0x0000000E
	branch a5 < 0x0000000000000000 l0000000000015D78
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015D78:
	a2 = Mem0[sp + 80:word64]
	a1 = 0x0000000000012000
	a1 = 0x0000000000011C68
	a0 = 1
	__printf_chk()
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015A0C:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	a5 = s0 & 1024
	branch a5 == 0x0000000000000000 l0000000000015A2C
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015A14:
	a2 = Mem0[sp + 224:word64]
	branch a2 == 0x0000000000000000 l0000000000015A2C
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015A1C:
	a1 = 0x0000000000012000
	a1 = 0x0000000000011C78
	a0 = 1
	__printf_chk()
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015A2C:
	a2 = PHI(a2, a2, a2)
	a1 = PHI(a1, a1, a1)
	a0 = PHI(a0, a0, a0)
	a5 = s0 << 0x00000014
	branch a5 >= 0x0000000000000000 l0000000000015A4C
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015A34:
	a2 = Mem0[sp + 232:word64]
	branch a2 == 0x0000000000000000 l0000000000015A4C
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015A3C:
	a1 = 0x0000000000012000
	a1 = 0x0000000000011C88
	a0 = 1
	__printf_chk()
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015A4C:
	a2 = PHI(a2, a2, a2)
	a1 = PHI(a1, a1, a1)
	a0 = PHI(a0, a0, a0)
	a5 = s0 << 0x00000012
	branch a5 >= 0x0000000000000000 l0000000000015A80
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015A54:
	s2 = Mem0[sp + 240:word64]
	branch s2 == 0x0000000000000000 l0000000000015A80
// DataOut: gp s0 s2 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015A5C:
	a1 = 32
	a0 = s2
	strchr()
	a2 = s2
	branch a0 == 0x0000000000000000 l0000000000015DA4
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015DA4:
	a1 = 0x0000000000012000
	a1 = 0x0000000000011CA8
	a0 = 1
	__printf_chk()
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:32 a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015A70:
	a1 = 0x0000000000012000
	a1 = 0x0000000000011C98
	a0 = 1
	__printf_chk()
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:32 a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015A80:
	a2 = PHI(a2, a2, a2, a2)
	a1 = PHI(a1, a1, a1, a1)
	a0 = PHI(a0, a0, a0, a0)
	s2 = PHI(s2, s2, s2, s2)
	a5 = s0 << 0x00000013
	branch a5 >= 0x0000000000000000 l0000000000015AAC
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015A88:
	a1 = 32
	a0 = sp + 152
	strchr()
	a2 = sp + 152
	branch a0 == 0x0000000000000000 l0000000000015D90
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015D90:
	a1 = 0x0000000000012000
	a1 = 0x0000000000011CC8
	a0 = 1
	__printf_chk()
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:32 a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015A9C:
	a1 = 0x0000000000012000
	a1 = 0x0000000000011CB8
	a0 = 1
	__printf_chk()
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:32 a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015AAC:
	a2 = PHI(a2, a2, a2)
	a1 = PHI(a1, a1, a1)
	a0 = PHI(a0, a0, a0)
	a5 = s0 & 1
	branch a5 == 0x0000000000000000 l0000000000015ACC
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015AB4:
	a2 = Mem0[sp + 112:word64]
	branch a2 == 0x0000000000000000 l0000000000015ACC
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015ABC:
	a1 = 0x0000000000012000
	a1 = 0x0000000000011CD8
	a0 = 1
	__printf_chk()
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015ACC:
	a2 = PHI(a2, a2, a2)
	a1 = PHI(a1, a1, a1)
	a0 = PHI(a0, a0, a0)
	a5 = s0 & 2
	branch a5 != 0x0000000000000000 l0000000000015D60
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015D60:
	a1 = 0x0000000000012000
	a2 = s1
	a1 = 0x0000000000011CE8
	a0 = 1
	__printf_chk()
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015AD4:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	a5 = 0x000000000000C000
	s0 = s0 & 0x000000000000C000
	branch s0 != 0x000000000000C000 l00000000000153DC
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015AE0:
	a2 = Mem0[sp + 128:word64]
	branch a2 == 0x0000000000000000 l0000000000015AF8
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:0x000000000000C000 s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015AE8:
	a1 = 0x0000000000012000
	a1 = 0x0000000000011CF8
	a0 = 1
	__printf_chk()
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:0x000000000000C000 s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015AF8:
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	s0 = Mem0[sp + 120:word64]
	branch s0 == 0x0000000000000000 l0000000000015B24
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:0x000000000000C000 s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015B00:
	a1 = 32
	a0 = s0
	strchr()
	a2 = s0
	branch a0 == 0x0000000000000000 l0000000000015E90
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:0x000000000000C000 s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015B14:
	a1 = 0x0000000000012000
	a1 = 0x0000000000011D08
	a0 = 1
	__printf_chk()
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:0x000000000000C000 s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:32 a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001564C:
	a5 = (word64) Mem0[sp + 28:int32]
	s2 = (word64) Mem0[sp + 216:int32]
	branch a5 != 0x0000000000000000 l000000000001590C
// DataOut: gp ra s10 s2 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001590C:
	a5 = 128
	branch s2 != a5 l0000000000015660
// DataOut: gp ra s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015658:
	a5 = 32
	branch s2 == a5 l0000000000015914
// DataOut: gp ra s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015914:
	a5 = PHI(a5, a5)
	a3 = Mem0[sp + 64:word64]
	branch a3 == 0x0000000000000000 l0000000000015DDC
	a3 = Mem0[sp + 64:word64]
	branch a3 == 0x0000000000000000 l0000000000015DDC
// DataOut: gp ra sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015DDC:
	a3 = Mem0[sp + 56:word64]
	s2 = 0x0000000000012000
	s1 = 0x0000000000012000
	a1 = 0x0000000000012000
	a2 = 0x0000000000011C60
	a1 = 0x0000000000011B10
	a0 = 0x0000000000011B08
	s4 = fn000000000001654C(ra, gp)
// DataOut: gp ra s0 s1 s2 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001591C:
	s4 = 1
// DataOut: gp ra
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015660:
	a5 = PHI(a5, a5)
	branch s10 == 0x0000000000000000 l0000000000015860
// DataOut: gp ra sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015860:
	s3 = Mem0[sp + 56:word64]
	a0 = Mem0[sp + 88:word64]
	a1 = s3
	strcmp()
	branch a0 == 0x0000000000000000 l0000000000015664
// DataOut: gp ra sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015874:
	a3 = Mem0[sp + 64:word64]
	s4 = 0
	branch a3 == 0x0000000000000000 l0000000000015E14
// DataOut: gp ra
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015E14:
	s2 = 0x0000000000012000
	s1 = 0x0000000000012000
	a1 = 0x0000000000012000
	a2 = 0x0000000000011C60
	a3 = s3
	a1 = 0x0000000000011B10
	a0 = 0x0000000000011B08
	s4 = fn000000000001654C(ra, gp)
	s2 = (word64) Mem0[sp + 216:int32]
// DataOut: gp ra s1 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:0 s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015880:
	s3 = PHI(s3, s3)
	a5 = PHI(a5, a5)
	s2 = 0x0000000000012000
	s1 = 0x0000000000012000
	a1 = 0x0000000000012000
	a2 = 0x0000000000011C60
	a1 = 0x0000000000011AF8
	a0 = 0x0000000000011B08
	s4 = fn000000000001654C(ra, gp)
	a3 = Mem0[sp + 56:word64]
	a1 = 0x0000000000012000
	a2 = s2 + -928
	a1 = 0x0000000000011B10
	a0 = s1 + -1272
	s4 = fn000000000001654C(ra, gp)
	branch s4 == 0x0000000000000000 l0000000000015E74
// DataOut: gp ra s0 s1 s2 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015E74:
	s2 = (word64) Mem0[sp + 216:int32]
// DataOut: gp ra s1 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000158B8:
	a2 = PHI(a2, a2)
	a3 = PHI(a3, a3)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	s4 = PHI(s4, s4)
	s3 = PHI(s3, s3)
	s2 = PHI(s2, s2)
	s1 = PHI(s1, s1)
	a5 = 0x0000000000010000
	a5 = 65544
	s0 = s0 & 65544
	branch s0 == 65544 l0000000000015E64
// DataOut: gp ra s1 s2 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015E64:
	a3 = Mem0[sp + 80:word64]
	s0 = 1
	branch a3 != 0x0000000000000000 l0000000000015C2C
// DataOut: gp ra s1 s2 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:65544 s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015E70:
// DataOut: gp ra s2 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:65544 s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:1 s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015664:
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	s3 = PHI(s3, s3)
	s1 = 0x0000000000012000
// DataOut: gp ra s1 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015668:
	a2 = PHI(a2, a2, a2)
	a1 = PHI(a1, a1, a1)
	a0 = PHI(a0, a0, a0)
	s4 = PHI(s4, s4, s4)
	s2 = PHI(s2, s2, s2)
	s1 = PHI(s1, s1, s1)
	a5 = PHI(a5, a5, a5)
	a3 = Mem0[sp + 72:word64]
	s3 = 0x0000000000012000
	branch a3 == 0x0000000000000000 l0000000000015690
// DataOut: gp ra s1 s3 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015674:
	a1 = 0x0000000000012000
	a4 = s2
	a2 = 0x0000000000011B20
	a1 = 0x0000000000011B28
	a0 = s1 + -1272
	s4 = fn000000000001654C(ra, gp)
	s2 = (word64) Mem0[sp + 216:int32]
// DataOut: gp ra s1 s3 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:0x0000000000012000 s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015690:
	s2 = PHI(s2, s2)
	a3 = Mem0[sp + 88:word64]
	a1 = 0x0000000000012000
	a4 = s2
	a2 = s3 + -1248
	a1 = 0x0000000000011B38
	a0 = s1 + -1272
	s4 = fn000000000001654C(ra, gp)
	a3 = Mem0[sp + 104:word64]
	a4 = (word64) Mem0[sp + 216:int32]
	a2 = 0x0000000000012000
	a1 = 0x0000000000012000
	a2 = 0x0000000000011B48
	a1 = 0x0000000000011B58
	a0 = s1 + -1272
	s4 = fn000000000001654C(ra, gp)
	a3 = Mem0[sp + 96:word64]
	branch a3 == 0x0000000000000000 l00000000000156EC
// DataOut: gp ra s0 s1 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000156D4:
	s2 = 0x0000000000012000
	a1 = 0x0000000000012000
	a2 = 0x0000000000011C60
	a1 = 0x0000000000011B68
	a0 = s1 + -1272
	s4 = fn000000000001654C(ra, gp)
// DataOut: gp ra s0 s1 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000156EC:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	s4 = PHI(s4, s4)
	s2 = PHI(s2, s2)
	a5 = 0x0000000000010000
	a5 = 65544
	s0 = s0 & 65544
	branch s0 == 65544 l0000000000015C1C
// DataOut: gp ra s1 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015C1C:
	a3 = Mem0[sp + 80:word64]
	branch a3 == 0x0000000000000000 l00000000000156FC
// DataOut: gp ra s1 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:65544 s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015C24:
	s0 = 0
	s2 = 0x0000000000012000
// DataOut: gp ra s1 s2
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:65544 s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015C2C:
	a3 = PHI(a3, a3)
	a4 = PHI(a4, a4)
	s3 = PHI(s3, s3)
	s2 = PHI(s2, s2)
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	a5 = PHI(a5, a5)
	a1 = 0x0000000000012000
	a2 = s2 + -928
	a1 = 0x0000000000011B78
	a0 = s1 + -1272
	s4 = fn000000000001654C(ra, gp)
	branch s0 != 0x0000000000000000 l00000000000158C8
// DataOut: gp ra s1 s2 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:65544 s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000158C8:
	a2 = PHI(a2, a2, a2)
	a4 = PHI(a4, a4, a4)
	a1 = PHI(a1, a1, a1)
	a0 = PHI(a0, a0, a0)
	s4 = PHI(s4, s4, s4)
	s3 = PHI(s3, s3, s3)
	s2 = PHI(s2, s2, s2)
	s0 = PHI(s0, s0, s0)
	s1 = PHI(s1, s1, s1)
	a5 = PHI(a5, a5, a5)
	a3 = Mem0[sp + 240:word64]
	branch a3 == 0x0000000000000000 l00000000000158E8
// DataOut: gp ra s2 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000158D0:
	a1 = 0x0000000000012000
	a0 = 0x0000000000012000
	a2 = s2 + -928
	a1 = 0x0000000000011B88
	a0 = 0x0000000000011B98
	s4 = fn000000000001654C(ra, gp)
// DataOut: gp ra s2 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000158E8:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	s4 = PHI(s4, s4)
	a3 = Mem0[sp + 248:word64]
	branch a3 == 0x0000000000000000 l00000000000157BC
// DataOut: gp ra s2 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000158F0:
	a1 = 0x0000000000012000
	a0 = 0x0000000000012000
	a2 = s2 + -928
	a1 = 0x0000000000011BA0
	a0 = 0x0000000000011B98
	s4 = fn000000000001654C(ra, gp)
// DataOut: gp ra sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015C44:
// DataOut: gp ra s1 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000156FC:
	a2 = PHI(a2, a2, a2)
	a4 = PHI(a4, a4, a4)
	a1 = PHI(a1, a1, a1)
	s4 = PHI(s4, s4, s4)
	s3 = PHI(s3, s3, s3)
	s2 = PHI(s2, s2, s2)
	s0 = PHI(s0, s0, s0)
	s1 = PHI(s1, s1, s1)
	a5 = PHI(a5, a5, a5)
	a0 = 10
	putchar()
	a3 = Mem0[sp + 240:word64]
	branch a3 == 0x0000000000000000 l0000000000015728
// DataOut: gp ra s1 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001570C:
	a2 = 0x0000000000012000
	a1 = 0x0000000000012000
	a0 = 0x0000000000012000
	a2 = 0x0000000000011C60
	a1 = 0x0000000000011B88
	a0 = 0x0000000000011B98
	s4 = fn000000000001654C(ra, gp)
// DataOut: gp ra s1 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:10 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015728:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	s4 = PHI(s4, s4)
	a3 = Mem0[sp + 248:word64]
	branch a3 == 0x0000000000000000 l000000000001574C
// DataOut: gp ra s1 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015730:
	a2 = 0x0000000000012000
	a1 = 0x0000000000012000
	a0 = 0x0000000000012000
	a2 = 0x0000000000011C60
	a1 = 0x0000000000011BA0
	a0 = 0x0000000000011B98
	s4 = fn000000000001654C(ra, gp)
// DataOut: gp ra s1 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001574C:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	s4 = PHI(s4, s4)
	a3 = Mem0[sp + 224:word64]
	branch a3 == 0x0000000000000000 l000000000001576C
// DataOut: gp ra s1 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015754:
	a2 = 0x0000000000012000
	a1 = 0x0000000000012000
	a2 = 0x0000000000011C60
	a1 = 0x0000000000011BB0
	a0 = s1 + -1272
	s4 = fn000000000001654C(ra, gp)
// DataOut: gp ra s1 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001576C:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	s4 = PHI(s4, s4)
	a3 = Mem0[sp + 232:word64]
	branch a3 == 0x0000000000000000 l000000000001578C
// DataOut: gp ra s1 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015774:
	a2 = 0x0000000000012000
	a1 = 0x0000000000012000
	a2 = 0x0000000000011C60
	a1 = 0x0000000000011BC0
	a0 = s1 + -1272
	s4 = fn000000000001654C(ra, gp)
// DataOut: gp ra s1 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001578C:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	s4 = PHI(s4, s4)
	a5 = (word64) Mem0[sp + 28:int32]
	branch a5 == 0x0000000000000000 l00000000000157A0
// DataOut: gp ra s1 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015794:
	a5 = (word64) Mem0[sp + 216:int32]
	a4 = 111
	branch a4 >=u a5 l0000000000015E3C
// DataOut: a5 gp ra s1 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015E3C:
	a3 = 128
	a2 = 0x0000000000012000
	a1 = 0x0000000000012000
	a4 = sp + 152
	a3 = (int64) (a3 - a5)
	a2 = 0x0000000000011BD0
	a1 = 0x0000000000011BE0
	a0 = s1 + -1272
	s4 = fn000000000001654C(ra, gp)
// DataOut: gp ra sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:111 a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000157A0:
	a4 = PHI(a4, a4)
	a5 = PHI(a5, a5)
	a2 = 0x0000000000012000
	a1 = 0x0000000000012000
	a3 = sp + 152
	a2 = 0x0000000000011C60
	a1 = 0x0000000000011BE0
	a0 = s1 + -1272
	s4 = fn000000000001654C(ra, gp)
// DataOut: gp ra sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000157BC:
	a2 = PHI(a2, a2, a2, a2)
	a3 = PHI(a3, a3, a3, a3)
	a4 = PHI(a4, a4, a4, a4)
	a1 = PHI(a1, a1, a1, a1)
	a0 = PHI(a0, a0, a0, a0)
	s4 = PHI(s4, s4, s4, s4)
	s3 = PHI(s3, s3, s3, s3)
	s2 = PHI(s2, s2, s2, s2)
	s0 = PHI(s0, s0, s0, s0)
	s1 = PHI(s1, s1, s1, s1)
	a5 = Mem0[sp + 120:word64]
	branch a5 == 0x0000000000000000 l0000000000015C08
// DataOut: gp ra sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015C08:
	a5 = Mem0[sp + 136:word64]
	branch a5 != 0x0000000000000000 l00000000000157C4
// DataOut: gp ra sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015C10:
	a5 = Mem0[sp + 144:word64]
	branch a5 != 0x0000000000000000 l00000000000157C4
// DataOut: gp ra sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015C18:
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000157C4:
	a5 = PHI(a5, a5, a5)
	a0 = 10
	putchar()
	a3 = Mem0[sp + 128:word64]
	branch a3 == 0x0000000000000000 l00000000000157F0
// DataOut: gp ra sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000157D4:
	a2 = 0x0000000000012000
	a1 = 0x0000000000012000
	a0 = 0x0000000000012000
	a2 = 0x0000000000011C60
	a1 = 0x0000000000011BF0
	a0 = 0x0000000000011B98
	s4 = fn000000000001654C(ra, gp)
// DataOut: gp ra sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:10 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000157F0:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	s4 = PHI(s4, s4)
	a3 = Mem0[sp + 120:word64]
	branch a3 == 0x0000000000000000 l0000000000015814
// DataOut: gp ra sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000157F8:
	a2 = 0x0000000000012000
	a1 = 0x0000000000012000
	a0 = 0x0000000000012000
	a2 = 0x0000000000011C60
	a1 = 0x0000000000011C00
	a0 = 0x0000000000011B98
	s4 = fn000000000001654C(ra, gp)
// DataOut: gp ra sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015814:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	s4 = PHI(s4, s4)
	a3 = Mem0[sp + 136:word64]
	branch a3 == 0x0000000000000000 l0000000000015838
// DataOut: gp ra sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001581C:
	a2 = 0x0000000000012000
	a1 = 0x0000000000012000
	a0 = 0x0000000000012000
	a2 = 0x0000000000011C60
	a1 = 0x0000000000011C10
	a0 = 0x0000000000011B98
	s4 = fn000000000001654C(ra, gp)
// DataOut: gp ra sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015838:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	s4 = PHI(s4, s4)
	a3 = Mem0[sp + 144:word64]
	branch a3 == 0x0000000000000000 l00000000000153DC
// DataOut: gp ra sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015840:
	a2 = 0x0000000000012000
	a1 = 0x0000000000012000
	a0 = 0x0000000000012000
	a2 = 0x0000000000011C60
	a1 = 0x0000000000011C18
	a0 = 0x0000000000011B98
	s4 = fn000000000001654C(ra, gp)
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000153D0:
	a5 = (word64) Mem0[gp + -2028:int32]
	branch a5 == 0x0000000000000000 l000000000001556C
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001556C:
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000012000
	a2 = 37
	a1 = 1
	a0 = 0x0000000000011A08
	fwrite()
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:(word64) Mem0[gp + -2028:int32] s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:<invalid> s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> -448(fp):0x0000000000000000 -440(fp):a0 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001538C:
	a5 = (word64) Mem0[gp + -2028:int32]
	branch a5 != 0x0000000000000000 l00000000000153D8
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:0 s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:(word64) (int32) 0x0000000000000000 a3:<invalid> a2:0x00000000000119A8 a1:<invalid> a0:a0 t3:<invalid> t1:<invalid> -448(fp):0x0000000000000000 -440(fp):65544 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -01C0(64)

l00000000000153D8:
	qwLoc01B8 = PHI(qwLoc01B8, qwLoc01B8, qwLoc01B8, qwLoc01B8, qwLoc01B8, qwLoc01B8, qwLoc01B8, qwLoc01B8, qwLoc01B8, qwLoc01B8, qwLoc01B8)
	qwLoc01C0 = PHI(qwLoc01C0, qwLoc01C0, qwLoc01C0, qwLoc01C0, qwLoc01C0, qwLoc01C0, qwLoc01C0, qwLoc01C0, qwLoc01C0, qwLoc01C0, qwLoc01C0)
	a2 = PHI(a2, a2, a2, a2, a2, a2, a2, a2, a2, a2, a2)
	a3 = PHI(a3, a3, a3, a3, a3, a3, a3, a3, a3, a3, a3)
	a4 = PHI(a4, a4, a4, a4, a4, a4, a4, a4, a4, a4, a4)
	a1 = PHI(a1, a1, a1, a1, a1, a1, a1, a1, a1, a1, a1)
	a0 = PHI(a0, a0, a0, a0, a0, a0, a0, a0, a0, a0, a0)
	ra = PHI(ra, ra, ra, ra, ra, ra, ra, ra, ra, ra, ra)
	s4 = PHI(s4, s4, s4, s4, s4, s4, s4, s4, s4, s4, s4)
	s2 = PHI(s2, s2, s2, s2, s2, s2, s2, s2, s2, s2, s2)
	s0 = PHI(s0, s0, s0, s0, s0, s0, s0, s0, s0, s0, s0)
	s1 = PHI(s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1)
	a5 = PHI(a5, a5, a5, a5, a5, a5, a5, a5, a5, a5, a5)
	sp = PHI(sp, sp, sp, sp, sp, sp, sp, sp, sp, sp, sp)
	s6 = 1
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):<invalid> -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015394:
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000012000
	a2 = 46
	a1 = 1
	a0 = 0x00000000000119D8
	fwrite()
	s6 = (word64) dwLoc01C0
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:(word64) Mem0[gp + -2028:int32] s1:<invalid> s8:0x0000000000001000 s3:a0 s2:<invalid> s0:0 s6:0 s9:0 s10:0 s4:<invalid> s7:1 a4:(word64) (int32) 0x0000000000000000 a3:<invalid> a2:0x00000000000119A8 a1:<invalid> a0:a0 t3:<invalid> t1:<invalid> -448(fp):0x0000000000000000 -440(fp):65544 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000153DC:
	qwLoc01B8 = PHI(qwLoc01B8, qwLoc01B8, qwLoc01B8, qwLoc01B8, qwLoc01B8, qwLoc01B8, qwLoc01B8, qwLoc01B8, qwLoc01B8, qwLoc01B8, qwLoc01B8, qwLoc01B8, qwLoc01B8)
	qwLoc01C0 = PHI(qwLoc01C0, qwLoc01C0, qwLoc01C0, qwLoc01C0, qwLoc01C0, qwLoc01C0, qwLoc01C0, qwLoc01C0, qwLoc01C0, qwLoc01C0, qwLoc01C0, qwLoc01C0, qwLoc01C0)
	a2 = PHI(a2, a2, a2, a2, a2, a2, a2, a2, a2, a2, a2, a2, a2)
	a3 = PHI(a3, a3, a3, a3, a3, a3, a3, a3, a3, a3, a3, a3, a3)
	a1 = PHI(a1, a1, a1, a1, a1, a1, a1, a1, a1, a1, a1, a1, a1)
	ra = PHI(ra, ra, ra, ra, ra, ra, ra, ra, ra, ra, ra, ra, ra)
	s6 = PHI(s6, s6, s6, s6, s6, s6, s6, s6, s6, s6, s6, s6, s6)
	s4 = PHI(s4, s4, s4, s4, s4, s4, s4, s4, s4, s4, s4, s4, s4)
	s3 = PHI(s3, s3, s3, s3, s3, s3, s3, s3, s3, s3, s3, s3, s3)
	s2 = PHI(s2, s2, s2, s2, s2, s2, s2, s2, s2, s2, s2, s2, s2)
	s0 = PHI(s0, s0, s0, s0, s0, s0, s0, s0, s0, s0, s0, s0, s0)
	s1 = PHI(s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1)
	sp = PHI(sp, sp, sp, sp, sp, sp, sp, sp, sp, sp, sp, sp, sp)
	a4 = Mem0[sp + 328:word64]
	a5 = Mem0[gp + -1936:word64]
	a0 = s6
	branch a4 != a5 l0000000000015E8C
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):<invalid> -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015E8C:
	__stack_chk_fail()
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):<invalid> -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015E90:
	qwLoc01B8 = PHI(qwLoc01B8, qwLoc01B8)
	qwLoc01C0 = PHI(qwLoc01C0, qwLoc01C0)
	a2 = PHI(a2, a2)
	a3 = PHI(a3, a3)
	a4 = PHI(a4, a4)
	ra = PHI(ra, ra)
	s6 = PHI(s6, s6)
	s4 = PHI(s4, s4)
	s3 = PHI(s3, s3)
	s2 = PHI(s2, s2)
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	a5 = PHI(a5, a5)
	sp = PHI(sp, sp)
	a1 = 0x0000000000012000
	a1 = 0x0000000000011D18
	a0 = 1
	__printf_chk()
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):<invalid> -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015B24:
	qwLoc01B8 = PHI(qwLoc01B8, qwLoc01B8, qwLoc01B8)
	qwLoc01C0 = PHI(qwLoc01C0, qwLoc01C0, qwLoc01C0)
	a2 = PHI(a2, a2, a2)
	a3 = PHI(a3, a3, a3)
	a4 = PHI(a4, a4, a4)
	a1 = PHI(a1, a1, a1)
	a0 = PHI(a0, a0, a0)
	ra = PHI(ra, ra, ra)
	s6 = PHI(s6, s6, s6)
	s4 = PHI(s4, s4, s4)
	s3 = PHI(s3, s3, s3)
	s2 = PHI(s2, s2, s2)
	s1 = PHI(s1, s1, s1)
	a5 = PHI(a5, a5, a5)
	sp = PHI(sp, sp, sp)
	s0 = Mem0[sp + 136:word64]
	branch s0 == 0x0000000000000000 l0000000000015B50
// DataOut: gp s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):<invalid> -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015B2C:
	a1 = 32
	a0 = s0
	strchr()
	a2 = s0
	branch a0 == 0x0000000000000000 l0000000000015EA4
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):<invalid> -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015EA4:
	a1 = 0x0000000000012000
	a1 = 0x0000000000011D38
	a0 = 1
	__printf_chk()
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:32 a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):<invalid> -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015B40:
	a1 = 0x0000000000012000
	a1 = 0x0000000000011D28
	a0 = 1
	__printf_chk()
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:32 a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):<invalid> -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015B50:
	a1 = PHI(a1, a1, a1)
	a0 = PHI(a0, a0, a0)
	a2 = Mem0[sp + 144:word64]
	branch a2 == 0x0000000000000000 l00000000000153DC
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):<invalid> -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015B58:
	a1 = 0x0000000000012000
	a1 = 0x0000000000011D48
	a0 = 1
	__printf_chk()
// DataOut: gp sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:1 t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):<invalid> -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000153EC:
	ra = Mem0[sp + 440:word64]
	s0 = Mem0[sp + 432:word64]
	s1 = Mem0[sp + 424:word64]
	s2 = Mem0[sp + 416:word64]
	s3 = Mem0[sp + 408:word64]
	s4 = Mem0[sp + 400:word64]
	s5 = Mem0[sp + 392:word64]
	s6 = Mem0[sp + 384:word64]
	s7 = Mem0[sp + 376:word64]
	s8 = Mem0[sp + 368:word64]
	s9 = Mem0[sp + 360:word64]
	s10 = Mem0[sp + 352:word64]
	s11 = Mem0[sp + 344:word64]
	sp = sp + 448
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:0 s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a6:<invalid> ra:<invalid> s5:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):<invalid> -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000015224:
	a4 = 118
	branch a4 <u a0 l0000000000015200
// DataOut: a5 gp ra s0 s10 s2 s3 s6 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:0x00000000000108E0 s8:0x0000000000001000 s3:a0 s2:a1 s0:0 s6:0 s9:0 s10:0 s4:0x0000000000012000 s7:1 a4:-1 a3:0x00000000000108E0 a2:0x00000000000119A8 a1:a1 a0:a0 t3:<invalid> t1:<invalid> -448(fp):0x0000000000000000 -440(fp):65544 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -01A4(64) Local -01C0(64)

l000000000001522C:
	a5 = a5 << 0x00000000
	a4 = 0x0000000000010000
	a5 = a5 >>u 0x0000001E
	a4 = 0x00000000000102A0
	a5 = a5 + 0x00000000000102A0
	a5 = (word64) Mem0[a5:int32]
	call a5 (retsize: 0; depth: 448)
		defs: a0,a1,a2,a3,a4,a5,gp,ra,s0,s1,s10,s11,s2,s3,s4,s5,s6,s7,s8,s9,sp
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a0 s1:0x00000000000108E0 s8:0x0000000000001000 s3:a0 s2:a1 s0:0 s6:0 s9:0 s10:0 s4:0x0000000000012000 s7:1 a4:118 a3:0x00000000000108E0 a2:0x00000000000119A8 a1:a1 a0:a0 t3:<invalid> t1:<invalid> -448(fp):0x0000000000000000 -440(fp):65544 -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

fn0000000000015180_exit:
	qwLoc01B8 = PHI(qwLoc01B8, qwLoc01B8)
	qwLoc01C0 = PHI(qwLoc01C0, qwLoc01C0)
	a2 = PHI(a2, a2)
	a3 = PHI(a3, a3)
	a4 = PHI(a4, a4)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	ra = PHI(ra, ra)
	s11 = PHI(s11, s11)
	s10 = PHI(s10, s10)
	s9 = PHI(s9, s9)
	s8 = PHI(s8, s8)
	s7 = PHI(s7, s7)
	s6 = PHI(s6, s6)
	s4 = PHI(s4, s4)
	s3 = PHI(s3, s3)
	s2 = PHI(s2, s2)
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	gp = PHI(gp, gp)
	a5 = PHI(a5, a5)
	s5 = PHI(s5, s5)
	sp = PHI(sp, sp)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> s8:<invalid> s3:<invalid> s2:<invalid> s0:<invalid> s6:<invalid> s9:<invalid> s10:<invalid> s4:<invalid> s7:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s5:<invalid> s11:<invalid> a6:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -448(fp):<invalid> -440(fp):<invalid> -420(fp):0x0000000000000000 -120(fp):<invalid> -104(fp):s11 -96(fp):s10 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra



void fn0000000000015EB8(word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 gp sp t1 t3
// Preserved:
fn0000000000015EB8_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l0000000000015EB8:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000000000150E0:
	word64 t3_19 = Mem0[0x000000000001A0F0:word64]
	word64 sp_21
	word64 gp_22
	word64 a5_23
	word64 a0_24
	word64 a1_25
	word64 a2_26
	word64 a3_27
	word64 a4_28
	word64 a6_29
	word64 t3_30
	word64 t1_31
	call t3_19 (retsize: 0; depth: 16)
		uses: a0_7,a1_9,a2_10,a3_13,a4_15,a5_5,a6_16,gp_3,sp_11,t1_20,t3_19
		defs: a0_24,a1_25,a2_26,a3_27,a4_28,a5_23,a6_29,gp_22,sp_21,t1_31,t3_30
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp & -16 gp:0000000000013448 a5:a0 a0:0000000000015180 a1:<invalid> a2:fp + 8 a3:00000000000182E8 a4:0000000000018378 a6:fp & -16

fn0000000000015EB8_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp & -16 gp:0000000000013448 a5:a0 a0:0000000000015180 a1:<invalid> a2:fp + 8 a3:00000000000182E8 a4:0000000000018378 a6:fp & -16 t3:<invalid> t1:00000000000150EC



void fn0000000000015EF0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: a0 a4 a5 t1
// Preserved: sp
fn0000000000015EF0_entry:
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015EF0:
	word64 a4_7 = 14
	branch a4_7 >=u 0x0000000000000007 l0000000000015F20
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015F0C:
	branch 0x0000000000000000 == 0x0000000000000000 l0000000000015F20
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:fp a0:0x0000000000010000 a5:0x0000000000000007 a4:14

l0000000000015F20:
	return
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:fp a0:0x0000000000010000 a5:0x0000000000000007 a4:14 t1:0x0000000000000000

l0000000000015F18:
	word64 sp_20
	word64 a0_21
	word64 a5_22
	word64 a4_23
	word64 t1_24
	word64 ra_25
	call 0x0000000000000000 (retsize: 0;)
		uses: a0_19,a4_7,a5_6,ra,sp_1,t1_18
		defs: a0_21,a4_23,a5_22,ra_25,sp_20,t1_24
	return
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:fp a0:0x0000000000010000 a5:0x0000000000000007 a4:14 t1:0x0000000000000000

fn0000000000015EF0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp a0:<invalid> a5:0x0000000000000007 a4:14 t1:0x0000000000000000



void fn0000000000015F24()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: a0 a1 a5 t1
// Preserved: sp
fn0000000000015F24_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015F24:
	branch 0x0000000000000000 == 0x0000000000000000 l0000000000015F60
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015F4C:
	branch 0x0000000000000000 == 0x0000000000000000 l0000000000015F60
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp a0:0x0000000000010000 a5:0x0000000000000000 a1:0x0000000000000000

l0000000000015F60:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp a0:0x0000000000010000 a5:0x0000000000000000 a1:0x0000000000000000 t1:0x0000000000000000

l0000000000015F58:
	word64 sp_23
	word64 a0_24
	word64 a5_25
	word64 a1_26
	word64 t1_27
	word64 ra_28
	call 0x0000000000000000 (retsize: 0;)
		uses: a0_22,a1_10,a5_7,ra,sp_1,t1_21
		defs: a0_24,a1_26,a5_25,ra_28,sp_23,t1_27
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp a0:0x0000000000010000 a5:0x0000000000000000 a1:0x0000000000000000 t1:0x0000000000000000

fn0000000000015F24_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp a0:<invalid> a5:0x0000000000000000 a1:0x0000000000000000 t1:0x0000000000000000



void fn0000000000015F64(word64 gp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  gp
// LiveOut:
// Trashed: a0 a4 a5 t1
// Preserved: ra s0 sp
fn0000000000015F64_entry:
	def fp
	def s0
	def gp
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l0000000000015F64:
	sp_1 = fp
	sp_2 = fp + -16
	qwLoc10_4 = s0
	a5 = (word64) Mem0[-1900:byte]
	qwLoc08 = ra
	branch a5 != 0x0000000000000000 l0000000000015F84
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000015F78:
	fn0000000000015EF0()
	a5 = 1
	Mem0[gp + 2196:byte] = a5
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:(word64) Mem0[gp + -1900:byte] -16(fp):s0 -8(fp):ra

l0000000000015F84:
	a5 = PHI(a5, a5)
	ra = qwLoc08
	s0 = qwLoc10
	sp = fp
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a0:<invalid> a4:14 t1:0x0000000000000000 -16(fp):s0 -8(fp):ra

fn0000000000015F64_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp a5:<invalid> ra:ra s0:s0 a0:<invalid> a4:14 t1:0x0000000000000000 -16(fp):s0 -8(fp):ra



void fn0000000000015F94()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: a0 a1 a5 t1
// Preserved: ra sp
fn0000000000015F94_entry:
	def fp
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l0000000000015F94:
	sp_1 = fp
	a5_2 = 0x000000000001A000
	a0_3 = 0x0000000000019E28
	a5 = Mem0[0x0000000000019E28:word64]
	branch a5 != 0x0000000000000000 l0000000000015FA8
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l0000000000015FA8:
	a5 = 0x0000000000000000
	a5 = 0x0000000000000000
	branch 0x0000000000000000 == 0x0000000000000000 l0000000000015FA4
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp a5:<invalid> a0:0x0000000000019E28
// LocalsOut: fp(64)

l0000000000015FB4:
	sp = fp + -16
	qwLoc08 = ra
	call 0x0000000000000000 (retsize: 0; depth: 16)
		defs: a0,a5,ra,sp
	ra = qwLoc08
	sp = fp
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp a5:0x0000000000000000 a0:0x0000000000019E28

l0000000000015FC8_thunk_fn0000000000015F24:
	fn0000000000015F24()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp a5:0x0000000000000000 a0:0x0000000000019E28 ra:ra -8(fp):ra

l0000000000015FA4:
	a5 = PHI(a5, a5)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp a5:<invalid> a0:0x0000000000019E28

l0000000000015FA4_thunk_fn0000000000015F24:
	fn0000000000015F24()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp a5:<invalid> a0:0x0000000000019E28

l0000000000015FA4_thunk_fn0000000000015F24:
	fn0000000000015F24()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp a5:<invalid> a0:0x0000000000019E28

fn0000000000015F94_exit:
	qwLoc08 = PHI(qwLoc08, qwLoc08, qwLoc08)
	a0 = PHI(a0, a0, a0)
	a5 = PHI(a5, a5, a5)
	ra = PHI(ra, ra, ra)
	sp = PHI(sp, sp, sp)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp a5:0x0000000000000000 a0:<invalid> a1:0x0000000000000000 t1:0x0000000000000000 ra:ra -8(fp):ra



void fn0000000000015FCC(word64 gp, word64 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 gp
// LiveOut:
// Trashed: a0 a1 a2 a3 t1 t3
// Preserved: ra s0 sp
fn0000000000015FCC_entry:
	def fp
	def s0
	def ra
	def gp
// DataOut: a0 gp
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l0000000000015FCC:
	sp_1 = fp
	sp_2 = fp + -16
	qwLoc10_4 = s0
	qwLoc08_6 = ra
	a3 = Mem0[-1920:word64]
	branch a0 != 0x0000000000000000 l0000000000016090
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000016090:
	a0 = 0x0000000000011000
	a2 = 26
	a1 = 1
	a0 = 0x0000000000010BE0
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 54
	a1 = 1
	a0 = 0x0000000000010C00
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 77
	a1 = 1
	a0 = 0x0000000000010C38
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 62
	a1 = 1
	a0 = 0x0000000000010C88
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 79
	a1 = 1
	a0 = 0x0000000000010CC8
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 79
	a1 = 1
	a0 = 0x0000000000010D18
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 42
	a1 = 1
	a0 = 0x0000000000010D68
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 76
	a1 = 1
	a0 = 0x0000000000010D98
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 77
	a1 = 1
	a0 = 0x0000000000010DE8
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 77
	a1 = 1
	a0 = 0x0000000000010E38
	fwrite()
	a1 = Mem0[gp + -1920:word64]
	a0 = 10
	fputc()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 23
	a1 = 1
	a0 = 0x0000000000010E88
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 71
	a1 = 1
	a0 = 0x0000000000010EA0
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 57
	a1 = 1
	a0 = 0x0000000000010EE8
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 58
	a1 = 1
	a0 = 0x0000000000010F28
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 57
	a1 = 1
	a0 = 0x0000000000010F68
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 77
	a1 = 1
	a0 = 0x0000000000010FA8
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 77
	a1 = 1
	a0 = 0x0000000000010FF8
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 77
	a1 = 1
	a0 = 0x0000000000011048
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 46
	a1 = 1
	a0 = 0x0000000000011098
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 72
	a1 = 1
	a0 = 0x00000000000110C8
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 45
	a1 = 1
	a0 = 0x0000000000011118
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 67
	a1 = 1
	a0 = 0x0000000000011148
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 64
	a1 = 1
	a0 = 0x0000000000011190
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 72
	a1 = 1
	a0 = 0x00000000000111D8
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 46
	a1 = 1
	a0 = 0x0000000000011228
	fwrite()
	a1 = Mem0[gp + -1920:word64]
	a0 = 10
	fputc()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 15
	a1 = 1
	a0 = 0x0000000000011258
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 87
	a1 = 1
	a0 = 0x0000000000011268
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 60
	a1 = 1
	a0 = 0x00000000000112C0
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 68
	a1 = 1
	a0 = 0x0000000000011300
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 58
	a1 = 1
	a0 = 0x0000000000011348
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 57
	a1 = 1
	a0 = 0x0000000000011388
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	ra = qwLoc08
	s0 = qwLoc10
	a0 = 0x0000000000011000
	a2 = 62
	a1 = 1
	a0 = 0x00000000000113C8
	sp = fp
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a3:<invalid> -16(fp):s0 -8(fp):ra

l00000000000163AC_thunk_fwrite:
	fwrite()
	return
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:fp a3:<invalid> a0:0x00000000000113C8 a2:62 a1:1 t3:<invalid> t1:<invalid> ra:ra s0:s0 -16(fp):s0 -8(fp):ra

l0000000000015FE0:
	a0 = 0x0000000000011000
	a2 = 77
	a1 = 1
	a0 = 0x0000000000011408
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 62
	a1 = 1
	a0 = 0x0000000000011458
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 65
	a1 = 1
	a0 = 0x0000000000011498
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 76
	a1 = 1
	a0 = 0x00000000000114E0
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 65
	a1 = 1
	a0 = 0x0000000000011530
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 41
	a1 = 1
	a0 = 0x0000000000011578
	fwrite()
	a3 = Mem0[gp + -1920:word64]
	ra = qwLoc08
	s0 = qwLoc10
	a0 = 0x0000000000011000
	a2 = 30
	a1 = 1
	a0 = 0x00000000000115A8
	sp = fp
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a3:<invalid> -16(fp):s0 -8(fp):ra

l000000000001608C_thunk_fwrite:
	fwrite()
	return
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:fp a3:<invalid> a0:0x00000000000115A8 a2:30 a1:1 t3:<invalid> t1:<invalid> ra:ra s0:s0 -16(fp):s0 -8(fp):ra

fn0000000000015FCC_exit:
	a3 = PHI(a3, a3)
	ra = PHI(ra, ra)
	s0 = PHI(s0, s0)
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	sp = PHI(sp, sp)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp a3:<invalid> a0:<invalid> a2:<invalid> a1:1 t3:<invalid> t1:<invalid> ra:ra s0:s0 -16(fp):s0 -8(fp):ra



word64 fn00000000000163B0(word64 gp, word64 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 gp
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 ra s0 s1 s2 s3 s4 s5 s6 s7 s9 sp t1 t3
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sp
fn00000000000163B0_entry:
	def fp
	def s0
	def s1
	def s2
	def s3
	def s4
	def s5
	def s6
	def s7
	def s8
	def s9
	def ra
	def gp
// DataOut: a0 gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l00000000000163B0:
	sp_1 = fp
	sp_2 = fp + -240
	qwLoc10_4 = s0
	qwLoc18_6 = s1
	qwLoc20_8 = s2
	qwLoc28_10 = s3
	qwLoc30_12 = s4
	qwLoc38_14 = s5
	qwLoc40_16 = s6
	qwLoc48_18 = s7
	qwLoc50_20 = s8
	qwLoc58_22 = s9
	qwLoc08_24 = ra
	a5 = Mem0[-1936:word64]
	a4 = (word64) Mem0[a0:byte]
	s4 = 0x0000000000011000
	s0 = 0
	s2 = a0
	a3 = 0x00000000000115C8
	a2 = 128
	a1 = 1
	a0 = fp + -232
	s3 = 16
	s0 = (int64) ((word32) s0 + 1)
	qwLoc68 = a5
	s2 = s2 + 1
	__sprintf_chk()
	s1 = fp + -230
	s6 = 128
	s5 = 1
	s9 = 15
	s7 = 58
	branch s0 == s3 l000000000001646C
// DataOut: a1 gp s0 s1 s10 s2 s3 s5 s7 s9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64) Local -0068(64)

l0000000000016430:
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	s2 = PHI(s2, s2)
	a4 = (word64) Mem0[s2:byte]
	a3 = 0x00000000000115C8
	a2 = s6
	a1 = s5
	a0 = s1
	__sprintf_chk()
	a5 = s0 & 1
	a4 = s1 + 2
	branch a5 == 0x0000000000000000 l00000000000164B8
// DataOut: a1 a4 gp s0 s1 s10 s2 s3 s5 s7 s9
// DataOut (flags): 
// SymbolicIn: sp:fp + -240 a5:<invalid> a4:<invalid> s4:0x0000000000011000 s0:<invalid> s2:<invalid> a3:0x00000000000115C8 a2:128 a1:1 a0:<invalid> s3:16 s1:<invalid> s6:128 s5:1 s9:15 s7:58 t3:<invalid> t1:<invalid> -228(fp):58 -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0068(64)

l00000000000164B8:
	s1 = a4
	s2 = s2 + 1
// DataOut: a1 gp s0 s1 s10 s2 s3 s5 s7 s9
// DataOut (flags): 
// SymbolicIn: sp:fp + -240 a5:<invalid> a4:<invalid> s4:0x0000000000011000 s0:<invalid> s2:<invalid> a3:0x00000000000115C8 a2:128 a1:1 a0:<invalid> s3:16 s1:<invalid> s6:128 s5:1 s9:15 s7:58 t3:<invalid> t1:<invalid> -228(fp):58 -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0068(64)

l0000000000016454:
	branch s0 == s9 l00000000000164C4
// DataOut: a1 a4 gp s0 s1 s10 s2 s3 s5 s7 s9
// DataOut (flags): 
// SymbolicIn: sp:fp + -240 a5:<invalid> a4:<invalid> s4:0x0000000000011000 s0:<invalid> s2:<invalid> a3:0x00000000000115C8 a2:128 a1:1 a0:<invalid> s3:16 s1:<invalid> s6:128 s5:1 s9:15 s7:58 t3:<invalid> t1:<invalid> -228(fp):58 -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0068(64)

l00000000000164C4:
	s1 = a4
// DataOut: a1 gp s1 s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -240 a5:<invalid> a4:<invalid> s4:0x0000000000011000 s0:<invalid> s2:<invalid> a3:0x00000000000115C8 a2:128 a1:1 a0:<invalid> s3:16 s1:<invalid> s6:128 s5:1 s9:15 s7:58 t3:<invalid> t1:<invalid> -228(fp):58 -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0068(64)

l0000000000016458:
	Mem0[s1 + 2:byte] = s7
	s2 = s2 + 1
	s1 = s1 + 3
// DataOut: a1 gp s0 s1 s10 s2 s3 s5 s7 s9
// DataOut (flags): 
// SymbolicIn: sp:fp + -240 a5:<invalid> a4:<invalid> s4:0x0000000000011000 s0:<invalid> s2:<invalid> a3:0x00000000000115C8 a2:128 a1:1 a0:<invalid> s3:16 s1:<invalid> s6:128 s5:1 s9:15 s7:58 t3:<invalid> t1:<invalid> -228(fp):58 -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0068(64)

l0000000000016464:
	s1 = PHI(s1, s1)
	s2 = PHI(s2, s2)
	s0 = (int64) ((word32) s0 + 1)
	branch s0 != s3 l0000000000016430
// DataOut: a1 gp s0 s1 s10 s2 s3 s5 s7 s9
// DataOut (flags): 
// SymbolicIn: sp:fp + -240 a5:<invalid> a4:<invalid> s4:0x0000000000011000 s0:<invalid> s2:<invalid> a3:0x00000000000115C8 a2:128 a1:1 a0:<invalid> s3:16 s1:<invalid> s6:128 s5:1 s9:15 s7:58 t3:<invalid> t1:<invalid> -228(fp):58 -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0068(64)

l000000000001646C:
	a3 = PHI(a3, a3, a3)
	a2 = PHI(a2, a2, a2)
	a1 = PHI(a1, a1, a1)
	s0 = PHI(s0, s0, s0)
	s1 = PHI(s1, s1, s1)
	s2 = PHI(s2, s2, s2)
	Mem0[s1:byte] = 0x0000000000000000
	a0 = fp + -232
	__strdup()
	a4 = qwLoc68
	a5 = Mem0[gp + -1936:word64]
	branch a4 != a5 l00000000000164CC
// DataOut: a0 a1 gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -240 a5:<invalid> a4:<invalid> s4:0x0000000000011000 s0:<invalid> s2:<invalid> a3:0x00000000000115C8 a2:128 a1:1 a0:<invalid> s3:16 s1:<invalid> s6:128 s5:1 s9:15 s7:58 t3:<invalid> t1:<invalid> -228(fp):58 -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64)

l00000000000164CC:
	__stack_chk_fail()
	sp = fp + -272
	qwLoc0100 = s0
	s0 = fp + -232
	a0 = 0x0000000000011000
	qwLoc0110 = s2
	a0 = 0x00000000000115D0
	s2 = a1
	a1 = 0
	qwLocF8 = ra
	qwLoc0108 = s1
	open()
	branch false l0000000000016544
// DataOut: a0 gp s10 s2
// DataOut (flags): 
// SymbolicIn: sp:fp + -240 a5:<invalid> a4:<invalid> s4:0x0000000000011000 s0:<invalid> s2:<invalid> a3:0x00000000000115C8 a2:128 a1:1 a0:fp + -232 s3:16 s1:<invalid> s6:128 s5:1 s9:15 s7:58 t3:<invalid> t1:<invalid> -230(fp):0x0000000000000000 -228(fp):58 -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000164FC_thunk_fn0000000000016544:
	ra = fn0000000000016544(out sp, out s0, out s1, out a0, out s2)
	return a0
// DataOut: a0 gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -272 a5:<invalid> a4:<invalid> s4:0x0000000000011000 s0:fp + -232 s2:1 a3:0x00000000000115C8 a2:128 a1:0 a0:0x00000000000115D0 s3:16 s1:<invalid> s6:128 s5:1 s9:15 s7:58 t3:<invalid> t1:<invalid> -272(fp):<invalid> -264(fp):<invalid> -256(fp):<invalid> -248(fp):ra -230(fp):0x0000000000000000 -228(fp):58 -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000164FC_thunk_fn0000000000016500:
	ra = fn0000000000016500(a0, s2, out sp, out s0, out s1, out a0, out s2)
	return a0
// DataOut: a0 gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -272 a5:<invalid> a4:<invalid> s4:0x0000000000011000 s0:fp + -232 s2:1 a3:0x00000000000115C8 a2:128 a1:0 a0:0x00000000000115D0 s3:16 s1:<invalid> s6:128 s5:1 s9:15 s7:58 t3:<invalid> t1:<invalid> -272(fp):<invalid> -264(fp):<invalid> -256(fp):<invalid> -248(fp):ra -230(fp):0x0000000000000000 -228(fp):58 -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016484:
	ra = qwLoc08
	s0 = qwLoc10
	s1 = qwLoc18
	s2 = qwLoc20
	s3 = qwLoc28
	s4 = qwLoc30
	s5 = qwLoc38
	s6 = qwLoc40
	s7 = qwLoc48
	s8 = qwLoc50
	s9 = qwLoc58
	sp = fp
	return a0
// DataOut: a0 gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -240 a5:<invalid> a4:<invalid> s4:0x0000000000011000 s0:<invalid> s2:<invalid> a3:0x00000000000115C8 a2:128 a1:1 a0:fp + -232 s3:16 s1:<invalid> s6:128 s5:1 s9:15 s7:58 t3:<invalid> t1:<invalid> -230(fp):0x0000000000000000 -228(fp):58 -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

fn00000000000163B0_exit:
	qwLoc0100 = PHI(qwLoc0100, qwLoc0100, qwLoc0100)
	qwLoc0110 = PHI(qwLoc0110, qwLoc0110, qwLoc0110)
	a1 = PHI(a1, a1, a1)
	qwLocF8 = PHI(qwLocF8, qwLocF8, qwLocF8)
	qwLoc0108 = PHI(qwLoc0108, qwLoc0108, qwLoc0108)
	a0 = PHI(a0, a0, a0)
	ra = PHI(ra, ra, ra)
	s0 = PHI(s0, s0, s0)
	s1 = PHI(s1, s1, s1)
	s2 = PHI(s2, s2, s2)
	s3 = PHI(s3, s3, s3)
	s4 = PHI(s4, s4, s4)
	s5 = PHI(s5, s5, s5)
	s6 = PHI(s6, s6, s6)
	s7 = PHI(s7, s7, s7)
	s8 = PHI(s8, s8, s8)
	s9 = PHI(s9, s9, s9)
	sp = PHI(sp, sp, sp)
// DataOut: a0
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> a4:<invalid> s4:<invalid> s0:<invalid> s2:<invalid> a3:0x00000000000115C8 a2:<invalid> a1:<invalid> a0:<invalid> s3:<invalid> s1:<invalid> s6:<invalid> s5:<invalid> s9:<invalid> s7:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s8:s8 -272(fp):<invalid> -264(fp):<invalid> -256(fp):<invalid> -248(fp):ra -230(fp):0x0000000000000000 -228(fp):58 -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra



word64 fn00000000000164D0(word64 a1, ptr64 & spOut, ptr64 & s0Out, ptr64 & s1Out, ptr64 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1
// LiveOut: a0 ra s0 s1 sp
// Trashed: a0 a1 a2 ra s0 s1 s2 sp t1 t3
// Preserved:
fn00000000000164D0_entry:
// DataOut: a1 gp s10 s4
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l00000000000164D0:
	open()
	branch false l00000000000164FC_thunk_fn0000000000016544
// DataOut: a0 gp s10 s2 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000000000164FC_thunk_fn0000000000016544:
	word64 sp_40
	word64 s0_41
	word64 s1_42
	word64 a0_43
	word64 s2_44
	return fn0000000000016544(out sp_40, out s0_41, out s1_42, out a0_43, out s2_44)
// DataOut: a0 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -32 s0:a0 a0:0x00000000000115D0 s2:a1 a1:0 t3:<invalid> t1:<invalid> -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000164FC_thunk_fn0000000000016500:
	word64 sp_28
	word64 s0_29
	word64 s1_30
	word64 a0_31
	word64 s2_32
	return fn0000000000016500(0x00000000000115D0, a1, out sp_28, out s0_29, out s1_30, out a0_31, out s2_32)
// DataOut: a0 gp ra s0 s1 s10 s2 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -32 s0:a0 a0:0x00000000000115D0 s2:a1 a1:0 t3:<invalid> t1:<invalid> -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000164FC_thunk_fn0000000000016500:
	word64 sp_34
	word64 s0_35
	word64 s1_36
	word64 a0_37
	word64 s2_38
	return fn0000000000016500(a0_31, s2_32, out sp_34, out s0_35, out s1_36, out a0_37, out s2_38)
// DataOut: a0 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> s0:<invalid> a0:<invalid> s2:<invalid> a1:<invalid> t3:<invalid> t1:<invalid> a2:<invalid> s1:<invalid> ra:<invalid> -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

fn00000000000164D0_exit:
// DataOut: a0 ra s0 s1 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> s0:<invalid> a0:<invalid> s2:<invalid> a1:<invalid> t3:<invalid> t1:<invalid> a2:<invalid> s1:<invalid> ra:<invalid> -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra



word64 fn0000000000016500(word64 a0, word64 s2, ptr64 & spOut, ptr64 & s0Out, ptr64 & s1Out, ptr64 & a0Out, ptr64 & s2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 s2
// LiveOut: a0 ra s0 s1 s2 sp
// Trashed: a0 a1 a2 ra s0 s1 s2 sp t1 t3
// Preserved:
fn0000000000016500_entry:
// DataOut: a0 gp s10 s2 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000016500:
	read()
	close()
// DataOut: gp s10 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000016528_thunk_fn0000000000016544:
	word64 sp_14
	word64 s0_15
	word64 s1_16
	word64 a0_17
	word64 s2_18
	return fn0000000000016544(out sp_14, out s0_15, out s1_16, out a0_17, out s2_18)
// DataOut: a0 gp ra s0 s1 s10 s2 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 a2:s2 << 0x00000000 >>u 0x00000000 a1:s0 s1:a0 s0:a0 a0:(int64) (0x0000000000000000 - (word64) ((int64) (a0 - s2) != 0x0000000000000000)) t3:<invalid> t1:<invalid>

fn0000000000016500_exit:
// DataOut: a0 ra s0 s1 s2 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a2:s2 << 0x00000000 >>u 0x00000000 a1:s0 s1:<invalid> s0:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s2:<invalid>



word64 fn0000000000016544(ptr64 & spOut, ptr64 & s0Out, ptr64 & s1Out, ptr64 & a0Out, ptr64 & s2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a0 ra s0 s1 s2 sp
// Trashed: a0 ra s0 s1 s2 sp
// Preserved:
fn0000000000016544_entry:
// DataOut: gp s10 s4
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(64)

l0000000000016544:
	word64 a0_2
	*a0Out = -1
// DataOut: a0 gp s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l000000000001652C:
	word64 s0_5
	*s0Out = Mem0[v3 + 16:word64]
	word64 s1_6
	*s1Out = Mem0[v3 + 8:word64]
	word64 s2_7
	*s2Out = Mem0[v3:word64]
	word64 sp_8
	*spOut = v3 + 32
	return Mem0[v3 + 24:word64]
// DataOut: a0 gp ra s0 s1 s10 s2 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 a0:-1

fn0000000000016544_exit:
// DataOut: a0 ra s0 s1 s2 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 + 32 a0:-1 ra:<invalid> s0:<invalid> s1:<invalid> s2:<invalid>



word64 fn000000000001654C(word64 ra, word64 gp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  gp ra
// LiveOut: s4
// Trashed: a0 a1 a2 a3 a4 a5 ra s0 s1 s2 s3 s4 sp t1 t3
// Preserved: ra s0 s1 s2 s3 sp
fn000000000001654C_entry:
	def fp
	def s0
	def gp
// DataOut: gp ra s4
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l000000000001654C:
	sp_1 = fp
	sp_2 = fp + -128
	qwLoc40_4 = s0
	t3 = Mem0[-1936:word64]
	t1 = fp + -40
	qwLoc50 = s2
	qwLoc58 = s3
	s2 = a1
	s3 = a0
	qwLoc28 = a3
	a1 = 1
	a3 = fp + -40
	a0 = fp + -112
	qwLoc38 = ra
	qwLoc48 = s1
	qwLoc20 = a4
	qwLoc18 = a5
	qwLoc10 = a6
	qwLoc08 = a7
	qwLoc68 = t3
	qwLoc70 = 0x0000000000000000
	qwLoc78 = fp + -40
	__vasprintf_chk()
	branch fp + -112 < 0x0000000000000000 l00000000000165D8
// DataOut: a0 a1 gp ra s4
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Local -0068(64)

l00000000000165A8:
	a1 = Mem0[gp + -1912:word64]
	a0 = s2
	fputs()
	a5 = (word64) Mem0[gp + -2032:int32]
	branch a5 != 0x0000000000000000 l000000000001661C
// DataOut: gp ra s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -128 t3:<invalid> t1:<invalid> s2:a1 s3:a0 a1:1 a3:fp + -40 a0:fp + -112 -120(fp):fp + -40 -112(fp):0x0000000000000000 -104(fp):<invalid> -88(fp):s3 -80(fp):s2 -72(fp):s1 -64(fp):s0 -56(fp):ra -40(fp):a3 -32(fp):a4 -24(fp):a5 -16(fp):a6 -8(fp):a7
// LocalsOut: Local -0068(64)

l000000000001661C:
	a1 = Mem0[gp + -1912:word64]
	a0 = s3
	fputs()
// DataOut: gp ra s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -128 t3:<invalid> t1:<invalid> s2:a1 s3:a0 a1:<invalid> a3:fp + -40 a0:a1 a5:(word64) Mem0[gp + -2032:int32] -120(fp):fp + -40 -112(fp):0x0000000000000000 -104(fp):<invalid> -88(fp):s3 -80(fp):s2 -72(fp):s1 -64(fp):s0 -56(fp):ra -40(fp):a3 -32(fp):a4 -24(fp):a5 -16(fp):a6 -8(fp):a7
// LocalsOut: Local -0068(64)

l00000000000165BC:
	a1 = Mem0[gp + -1912:word64]
	a0 = 0x0000000000000000
	fputs()
	a5 = (word64) Mem0[gp + -2032:int32]
	branch a5 != 0x0000000000000000 l0000000000016600
// DataOut: a1 gp ra s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -128 t3:<invalid> t1:<invalid> s2:a1 s3:a0 a1:<invalid> a3:fp + -40 a0:a1 a5:(word64) Mem0[gp + -2032:int32] -120(fp):fp + -40 -112(fp):0x0000000000000000 -104(fp):<invalid> -88(fp):s3 -80(fp):s2 -72(fp):s1 -64(fp):s0 -56(fp):ra -40(fp):a3 -32(fp):a4 -24(fp):a5 -16(fp):a6 -8(fp):a7
// LocalsOut: Local -0068(64)

l0000000000016600:
	a3 = Mem0[gp + -1912:word64]
	a0 = 0x0000000000011000
	a2 = 4
	a1 = 1
	a0 = 0x00000000000115E0
	fwrite()
// DataOut: a1 gp ra s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -128 t3:<invalid> t1:<invalid> s2:a1 s3:a0 a1:<invalid> a3:fp + -40 a0:0x0000000000000000 a5:(word64) Mem0[gp + -2032:int32] -120(fp):fp + -40 -112(fp):0x0000000000000000 -104(fp):<invalid> -88(fp):s3 -80(fp):s2 -72(fp):s1 -64(fp):s0 -56(fp):ra -40(fp):a3 -32(fp):a4 -24(fp):a5 -16(fp):a6 -8(fp):a7
// LocalsOut: Local -0068(64)

l00000000000165D0:
	a3 = PHI(a3, a3)
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = 0x0000000000000000
	free()
// DataOut: a0 a1 gp ra s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -128 t3:<invalid> t1:<invalid> s2:a1 s3:a0 a1:<invalid> a3:<invalid> a0:<invalid> a5:(word64) Mem0[gp + -2032:int32] a2:4 -120(fp):fp + -40 -112(fp):0x0000000000000000 -104(fp):<invalid> -88(fp):s3 -80(fp):s2 -72(fp):s1 -64(fp):s0 -56(fp):ra -40(fp):a3 -32(fp):a4 -24(fp):a5 -16(fp):a6 -8(fp):a7
// LocalsOut: Local -0068(64)

l00000000000165D8:
	a3 = PHI(a3, a3)
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	a4 = qwLoc68
	a5 = Mem0[gp + -1936:word64]
	branch a4 != a5 l000000000001662C
// DataOut: a0 a1 gp ra s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -128 t3:<invalid> t1:<invalid> s2:a1 s3:a0 a1:<invalid> a3:<invalid> a0:<invalid> a5:(word64) Mem0[gp + -2032:int32] a2:4 -120(fp):fp + -40 -112(fp):0x0000000000000000 -104(fp):<invalid> -88(fp):s3 -80(fp):s2 -72(fp):s1 -64(fp):s0 -56(fp):ra -40(fp):a3 -32(fp):a4 -24(fp):a5 -16(fp):a6 -8(fp):a7

l000000000001662C:
	__stack_chk_fail()
// DataOut: a0 a1 gp ra
// DataOut (flags): 
// SymbolicIn: sp:fp + -128 t3:<invalid> t1:<invalid> s2:a1 s3:a0 a1:<invalid> a3:<invalid> a0:<invalid> a4:<invalid> a5:<invalid> a2:4 -120(fp):fp + -40 -112(fp):0x0000000000000000 -104(fp):<invalid> -88(fp):s3 -80(fp):s2 -72(fp):s1 -64(fp):s0 -56(fp):ra -40(fp):a3 -32(fp):a4 -24(fp):a5 -16(fp):a6 -8(fp):a7

l000000000001662C_thunk_fn0000000000016630:
	a0 = fn0000000000016630(ra, gp, a0, a1, out a1, out s4)
	return s4
// DataOut: gp s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -128 t3:<invalid> t1:<invalid> s2:a1 s3:a0 a1:<invalid> a3:<invalid> a0:<invalid> a4:<invalid> a5:<invalid> a2:4 -120(fp):fp + -40 -112(fp):0x0000000000000000 -104(fp):<invalid> -88(fp):s3 -80(fp):s2 -72(fp):s1 -64(fp):s0 -56(fp):ra -40(fp):a3 -32(fp):a4 -24(fp):a5 -16(fp):a6 -8(fp):a7

l00000000000165E4:
	ra = qwLoc38
	s0 = qwLoc40
	s1 = qwLoc48
	s2 = qwLoc50
	s3 = qwLoc58
	sp = fp
	return s4
// DataOut: gp s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -128 t3:<invalid> t1:<invalid> s2:a1 s3:a0 a1:<invalid> a3:<invalid> a0:<invalid> a4:<invalid> a5:<invalid> a2:4 -120(fp):fp + -40 -112(fp):0x0000000000000000 -104(fp):<invalid> -88(fp):s3 -80(fp):s2 -72(fp):s1 -64(fp):s0 -56(fp):ra -40(fp):a3 -32(fp):a4 -24(fp):a5 -16(fp):a6 -8(fp):a7

fn000000000001654C_exit:
	a1 = PHI(a1, a1)
	s4 = PHI(s4, s4)
	a0 = PHI(a0, a0)
	ra = PHI(ra, ra)
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	s2 = PHI(s2, s2)
	s3 = PHI(s3, s3)
	sp = PHI(sp, sp)
// DataOut: s4
// DataOut (flags): 
// SymbolicIn: sp:<invalid> t3:<invalid> t1:<invalid> s2:<invalid> s3:<invalid> a1:<invalid> a3:<invalid> a0:<invalid> a4:<invalid> a5:<invalid> ra:<invalid> s0:<invalid> s1:<invalid> a2:<invalid> s4:<invalid> -120(fp):fp + -40 -112(fp):0x0000000000000000 -104(fp):<invalid> -88(fp):s3 -80(fp):s2 -72(fp):s1 -64(fp):s0 -56(fp):ra -40(fp):a3 -32(fp):a4 -24(fp):a5 -16(fp):a6 -8(fp):a7



word64 fn0000000000016630(word64 ra, word64 gp, word64 a0, word64 a1, ptr64 & a1Out, ptr64 & s4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 a1 gp ra
// LiveOut: a0 a1 s4
// Trashed: a0 a1 a2 a3 a4 a5 ra s0 s1 s2 s3 s4 sp t1 t3
// Preserved: ra s0 s1 s2 s3 sp
fn0000000000016630_entry:
	def fp
	def s0
	def gp
// DataOut: a0 a1 gp ra s10 s4
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l0000000000016630:
	sp_1 = fp
	sp_2 = fp + -64
	qwLoc10_4 = s0
	a5 = Mem0[-1936:word64]
	qwLoc08 = ra
	qwLoc18 = s1
	qwLoc38 = a5
	qwLoc20 = s2
	qwLoc28 = s3
	s2 = a0
	s3 = a1
	qwLoc40 = 0x0000000000000000
	__errno_location()
	Mem0[a0:word32] = 0x0000000000000000
	s1 = a0
	a2 = 0
	a1 = fp + -64
	a0 = s2
	strtol()
	a5 = 0x0000000000000000
	branch 0x0000000000000000 == 0x0000000000000000 l000000000001668C
// DataOut: a0 a1 a2 gp ra s1 s10 s2 s3 s4
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Local -0038(64)

l0000000000016680:
	branch s2 == 0x0000000000000000 l000000000001668C
// DataOut: a0 a1 a2 gp ra s1 s10 s3 s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:0x0000000000000000 s2:a0 s3:a1 s1:a0 a2:0 a1:fp + -64 a0:a0 t3:<invalid> t1:<invalid> -64(fp):0x0000000000000000 -56(fp):<invalid> -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l0000000000016684:
	a5 = (word64) Mem0[0x0000000000000000:byte]
	branch a5 == 0x0000000000000000 l00000000000166C4
// DataOut: a0 a1 a2 gp ra s1 s10 s3 s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:0x0000000000000000 s2:a0 s3:a1 s1:a0 a2:0 a1:fp + -64 a0:a0 t3:<invalid> t1:<invalid> -64(fp):0x0000000000000000 -56(fp):<invalid> -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l00000000000166C4:
	a5 = (word64) Mem0[s1:int32]
	branch a5 != 0x0000000000000000 l0000000000016690
// DataOut: a0 a1 a2 a5 gp ra s10 s3 s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:(word64) Mem0[0x0000000000000000:byte] s2:a0 s3:a1 s1:a0 a2:0 a1:fp + -64 a0:a0 t3:<invalid> t1:<invalid> -64(fp):0x0000000000000000 -56(fp):<invalid> -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l00000000000166CC:
	a4 = (int64) (word32) a0
	a3 = a4
	branch a0 != a3 l00000000000166E0
// DataOut: a1 a2 a4 a5 gp ra s10 s3 s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:(word64) Mem0[a0:int32] s2:a0 s3:a1 s1:a0 a2:0 a1:fp + -64 a0:a0 t3:<invalid> t1:<invalid> -64(fp):0x0000000000000000 -56(fp):<invalid> -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l00000000000166E0:
	a5 = -34
// DataOut: a1 a2 a5 gp ra s10 s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:(word64) Mem0[a0:int32] s2:a0 s3:a1 s1:a0 a2:0 a1:fp + -64 a0:a0 a4:(int64) (word32) a0 a3:(int64) (word32) a0 t3:<invalid> t1:<invalid> -64(fp):0x0000000000000000 -56(fp):<invalid> -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l00000000000166D8:
	Mem0[s3:word32] = a4
// DataOut: a1 a2 a5 gp ra s10 s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:(word64) Mem0[a0:int32] s2:a0 s3:a1 s1:a0 a2:0 a1:fp + -64 a0:a0 a4:(int64) (word32) a0 a3:(int64) (word32) a0 t3:<invalid> t1:<invalid> -64(fp):0x0000000000000000 -56(fp):<invalid> -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l000000000001668C:
	a5 = (word64) Mem0[s1:int32]
// DataOut: a1 a2 a5 gp ra s10 s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:<invalid> s2:a0 s3:a1 s1:a0 a2:0 a1:fp + -64 a0:a0 t3:<invalid> t1:<invalid> -64(fp):0x0000000000000000 -56(fp):<invalid> -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l0000000000016690:
	a5 = PHI(a5, a5)
	branch 0x0000000000000000 >= a5 l00000000000166E8
// DataOut: a1 a2 a5 gp ra s10 s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:(word64) Mem0[a0:int32] s2:a0 s3:a1 s1:a0 a2:0 a1:fp + -64 a0:a0 t3:<invalid> t1:<invalid> -64(fp):0x0000000000000000 -56(fp):<invalid> -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l00000000000166E8:
	a5 = -22
// DataOut: a1 a2 a5 gp ra s10 s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:(word64) Mem0[a0:int32] s2:a0 s3:a1 s1:a0 a2:0 a1:fp + -64 a0:a0 t3:<invalid> t1:<invalid> -64(fp):0x0000000000000000 -56(fp):<invalid> -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l0000000000016694:
	a5 = (int64) (0x0000000000000000 - a5)
// DataOut: a1 a2 a5 gp ra s10 s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:(word64) Mem0[a0:int32] s2:a0 s3:a1 s1:a0 a2:0 a1:fp + -64 a0:a0 t3:<invalid> t1:<invalid> -64(fp):0x0000000000000000 -56(fp):<invalid> -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l0000000000016698:
	a5 = PHI(a5, a5, a5, a5)
	a3 = qwLoc38
	a4 = Mem0[gp + -1936:word64]
	a0 = a5
	branch a3 != a4 l00000000000166F0
// DataOut: a0 a1 a2 gp ra s10 s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:<invalid> s2:a0 s3:a1 s1:a0 a2:0 a1:fp + -64 a0:a0 t3:<invalid> t1:<invalid> a4:(int64) (word32) a0 a3:(int64) (word32) a0 -64(fp):0x0000000000000000 -56(fp):<invalid> -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000166F0:
	__stack_chk_fail()
// DataOut: a0 a1 a2 gp ra s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:<invalid> s2:a0 s3:a1 s1:a0 a2:0 a1:fp + -64 a0:<invalid> a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> -64(fp):0x0000000000000000 -56(fp):<invalid> -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000166F0_thunk_fn00000000000166F4:
	ra = fn00000000000166F4(ra, gp, a0, a1, a2, out sp, out s0, out s1, out a0, out a1, out s4)
	return a0
// DataOut: a0 a1 gp s10 s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:<invalid> s2:a0 s3:a1 s1:a0 a2:0 a1:fp + -64 a0:<invalid> a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> -64(fp):0x0000000000000000 -56(fp):<invalid> -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000166A8:
	ra = qwLoc08
	s0 = qwLoc10
	s1 = qwLoc18
	s2 = qwLoc20
	s3 = qwLoc28
	sp = fp
	return a0
// DataOut: a0 a1 gp s10 s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:<invalid> s2:a0 s3:a1 s1:a0 a2:0 a1:fp + -64 a0:<invalid> a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> -64(fp):0x0000000000000000 -56(fp):<invalid> -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

fn0000000000016630_exit:
	a0 = PHI(a0, a0)
	a1 = PHI(a1, a1)
	s4 = PHI(s4, s4)
	ra = PHI(ra, ra)
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	s2 = PHI(s2, s2)
	s3 = PHI(s3, s3)
	sp = PHI(sp, sp)
	use a1 (=> a1Out)
	use s4 (=> s4Out)
// DataOut: a0 a1 s4
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s2:<invalid> s3:<invalid> s1:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> a3:<invalid> a4:<invalid> ra:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> s4:<invalid> -64(fp):0x0000000000000000 -56(fp):<invalid> -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra



word64 fn00000000000166F4(word64 ra, word64 gp, word64 a0, word64 a1, word64 a2, ptr64 & spOut, ptr64 & s0Out, ptr64 & s1Out, ptr64 & a0Out, ptr64 & a1Out, ptr64 & s4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 a1 a2 gp ra
// LiveOut: a0 a1 ra s0 s1 s4 sp
// Trashed: a0 a1 a2 a3 a4 a5 ra s0 s1 s2 s3 s4 sp t1 t3
// Preserved:
fn00000000000166F4_entry:
	def fp
	def s2
	def gp
// DataOut: a0 a1 a2 gp ra s10
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64) Local -0040(64)

l00000000000166F4:
	sp_1 = fp
	sp_2 = fp + -64
	qwLoc20_4 = s2
	a5 = Mem0[-1936:word64]
	qwLoc10 = s0
	s0 = (word64) Mem0[a0:int32]
	qwLoc18 = s1
	qwLoc28 = s3
	qwLoc30 = s4
	qwLoc08 = ra
	qwLoc38 = a5
	s1 = a0
	s3 = a1
	s4 = a2
	branch s0 != 0x0000000000000000 l00000000000167C8
// DataOut: gp ra s0 s1 s10 s3 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64) Local -0040(64)

l000000000001672C:
	a1 = 46
	a0 = s3
	strchr()
	branch a0 == 0x0000000000000000 l00000000000167C8
// DataOut: gp ra s0 s1 s10 s3 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:<invalid> s0:(word64) Mem0[a0:int32] s1:a0 s3:a1 s4:a2 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0040(64)

l00000000000167C8:
	a1 = fp + -64
	a0 = s3
	a0 = fn0000000000016630(ra, gp, a0, a1, out a1, out s4)
	branch a0 == 0x0000000000000000 l0000000000016794
// DataOut: a1 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:<invalid> s0:(word64) Mem0[a0:int32] s1:a0 s3:a1 s4:a2 a1:46 a0:a1 t3:<invalid> t1:<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000167D8:
// DataOut: a1 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> s1:<invalid> s3:<invalid> s4:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a2:<invalid> a3:<invalid> a4:<invalid> s2:<invalid> ra:<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001673C:
	a2 = fp + -64
	a1 = s3
	a0 = 2
	inet_pton()
	branch a0 == 0x0000000000000000 l000000000001678C
// DataOut: a1 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:<invalid> s0:(word64) Mem0[a0:int32] s1:a0 s3:a1 s4:a2 a1:46 a0:a1 t3:<invalid> t1:<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0040(64)

l0000000000016750:
	a0 = (word64) dwLoc40
	a0 = fn00000000000182B4(a0)
	branch a0 == 0x0000000000000000 l0000000000016790
// DataOut: a0 a1 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:<invalid> s0:(word64) Mem0[a0:int32] s1:a0 s3:a1 s4:a2 a1:a1 a0:2 t3:<invalid> t1:<invalid> a2:fp + -64 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001675C:
	a4 = PHI(a4, a4)
	a0 = PHI(a0, a0)
	a5 = a0 & 1
	branch a5 != 0x0000000000000000 l0000000000016778
// DataOut: a0 a1 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:<invalid> s0:(word64) Mem0[a0:int32] s1:a0 s3:a1 s4:a2 a1:a1 a0:<invalid> t3:<invalid> t1:<invalid> a2:fp + -64 a3:<invalid> a4:<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016764:
	a5 = (int64) (int32) (a0 >>u 0x00000001)
	branch a5 == 0x0000000000000000 l0000000000016790
// DataOut: a0 a1 a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:<invalid> s0:(word64) Mem0[a0:int32] s1:a0 s3:a1 s4:a2 a1:a1 a0:<invalid> t3:<invalid> t1:<invalid> a2:fp + -64 a3:<invalid> a4:<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001676C:
	a4 = a5 & 1
	branch a4 == 0x0000000000000000 l0000000000016820
// DataOut: a0 a1 a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:<invalid> s0:(word64) Mem0[a0:int32] s1:a0 s3:a1 s4:a2 a1:a1 a0:<invalid> t3:<invalid> t1:<invalid> a2:fp + -64 a3:<invalid> a4:<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016820:
	a0 = (int64) (int32) (a0 >>u 0x00000002)
	branch a0 != 0x0000000000000000 l000000000001675C
// DataOut: a0 a1 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:<invalid> s0:(word64) Mem0[a0:int32] s1:a0 s3:a1 s4:a2 a1:a1 a0:<invalid> t3:<invalid> t1:<invalid> a2:fp + -64 a3:<invalid> a4:<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016828:
// DataOut: a1 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:<invalid> s0:(word64) Mem0[a0:int32] s1:a0 s3:a1 s4:a2 a1:a1 a0:<invalid> t3:<invalid> t1:<invalid> a2:fp + -64 a3:<invalid> a4:<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016774:
	a0 = a5
// DataOut: a0 a1 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:<invalid> s0:(word64) Mem0[a0:int32] s1:a0 s3:a1 s4:a2 a1:a1 a0:<invalid> t3:<invalid> t1:<invalid> a2:fp + -64 a3:<invalid> a4:<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016778:
	a4 = PHI(a4, a4, a4)
	a5 = PHI(a5, a5, a5)
	a0 = PHI(a0, a0, a0)
	s0 = PHI(s0, s0, s0)
	a0 = (int64) (int32) (a0 >>u 0x00000001)
	s0 = (int64) ((word32) s0 + 1)
	branch a0 == 0x0000000000000000 l0000000000016790
// DataOut: a0 a1 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:<invalid> s0:<invalid> s1:a0 s3:a1 s4:a2 a1:a1 a0:<invalid> t3:<invalid> t1:<invalid> a2:fp + -64 a3:<invalid> a4:<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016784:
	a5 = a0 & 1
	branch a5 != 0x0000000000000000 l0000000000016778
// DataOut: a0 a1 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:<invalid> s0:<invalid> s1:a0 s3:a1 s4:a2 a1:a1 a0:<invalid> t3:<invalid> t1:<invalid> a2:fp + -64 a3:<invalid> a4:<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001678C:
	a4 = PHI(a4, a4)
	a5 = PHI(a5, a5)
	a0 = PHI(a0, a0)
	s0 = -1
// DataOut: a1 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:<invalid> s0:<invalid> s1:a0 s3:a1 s4:a2 a1:a1 a0:<invalid> t3:<invalid> t1:<invalid> a2:fp + -64 a3:<invalid> a4:<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016790:
	a4 = PHI(a4, a4, a4, a4, a4)
	a5 = PHI(a5, a5, a5, a5, a5)
	a0 = PHI(a0, a0, a0, a0, a0)
	s0 = PHI(s0, s0, s0, s0, s0)
	dwLoc40 = s0
// DataOut: a1 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 a5:<invalid> s0:<invalid> s1:a0 s3:a1 s4:a2 a1:a1 a0:<invalid> t3:<invalid> t1:<invalid> a2:fp + -64 a3:<invalid> a4:<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016794:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	dwLoc40 = PHI(dwLoc40, dwLoc40)
	a4 = PHI(a4, a4)
	a0 = PHI(a0, a0)
	s0 = PHI(s0, s0)
	s4 = PHI(s4, s4)
	a5 = (word64) Mem0[sp:int32]
	branch s4 == 0x0000000000000000 l00000000000167DC
// DataOut: a1 a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> s1:<invalid> s3:<invalid> s4:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a2:<invalid> a3:<invalid> a4:<invalid> s2:<invalid> ra:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001679C:
	a4 = 32
	a0 = a5
	branch a4 >= a5 l00000000000167DC
// DataOut: a0 a1 a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> s1:<invalid> s3:<invalid> s4:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a2:<invalid> a3:<invalid> a4:<invalid> s2:<invalid> ra:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000167DC:
	a4 = PHI(a4, a4)
	a0 = a5
	branch a5 < 0x0000000000000000 l00000000000167C0
// DataOut: a0 a1 a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> s1:<invalid> s3:<invalid> s4:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> a2:<invalid> a3:<invalid> s2:<invalid> ra:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000167E4:
	a4 = (word64) Mem0[s1:int32]
	branch a4 != 0x0000000000000000 l00000000000167B8
// DataOut: a0 a1 a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> s1:<invalid> s3:<invalid> s4:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> a2:<invalid> a3:<invalid> s2:<invalid> ra:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000167EC:
	a5 = 32
	branch a5 < a0 l00000000000167C0
// DataOut: a0 a1 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> s1:<invalid> s3:<invalid> s4:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> a2:<invalid> a3:<invalid> s2:<invalid> ra:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000167A8:
	a4 = (word64) Mem0[s1:int32]
	branch a4 != 0x0000000000000000 l00000000000167B8
// DataOut: a0 a1 a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> s1:<invalid> s3:<invalid> s4:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a4:32 a2:<invalid> a3:<invalid> s2:<invalid> ra:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000167B0:
	a4 = 1
	Mem0[s1:word32] = a4
// DataOut: a0 a1 a5 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> s1:<invalid> s3:<invalid> s4:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> a2:<invalid> a3:<invalid> s2:<invalid> ra:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000167B8:
	a0 = PHI(a0, a0, a0)
	a4 = 128
	branch a4 >= a5 l00000000000167F4
// DataOut: a0 a1 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> s1:<invalid> s3:<invalid> s4:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> a2:<invalid> a3:<invalid> s2:<invalid> ra:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000167C0:
	a2 = PHI(a2, a2, a2, a2)
	a1 = PHI(a1, a1, a1, a1)
	dwLoc40 = PHI(dwLoc40, dwLoc40, dwLoc40, dwLoc40)
	a4 = PHI(a4, a4, a4, a4)
	a5 = PHI(a5, a5, a5, a5)
	s0 = PHI(s0, s0, s0, s0)
	s4 = PHI(s4, s4, s4, s4)
	a0 = -1
// DataOut: a0 a1 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> s1:<invalid> s3:<invalid> s4:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> a2:<invalid> a3:<invalid> s2:<invalid> ra:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000167F4:
	a2 = PHI(a2, a2, a2)
	a1 = PHI(a1, a1, a1)
	dwLoc40 = PHI(dwLoc40, dwLoc40, dwLoc40)
	a0 = PHI(a0, a0, a0)
	s0 = PHI(s0, s0, s0)
	s4 = PHI(s4, s4, s4)
	a4 = Mem0[sp + 8:word64]
	a5 = Mem0[gp + -1936:word64]
	branch a4 != a5 l000000000001682C
	a4 = Mem0[sp + 8:word64]
	a5 = Mem0[gp + -1936:word64]
	branch a4 != a5 l000000000001682C
// DataOut: a0 a1 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> s1:<invalid> s3:<invalid> s4:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> a2:<invalid> a3:<invalid> s2:<invalid> ra:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001682C:
	__stack_chk_fail()
	sp = sp + -32
	Mem0[sp + 16:word64] = s0
	a5 = Mem0[gp + -1936:word64]
	Mem0[sp + 24:word64] = ra
	Mem0[sp:word32] = 0x0000000000000000
	Mem0[sp + 8:word64] = a5
	branch a0 == 0x0000000000000000 l0000000000016864
// DataOut: a0 a1 gp ra s0 s1 s10 s4
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> s1:<invalid> s3:<invalid> s4:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> a2:<invalid> a3:<invalid> s2:<invalid> ra:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016848_thunk_fn0000000000016864:
	ra = fn0000000000016864(ra, gp, s0, a1, out sp, out s0, out a0)
	return ra
// DataOut: a0 a1 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> s1:<invalid> s3:<invalid> s4:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> a2:<invalid> a3:<invalid> s2:<invalid> ra:<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):<invalid> -72(fp):ra -64(fp):<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016848_thunk_fn000000000001684C:
	ra = fn000000000001684C(ra, gp, s0, a0, a1, out sp, out s0, out a0)
	return ra
// DataOut: a0 a1 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> s1:<invalid> s3:<invalid> s4:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> a2:<invalid> a3:<invalid> s2:<invalid> ra:<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):<invalid> -72(fp):ra -64(fp):<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016800:
	ra = Mem0[sp + 56:word64]
	s0 = Mem0[sp + 48:word64]
	s1 = Mem0[sp + 40:word64]
	s2 = Mem0[sp + 32:word64]
	s3 = Mem0[sp + 24:word64]
	s4 = Mem0[sp + 16:word64]
	sp = sp + 64
	return ra
	ra = Mem0[sp + 56:word64]
	s0 = Mem0[sp + 48:word64]
	s1 = Mem0[sp + 40:word64]
	s2 = Mem0[sp + 32:word64]
	s3 = Mem0[sp + 24:word64]
	s4 = Mem0[sp + 16:word64]
	sp = sp + 64
	return ra
// DataOut: a0 a1 gp ra s0 s1 s10 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> s1:<invalid> s3:<invalid> s4:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> a2:<invalid> a3:<invalid> s2:<invalid> ra:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

fn00000000000166F4_exit:
	a5 = PHI(a5, a5, a5, a5)
	a0 = PHI(a0, a0, a0, a0)
	ra = PHI(ra, ra, ra, ra)
	s0 = PHI(s0, s0, s0, s0)
	s1 = PHI(s1, s1, s1, s1)
	s2 = PHI(s2, s2, s2, s2)
	s3 = PHI(s3, s3, s3, s3)
	s4 = PHI(s4, s4, s4, s4)
	sp = PHI(sp, sp, sp, sp)
	use sp (=> spOut)
	use s0 (=> s0Out)
	use s1 (=> s1Out)
	use a0 (=> a0Out)
	use a1 (=> a1Out)
	use s4 (=> s4Out)
// DataOut: a0 a1 ra s0 s1 s4 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> s1:<invalid> s3:<invalid> s4:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> ra:<invalid> s2:<invalid> a3:<invalid> a2:<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):<invalid> -72(fp):ra -64(fp):<invalid> -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra



word64 fn0000000000016830(word64 ra, word64 gp, word64 s0, word64 a0, word64 a1, ptr64 & spOut, ptr64 & s0Out, ptr64 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 a1 gp ra s0
// LiveOut: a0 ra s0 sp
// Trashed: a0 a3 a4 a5 ra s0 sp t1 t3
// Preserved:
fn0000000000016830_entry:
	def fp
	def s0
	def gp
// DataOut: a0 a1 gp ra s0 s1 s10 s4 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l0000000000016830:
	sp_1 = fp
	sp_2 = fp + -32
	qwLoc10_4 = s0
	a5 = Mem0[-1936:word64]
	qwLoc08 = ra
	dwLoc20 = 0x0000000000000000
	qwLoc18 = a5
	branch a0 == 0x0000000000000000 l0000000000016848_thunk_fn0000000000016864
// DataOut: a0 a1 gp ra s0 s1 s10 s4 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000016848_thunk_fn0000000000016864:
	ra = fn0000000000016864(ra, gp, s0, a1, out sp, out s0, out a0)
	return ra
// DataOut: a0 a1 gp ra s0 s1 s10 s4 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -32 a5:<invalid> -32(fp):0x0000000000000000 -24(fp):<invalid> -16(fp):s0 -8(fp):ra

l0000000000016848_thunk_fn000000000001684C:
	ra = fn000000000001684C(ra, gp, s0, a0, a1, out sp, out s0, out a0)
	return ra
// DataOut: a0 a1 gp ra s0 s1 s10 s4 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -32 a5:<invalid> -32(fp):0x0000000000000000 -24(fp):<invalid> -16(fp):s0 -8(fp):ra

l0000000000016848_thunk_fn000000000001684C:
	ra = fn000000000001684C(ra, gp, s0, a0, a1, out sp, out s0, out a0)
	return ra
// DataOut: a0 a1 gp ra s0 s1 s10 s4 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> a0:<invalid> a3:<invalid> a4:<invalid> ra:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> -32(fp):0x0000000000000000 -24(fp):<invalid> -16(fp):s0 -8(fp):ra

fn0000000000016830_exit:
	sp = PHI(sp, sp, sp)
	s0 = PHI(s0, s0, s0)
	a0 = PHI(a0, a0, a0)
	ra = PHI(ra, ra, ra)
	use sp (=> spOut)
	use s0 (=> s0Out)
	use a0 (=> a0Out)
// DataOut: a0 ra s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> a0:<invalid> a4:<invalid> ra:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> a3:<invalid> -32(fp):0x0000000000000000 -24(fp):<invalid> -16(fp):s0 -8(fp):ra



word64 fn000000000001684C(word64 ra, word64 gp, word64 s0, word64 a0, word64 a1, ptr64 & spOut, ptr64 & s0Out, ptr64 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 a1 gp ra s0
// LiveOut: a0 ra s0 sp
// Trashed: a0 a3 a4 a5 ra s0 sp t1 t3
// Preserved:
fn000000000001684C_entry:
// DataOut: a0 a1 gp ra s0 s1 s10 s4 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(64)

l000000000001684C:
	Mem8[v3:word32] = fn00000000000182B4((int64) (int32) (-1 << (int64) (32 - a0)))
// DataOut: a1 gp ra s0 s1 s10 s4 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000016860_thunk_fn0000000000016864:
	word64 sp_13
	word64 s0_14
	word64 a0_15
	return fn0000000000016864(ra, gp, s0, a1, out sp_13, out s0_14, out a0_15)
// DataOut: a0 a1 gp ra s0 s1 s10 s4 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 a5:<invalid> a0:<invalid> a3:<invalid> a4:<invalid>

fn000000000001684C_exit:
// DataOut: a0 ra s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> a0:<invalid> a3:<invalid> a4:<invalid> ra:<invalid> s0:<invalid> t3:<invalid> t1:<invalid>



word64 fn0000000000016864(word64 ra, word64 gp, word64 s0, word64 a1, ptr64 & spOut, ptr64 & s0Out, ptr64 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1 gp ra s0
// LiveOut: a0 ra s0 sp
// Trashed: a0 a3 a4 a5 ra s0 sp t1 t3
// Preserved:
fn0000000000016864_entry:
// DataOut: a1 gp ra s0 s1 s10 s4 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(64)

l0000000000016864:
	sp = v3
	a4 = Mem0[sp + 8:word64]
	a5 = Mem0[gp + -1936:word64]
	a0 = (word64) Mem0[sp:int32]
	branch a4 != a5 l0000000000016884
// DataOut: a0 a1 gp ra s0 s1 s10 s4 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000016884:
	__stack_chk_fail()
	sp = sp + -16
	Mem0[sp:word64] = s0
	s0 = a0
	a0 = a1
	Mem0[sp + 8:word64] = ra
	ra = fn0000000000016830(ra, gp, s0, a0, a1, out sp, out s0, out a0)
	ra = Mem0[sp + 8:word64]
	a0 = a0 ^ -1
	a0 = a0 | s0
	s0 = Mem0[sp:word64]
	sp = sp + 16
	return ra
// DataOut: a0 a1 gp ra s0 s1 s10 s4 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 a4:<invalid> a5:<invalid> a0:(word64) Mem0[v3:int32]

l0000000000016874:
	ra = Mem0[sp + 24:word64]
	s0 = Mem0[sp + 16:word64]
	sp = sp + 32
	return ra
// DataOut: a0 a1 gp ra s0 s1 s10 s4 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 a4:<invalid> a5:<invalid> a0:(word64) Mem0[v3:int32]

fn0000000000016864_exit:
	use sp (=> spOut)
	use s0 (=> s0Out)
	use a0 (=> a0Out)
// DataOut: a0 ra s0 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a4:<invalid> a5:<invalid> a0:<invalid> ra:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> a3:<invalid>



void fn00000000000168B8(word64 ra, word64 gp, word64 a0, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 a1 gp ra
// LiveOut:
// Trashed: a0 a3 a4 a5 ra s0 sp t1 t3
// Preserved: ra s0 sp
fn00000000000168B8_entry:
// DataOut: a0 a1 gp ra
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l00000000000168B8:
	word64 sp_12
	word64 s0_13
	word64 a0_14
	fn0000000000016830(ra, gp, a0, a1, a1, out sp_12, out s0_13, out a0_14)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn00000000000168B8_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> s0:<invalid> a0:<invalid> ra:<invalid> a5:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> a3:<invalid> -16(fp):s0 -8(fp):ra



word64 fn00000000000168E4(word64 gp, word64 a0, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 a1 gp
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s2 s3 sp t1 t3 t4 t5
// Preserved: ra s0 s1 sp
fn00000000000168E4_entry:
	def fp
	def s0
	def gp
// DataOut: a0 a1 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l00000000000168E4:
	sp_1 = fp
	sp_2 = fp + -96
	qwLoc10_4 = s0
	a4 = Mem0[-1936:word64]
	qwLoc08 = ra
	qwLoc18 = s1
	a5 = 2
	qwLoc28 = a4
	a7 = a0
	branch a0 == a5 l0000000000016984
// DataOut: a0 a1 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64) Local -0028(64)

l0000000000016984:
	t5 = (word64) Mem0[a1:byte]
	t4 = (word64) Mem0[a1 + 1:byte]
	t3 = (word64) Mem0[a1 + 2:byte]
	t1 = (word64) Mem0[a1 + 3:byte]
	qwLoc58 = 0x0000000000000000
	a6 = 0
	a5 = 0
	a4 = 0
	a3 = 1025
	a2 = gp + -1896
	a1 = 16
	a0 = fp + -88
	qwLoc50 = 0x0000000000000000
	wLoc58 = a7
	bLoc54 = t5
	bLoc53 = t4
	bLoc52 = t3
	bLoc51 = t1
	getnameinfo()
// DataOut: a0 a1 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a4:<invalid> a5:2 a7:a0 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0028(64)

l0000000000016908:
	a5 = 10
	branch a0 == a5 l0000000000016934
// DataOut: a1 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a4:<invalid> a5:2 a7:a0 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0028(64)

l0000000000016934:
	qwLoc48 = 0x0000000000000000
	a2 = 16
	a0 = fp + -64
	qwLoc40 = 0x0000000000000000
	qwLoc38 = 0x0000000000000000
	dwLoc30 = 0x0000000000000000
	wLoc48 = a7
	memcpy()
	a6 = 0
	a5 = 0
	a4 = 0
	a3 = 1025
	a2 = gp + -1896
	a1 = 28
	a0 = fp + -72
	getnameinfo()
// DataOut: a0 a1 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a4:<invalid> a5:10 a7:a0 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0028(64)

l0000000000016974:
	t5 = PHI(t5, t5)
	t4 = PHI(t4, t4)
	t3 = PHI(t3, t3)
	t1 = PHI(t1, t1)
	qwLoc58 = PHI(qwLoc58, qwLoc58)
	qwLoc50 = PHI(qwLoc50, qwLoc50)
	wLoc58 = PHI(wLoc58, wLoc58)
	bLoc54 = PHI(bLoc54, bLoc54)
	bLoc53 = PHI(bLoc53, bLoc53)
	bLoc52 = PHI(bLoc52, bLoc52)
	bLoc51 = PHI(bLoc51, bLoc51)
	qwLoc48 = PHI(qwLoc48, qwLoc48)
	qwLoc40 = PHI(qwLoc40, qwLoc40)
	qwLoc38 = PHI(qwLoc38, qwLoc38)
	dwLoc30 = PHI(dwLoc30, dwLoc30)
	wLoc48 = PHI(wLoc48, wLoc48)
	a6 = PHI(a6, a6)
	a3 = PHI(a3, a3)
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a4 = PHI(a4, a4)
	a5 = PHI(a5, a5)
	a0 = PHI(a0, a0)
	branch a0 != 0x0000000000000000 l0000000000016910
// DataOut: a1 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a4:0 a5:0 a7:a0 t5:(word64) Mem0[a1:byte] t4:(word64) Mem0[a1 + 1:byte] t3:<invalid> t1:<invalid> a6:0 a3:1025 a2:gp + -1896 a1:<invalid> a0:<invalid> -88(fp):fp + -88 -84(fp):(word64) Mem0[a1:byte] -83(fp):(word64) Mem0[a1 + 1:byte] -82(fp):(word64) Mem0[a1 + 2:byte] -81(fp):(word64) Mem0[a1 + 3:byte] -80(fp):0x0000000000000000 -72(fp):fp + -64 -64(fp):0x0000000000000000 -56(fp):0x0000000000000000 -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0028(64)

l0000000000016978:
	a0 = gp + -1896
	__strdup()
// DataOut: a0 a1 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a4:0 a5:0 a7:a0 t5:(word64) Mem0[a1:byte] t4:(word64) Mem0[a1 + 1:byte] t3:<invalid> t1:<invalid> a6:0 a3:1025 a2:gp + -1896 a1:<invalid> a0:<invalid> -88(fp):fp + -88 -84(fp):(word64) Mem0[a1:byte] -83(fp):(word64) Mem0[a1 + 1:byte] -82(fp):(word64) Mem0[a1 + 2:byte] -81(fp):(word64) Mem0[a1 + 3:byte] -80(fp):0x0000000000000000 -72(fp):fp + -64 -64(fp):0x0000000000000000 -56(fp):0x0000000000000000 -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0028(64)

l0000000000016910:
	t5 = PHI(t5, t5)
	t4 = PHI(t4, t4)
	t3 = PHI(t3, t3)
	t1 = PHI(t1, t1)
	qwLoc58 = PHI(qwLoc58, qwLoc58)
	qwLoc50 = PHI(qwLoc50, qwLoc50)
	wLoc58 = PHI(wLoc58, wLoc58)
	bLoc54 = PHI(bLoc54, bLoc54)
	bLoc53 = PHI(bLoc53, bLoc53)
	bLoc52 = PHI(bLoc52, bLoc52)
	bLoc51 = PHI(bLoc51, bLoc51)
	qwLoc48 = PHI(qwLoc48, qwLoc48)
	qwLoc40 = PHI(qwLoc40, qwLoc40)
	qwLoc38 = PHI(qwLoc38, qwLoc38)
	dwLoc30 = PHI(dwLoc30, dwLoc30)
	wLoc48 = PHI(wLoc48, wLoc48)
	a6 = PHI(a6, a6)
	a3 = PHI(a3, a3)
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a4 = PHI(a4, a4)
	a5 = PHI(a5, a5)
	a0 = 0
// DataOut: a0 a1 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a4:<invalid> a5:<invalid> a7:a0 t5:(word64) Mem0[a1:byte] t4:(word64) Mem0[a1 + 1:byte] t3:<invalid> t1:<invalid> a6:0 a3:1025 a2:gp + -1896 a1:<invalid> a0:<invalid> -88(fp):fp + -88 -84(fp):(word64) Mem0[a1:byte] -83(fp):(word64) Mem0[a1 + 1:byte] -82(fp):(word64) Mem0[a1 + 2:byte] -81(fp):(word64) Mem0[a1 + 3:byte] -80(fp):0x0000000000000000 -72(fp):fp + -64 -64(fp):0x0000000000000000 -56(fp):0x0000000000000000 -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0028(64)

l0000000000016914:
	t5 = PHI(t5, t5)
	t4 = PHI(t4, t4)
	t3 = PHI(t3, t3)
	t1 = PHI(t1, t1)
	qwLoc58 = PHI(qwLoc58, qwLoc58)
	qwLoc50 = PHI(qwLoc50, qwLoc50)
	wLoc58 = PHI(wLoc58, wLoc58)
	bLoc54 = PHI(bLoc54, bLoc54)
	bLoc53 = PHI(bLoc53, bLoc53)
	bLoc52 = PHI(bLoc52, bLoc52)
	bLoc51 = PHI(bLoc51, bLoc51)
	qwLoc48 = PHI(qwLoc48, qwLoc48)
	qwLoc40 = PHI(qwLoc40, qwLoc40)
	qwLoc38 = PHI(qwLoc38, qwLoc38)
	dwLoc30 = PHI(dwLoc30, dwLoc30)
	wLoc48 = PHI(wLoc48, wLoc48)
	a6 = PHI(a6, a6)
	a3 = PHI(a3, a3)
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	a4 = qwLoc28
	a5 = Mem0[gp + -1936:word64]
	branch a4 != a5 l00000000000169D4
// DataOut: a0 a1 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a4:<invalid> a5:<invalid> a7:a0 a0:<invalid> t5:(word64) Mem0[a1:byte] t4:(word64) Mem0[a1 + 1:byte] t3:<invalid> t1:<invalid> a6:0 a3:1025 a2:gp + -1896 a1:<invalid> -88(fp):fp + -88 -84(fp):(word64) Mem0[a1:byte] -83(fp):(word64) Mem0[a1 + 1:byte] -82(fp):(word64) Mem0[a1 + 2:byte] -81(fp):(word64) Mem0[a1 + 3:byte] -80(fp):0x0000000000000000 -72(fp):fp + -64 -64(fp):0x0000000000000000 -56(fp):0x0000000000000000 -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000169D4:
	__stack_chk_fail()
// DataOut: a1 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a4:<invalid> a5:<invalid> a7:a0 a0:<invalid> t5:(word64) Mem0[a1:byte] t4:(word64) Mem0[a1 + 1:byte] t3:<invalid> t1:<invalid> a6:0 a3:1025 a2:gp + -1896 a1:<invalid> -88(fp):fp + -88 -84(fp):(word64) Mem0[a1:byte] -83(fp):(word64) Mem0[a1 + 1:byte] -82(fp):(word64) Mem0[a1 + 2:byte] -81(fp):(word64) Mem0[a1 + 3:byte] -80(fp):0x0000000000000000 -72(fp):fp + -64 -64(fp):0x0000000000000000 -56(fp):0x0000000000000000 -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000169D4_thunk_fn00000000000169D8:
	a0 = fn00000000000169D8(gp, a1)
	return a0
// DataOut: a0 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a4:<invalid> a5:<invalid> a7:a0 a0:<invalid> t3:<invalid> t1:<invalid> t5:(word64) Mem0[a1:byte] t4:(word64) Mem0[a1 + 1:byte] a6:0 a3:1025 a2:gp + -1896 a1:<invalid> -88(fp):fp + -88 -84(fp):(word64) Mem0[a1:byte] -83(fp):(word64) Mem0[a1 + 1:byte] -82(fp):(word64) Mem0[a1 + 2:byte] -81(fp):(word64) Mem0[a1 + 3:byte] -80(fp):0x0000000000000000 -72(fp):fp + -64 -64(fp):0x0000000000000000 -56(fp):0x0000000000000000 -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016920:
	ra = qwLoc08
	s0 = qwLoc10
	s1 = qwLoc18
	sp = fp
	return a0
// DataOut: a0 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a4:<invalid> a5:<invalid> a7:a0 a0:<invalid> t5:(word64) Mem0[a1:byte] t4:(word64) Mem0[a1 + 1:byte] t3:<invalid> t1:<invalid> a6:0 a3:1025 a2:gp + -1896 a1:<invalid> -88(fp):fp + -88 -84(fp):(word64) Mem0[a1:byte] -83(fp):(word64) Mem0[a1 + 1:byte] -82(fp):(word64) Mem0[a1 + 2:byte] -81(fp):(word64) Mem0[a1 + 3:byte] -80(fp):0x0000000000000000 -72(fp):fp + -64 -64(fp):0x0000000000000000 -56(fp):0x0000000000000000 -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra

fn00000000000168E4_exit:
	a0 = PHI(a0, a0)
	ra = PHI(ra, ra)
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	sp = PHI(sp, sp)
// DataOut: a0
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a4:<invalid> a5:<invalid> a7:a0 a0:<invalid> ra:ra s0:<invalid> s1:<invalid> t3:<invalid> t1:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> t5:(word64) Mem0[a1:byte] t4:(word64) Mem0[a1 + 1:byte] a6:0 s2:<invalid> s3:<invalid> -88(fp):fp + -88 -84(fp):(word64) Mem0[a1:byte] -83(fp):(word64) Mem0[a1 + 1:byte] -82(fp):(word64) Mem0[a1 + 2:byte] -81(fp):(word64) Mem0[a1 + 3:byte] -80(fp):0x0000000000000000 -72(fp):fp + -64 -64(fp):0x0000000000000000 -56(fp):0x0000000000000000 -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra



word64 fn00000000000169D8(word64 gp, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1 gp
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 s0 s1 s2 s3 sp t1 t3
// Preserved: ra s0 s1 s2 s3 s4 sp
fn00000000000169D8_entry:
	def fp
	def s4
	def gp
// DataOut: a1 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64) Local -0070(64)

l00000000000169D8:
	sp_1 = fp
	sp_2 = fp + -112
	qwLoc30_4 = s4
	a5 = Mem0[-1936:word64]
	a4 = a1
	qwLoc68 = 0x0000000000000000
	dwLoc64 = a0
	a3 = fp + -112
	a2 = fp + -104
	a1 = 0
	a0 = a4
	qwLoc08 = ra
	qwLoc10 = s0
	qwLoc18 = s1
	qwLoc20 = s2
	qwLoc28 = s3
	qwLoc38 = a5
	qwLoc60 = 0x0000000000000000
	qwLoc58 = 0x0000000000000000
	qwLoc50 = 0x0000000000000000
	qwLoc48 = 0x0000000000000000
	qwLoc40 = 0x0000000000000000
	getaddrinfo()
	branch a0 != 0x0000000000000000 l0000000000016AD8
// DataOut: gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Local -0038(64) Local -0070(64)

l0000000000016AD8:
	a0 = 0
// DataOut: a0 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:a1 a3:fp + -112 a2:fp + -104 a1:0 a0:a1 t3:<invalid> t1:<invalid> -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l0000000000016A34:
	s0 = qwLoc70
	branch s0 == 0x0000000000000000 l0000000000016AA0
// DataOut: gp s0 s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:a1 a3:fp + -112 a2:fp + -104 a1:0 a0:a1 t3:<invalid> t1:<invalid> -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l0000000000016A3C:
	s1 = gp + -864
	s3 = 2
	s2 = 64
// DataOut: gp s0 s1 s10 s3 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:a1 a3:fp + -112 a2:fp + -104 a1:0 a0:a1 s0:<invalid> t3:<invalid> t1:<invalid> -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l0000000000016A68:
	a2 = PHI(a2, a2)
	a3 = PHI(a3, a3)
	s0 = PHI(s0, s0)
	a0 = (word64) Mem0[s0 + 4:int32]
	a1 = Mem0[s0 + 24:word64]
	branch a0 != s3 l0000000000016A4C
	a0 = (word64) Mem0[s0 + 4:int32]
	a1 = Mem0[s0 + 24:word64]
	branch a0 != s3 l0000000000016A4C
	a0 = (word64) Mem0[s0 + 4:int32]
	a1 = Mem0[s0 + 24:word64]
	branch a0 != s3 l0000000000016A4C
// DataOut: a0 a1 gp s0 s1 s10 s3 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:a1 a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> s0:<invalid> s1:gp + -864 s3:2 s2:64 t3:<invalid> t1:<invalid> -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l0000000000016A4C:
	a1 = a1 + 8
	a3 = s2
	a2 = s1
	inet_ntop()
	branch a0 != 0x0000000000000000 l0000000000016A88
// DataOut: gp s0 s1 s10 s3 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:a1 a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> s0:<invalid> s1:gp + -864 s3:2 s2:64 t3:<invalid> t1:<invalid> -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l0000000000016A74:
	a1 = a1 + 4
	a3 = s2
	a2 = s1
	inet_ntop()
	branch a0 == 0x0000000000000000 l0000000000016A60
	a1 = a1 + 4
	a3 = s2
	a2 = s1
	inet_ntop()
	branch a0 == 0x0000000000000000 l0000000000016A60
	a1 = a1 + 4
	a3 = s2
	a2 = s1
	inet_ntop()
	branch a0 == 0x0000000000000000 l0000000000016A60
// DataOut: gp s0 s1 s10 s3 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:a1 a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> s0:<invalid> s1:gp + -864 s3:2 s2:64 t3:<invalid> t1:<invalid> -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l0000000000016A60:
	a1 = PHI(a1, a1)
	a2 = PHI(a2, a2)
	a3 = PHI(a3, a3)
	s0 = Mem0[s0 + 40:word64]
	branch s0 == 0x0000000000000000 l0000000000016A9C
	s0 = Mem0[s0 + 40:word64]
	branch s0 == 0x0000000000000000 l0000000000016A9C
// DataOut: gp s0 s1 s10 s3 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:a1 a3:64 a2:gp + -864 a1:<invalid> a0:<invalid> s0:<invalid> s1:gp + -864 s3:2 s2:64 t3:<invalid> t1:<invalid> -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l0000000000016A9C:
	s0 = qwLoc70
// DataOut: gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:a1 a3:64 a2:gp + -864 a1:<invalid> a0:<invalid> s0:<invalid> s1:gp + -864 s3:2 s2:64 t3:<invalid> t1:<invalid> -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l0000000000016AA0:
	a1 = PHI(a1, a1)
	a2 = PHI(a2, a2)
	a3 = PHI(a3, a3)
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	s2 = PHI(s2, s2)
	s3 = PHI(s3, s3)
	a0 = s0
	freeaddrinfo()
	a0 = 0
// DataOut: a0 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:a1 a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> s1:gp + -864 s3:2 s2:64 -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l0000000000016A88:
	a1 = PHI(a1, a1)
	a2 = PHI(a2, a2)
	a3 = PHI(a3, a3)
	a0 = qwLoc70
	freeaddrinfo()
	a0 = s1
	__strdup()
	a0 = qwLoc70
	freeaddrinfo()
	a0 = s1
	__strdup()
	a0 = qwLoc70
	freeaddrinfo()
	a0 = s1
	__strdup()
// DataOut: a0 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:a1 a3:64 a2:gp + -864 a1:<invalid> a0:<invalid> s0:<invalid> s1:gp + -864 s3:2 s2:64 t3:<invalid> t1:<invalid> -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0038(64)

l0000000000016AAC:
	a1 = PHI(a1, a1, a1)
	a2 = PHI(a2, a2, a2)
	a3 = PHI(a3, a3, a3)
	a0 = PHI(a0, a0, a0)
	s0 = PHI(s0, s0, s0)
	s1 = PHI(s1, s1, s1)
	s2 = PHI(s2, s2, s2)
	s3 = PHI(s3, s3, s3)
	a4 = qwLoc38
	a5 = Mem0[gp + -1936:word64]
	branch a4 != a5 l0000000000016AE0
// DataOut: a0 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:a1 a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> s1:gp + -864 s3:2 s2:64 -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016AE0:
	__stack_chk_fail()
	a5 = a0
// DataOut: a5 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> s1:gp + -864 s3:2 s2:64 -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016AE8:
	a3 = PHI(a3, a3)
	a5 = PHI(a5, a5)
	a4 = PHI(a4, a4)
	branch a5 == 0x0000000000000000 l0000000000016B30
// DataOut: a5 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> s1:gp + -864 s3:2 s2:64 -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016AEC:
	a4 = a5 & 1
	branch a4 == 0x0000000000000000 l0000000000016B14
// DataOut: a5 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> s1:gp + -864 s3:2 s2:64 -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016B14:
	a4 = (int64) (int32) (a5 >>u 0x00000001)
	a3 = a4 & 1
	a5 = (int64) (int32) (a5 >>u 0x00000002)
	branch a4 == 0x0000000000000000 l0000000000016B30
// DataOut: a3 a4 a5 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> s1:gp + -864 s3:2 s2:64 -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016B30:
	a3 = PHI(a3, a3)
	a5 = PHI(a5, a5)
	a4 = PHI(a4, a4)
	a0 = 0
// DataOut: a0 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> s1:gp + -864 s3:2 s2:64 -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016B24:
	branch a3 == 0x0000000000000000 l0000000000016AE8
// DataOut: a4 a5 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> s1:gp + -864 s3:2 s2:64 -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016B28:
	a5 = a4
// DataOut: a5 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> s1:gp + -864 s3:2 s2:64 -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016AF4:
	a3 = PHI(a3, a3)
	a5 = PHI(a5, a5)
	a4 = PHI(a4, a4)
	a0 = 0
// DataOut: a0 a5 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> s1:gp + -864 s3:2 s2:64 -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016AF8:
	a5 = PHI(a5, a5)
	a0 = PHI(a0, a0)
	a5 = (int64) (int32) (a5 >>u 0x00000001)
	a4 = a5 & 1
	a0 = (int64) ((word32) a0 + 1)
	branch a5 == 0x0000000000000000 l0000000000016B34
// DataOut: a0 a4 a5 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> s1:gp + -864 s3:2 s2:64 -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016B34:
	a3 = PHI(a3, a3)
	a5 = PHI(a5, a5)
	a4 = PHI(a4, a4)
	a0 = PHI(a0, a0)
	return a0
// DataOut: a0 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> s1:gp + -864 s3:2 s2:64 -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016B08:
	branch a4 != 0x0000000000000000 l0000000000016AF8
// DataOut: a0 a5 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> s1:gp + -864 s3:2 s2:64 -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016B0C:
	a0 = -1
	return a0
// DataOut: a0 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> s1:gp + -864 s3:2 s2:64 -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016AB8:
	ra = qwLoc08
	s0 = qwLoc10
	s1 = qwLoc18
	s2 = qwLoc20
	s3 = qwLoc28
	s4 = qwLoc30
	sp = fp
	return a0
// DataOut: a0 gp s10 s6
// DataOut (flags): 
// SymbolicIn: sp:fp + -112 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> s1:gp + -864 s3:2 s2:64 -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

fn00000000000169D8_exit:
	a3 = PHI(a3, a3, a3)
	a5 = PHI(a5, a5, a5)
	a4 = PHI(a4, a4, a4)
	a0 = PHI(a0, a0, a0)
	ra = PHI(ra, ra, ra)
	s0 = PHI(s0, s0, s0)
	s1 = PHI(s1, s1, s1)
	s2 = PHI(s2, s2, s2)
	s3 = PHI(s3, s3, s3)
	s4 = PHI(s4, s4, s4)
	sp = PHI(sp, sp, sp)
// DataOut: a0
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a0:<invalid> s0:<invalid> t3:<invalid> t1:<invalid> ra:ra s1:<invalid> s2:<invalid> s3:<invalid> s4:s4 -104(fp):0x0000000000000000 -100(fp):a0 -96(fp):0x0000000000000000 -88(fp):0x0000000000000000 -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):0x0000000000000000 -56(fp):<invalid> -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra



void fn0000000000016B38(word64 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0
// LiveOut:
// Trashed: a0 a5
// Preserved: sp
fn0000000000016B38_entry:
// DataOut: a0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000016B38:
	branch 127 <u a0 l0000000000016B5C
// DataOut: a0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000016B5C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp a5:127

l0000000000016B40:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp a5:127

fn0000000000016B38_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp a5:<invalid> a0:<invalid>



word64 fn0000000000016B68(word64 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6
// Preserved: ra sp
fn0000000000016B68_entry:
// DataOut: a0 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l0000000000016B68:
	word64 a4_102
	word64 a0_6 = fn00000000000182B4(a0)
	word64 a5_7 = (int64) (int32) (a0_6 >>u 0x00000018)
	branch a5_7 == 0x0000000000000000 l0000000000016BD8
// DataOut: a0 a5 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000016BD8:
	a4_102 = 0x00000000000115E8
// DataOut: a4 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a3:<invalid> a4:<invalid> a0:<invalid> -8(fp):ra

l0000000000016B7C:
	branch a5_7 == 10 l0000000000016C2C
// DataOut: a0 a5 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a3:<invalid> a4:<invalid> a0:<invalid> -8(fp):ra

l0000000000016B84:
	word64 a4_41 = (int64) (int32) (a0_6 >>u 0x00000010)
	branch a5_7 == 100 l0000000000016C58
// DataOut: a0 a4 a5 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:10 a3:<invalid> a0:<invalid> -8(fp):ra

l0000000000016C58:
	branch (a4_41 & 192) != 64 l0000000000016BC0
// DataOut: a5 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:100 a0:<invalid> -8(fp):ra

l0000000000016C64:
	a4_102 = 0x0000000000011618
// DataOut: a4 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:64 a0:<invalid> -8(fp):ra

l0000000000016B90:
	branch a5_7 == 127 l0000000000016C70
// DataOut: a0 a4 a5 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:100 a0:<invalid> -8(fp):ra

l0000000000016C70:
	a4_102 = 0x0000000000011630
// DataOut: a4 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:127 a0:<invalid> -8(fp):ra

l0000000000016B98:
	word64 a2_63 = (int64) (int32) (a0_6 >>u 0x00000008)
	branch a5_7 == 169 l0000000000016C44
// DataOut: a0 a2 a3 a4 a5 a6 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:127 a0:<invalid> -8(fp):ra

l0000000000016C44:
	branch (a4_41 & 255) != 254 l0000000000016BC0
// DataOut: a5 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:169 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016C4C:
	a4_102 = 0x0000000000011640
// DataOut: a4 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:254 a3:<invalid> a2:<invalid> a1:169 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016BAC:
	branch a5_7 != 172 l0000000000016BF0
// DataOut: a0 a2 a3 a4 a5 a6 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:169 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016BF0:
	branch a5_7 != 192 l0000000000016C7C
// DataOut: a0 a2 a3 a4 a5 a6 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:172 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016C7C:
	branch a5_7 != 203 l0000000000016D18
// DataOut: a0 a3 a4 a5 a6 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016D18:
	word64 a2_95 = 255
	branch a5_7 != a2_95 l0000000000016D4C
// DataOut: a0 a2 a3 a4 a5 a6 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:<invalid> a2:203 a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016D4C:
	branch a5_7 != 198 l0000000000016BC0
// DataOut: a4 a5 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:<invalid> a2:255 a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016D54:
	a4_102 = 0x0000000000011650
	branch (a4_41 & 254) != 18 l0000000000016BE0
// DataOut: a4 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:198 a2:255 a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016D68:
	a4_102 = 0x0000000000011738
// DataOut: a4 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:0x0000000000011650 a3:18 a2:255 a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016D20:
	a4_102 = 0x0000000000011710
	branch (a4_41 & 255) != a5_7 l0000000000016BE0
// DataOut: a0 a2 a4 a6 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:<invalid> a2:255 a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016D2C:
	a4_102 = 0x0000000000011710
	branch (a2_63 & 255) != a2_95 l0000000000016BE0
// DataOut: a0 a2 a4 a6 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:0x0000000000011710 a3:<invalid> a2:255 a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016D38:
	branch (a0_6 & a2_95) != (a2_63 & 255) l0000000000016BE0
// DataOut: a4 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:0x0000000000011710 a3:<invalid> a2:255 a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016D40:
	a4_102 = 0x0000000000011720
// DataOut: a4 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:0x0000000000011710 a3:<invalid> a2:255 a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016C84:
	branch (a4_41 & 255) != 0x0000000000000000 l0000000000016BC0
// DataOut: a5 a6 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:<invalid> a2:203 a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016C88:
	branch (a2_63 & 255) != 113 l0000000000016BC0
// DataOut: a5 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:<invalid> a2:203 a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016C90:
	a4_102 = 0x00000000000116C0
// DataOut: a4 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:113 a3:<invalid> a2:203 a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016BF8:
	branch ((a4_41 | a2_63) & 255) == 0x0000000000000000 l0000000000016CD0
// DataOut: a3 a5 a6 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016CD0:
	a4_102 = 0x0000000000011660
// DataOut: a4 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016C04:
	branch (a4_41 & 255) == 2 l0000000000016CDC
// DataOut: a3 a5 a6 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016CDC:
	branch (a2_63 & 255) != 0x0000000000000000 l0000000000016BC0
// DataOut: a5 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:2 a3:<invalid> a2:<invalid> a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016CE0:
	a4_102 = 0x0000000000011680
// DataOut: a4 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:2 a3:<invalid> a2:<invalid> a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016C0C:
	branch (a4_41 & 255) == 51 l0000000000016C9C
// DataOut: a3 a5 a6 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:2 a3:<invalid> a2:<invalid> a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016C9C:
	branch (a2_63 & 255) != 100 l0000000000016BC0
// DataOut: a5 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:51 a3:<invalid> a2:<invalid> a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016CA4:
	a4_102 = 0x00000000000116A0
// DataOut: a4 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:100 a3:<invalid> a2:<invalid> a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016C14:
	branch (a4_41 & 255) == 88 l0000000000016CB0
// DataOut: a3 a5 a6 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:51 a3:<invalid> a2:<invalid> a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016CB0:
	branch (a2_63 & 255) == 99 l0000000000016D00
// DataOut: a5 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:88 a3:<invalid> a2:<invalid> a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016D00:
	a4_102 = 0x00000000000116E0
// DataOut: a4 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:99 a3:<invalid> a2:<invalid> a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016C1C:
	branch (a4_41 & 255) == 52 l0000000000016CEC
// DataOut: a3 a5 a6 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:88 a3:<invalid> a2:<invalid> a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016CEC:
	branch (a2_63 & 255) != 193 l0000000000016BC0
// DataOut: a5 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:52 a3:<invalid> a2:<invalid> a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016CF4:
	a4_102 = 0x0000000000011708
// DataOut: a4 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:193 a3:<invalid> a2:<invalid> a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016C24:
	branch (a4_41 & 255) != 168 l0000000000016BC0
// DataOut: a5 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:52 a3:<invalid> a2:<invalid> a1:192 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016BB4:
	branch (a4_41 & 240) == 16 l0000000000016C2C
// DataOut: a5 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:172 a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016C2C:
	return 0x0000000000011608
// DataOut: a0 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:<invalid> a0:<invalid> a2:<invalid> a1:<invalid> a6:<invalid> -8(fp):ra

l0000000000016BC0:
	branch 15 <u (int64) ((word32) a5_7 + -224) l0000000000016CB8
// DataOut: a5 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016CB8:
	branch (a5_7 & 240) == 240 l0000000000016D0C
	branch (a5_7 & 240 & 240) == 240 l0000000000016D0C
// DataOut: gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016D0C:
	a4_102 = 0x0000000000011710
// DataOut: a4 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:240 a3:<invalid> a2:<invalid> a1:<invalid> a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016CC4:
	a4_102 = 0x0000000000011650
// DataOut: a4 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:240 a3:<invalid> a2:<invalid> a1:<invalid> a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016BCC:
	a4_102 = 0x0000000000011748
// DataOut: a4 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:15 a2:<invalid> a1:<invalid> a6:<invalid> a0:<invalid> -8(fp):ra

l0000000000016BE0:
	return a4_102
// DataOut: a0 gp s0 s10 s3 s5 s6 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -16 a5:<invalid> a4:<invalid> a3:<invalid> a0:<invalid> a2:<invalid> a1:<invalid> a6:<invalid> -8(fp):ra

fn0000000000016B68_exit:
// DataOut: a0
// DataOut (flags): 
// SymbolicIn: sp:fp a5:<invalid> a4:<invalid> ra:ra a0:<invalid> a3:<invalid> a2:<invalid> a1:<invalid> a6:<invalid> -8(fp):ra



word64 fn0000000000016D74(word64 ra, word64 gp, word64 s0, word64 a0, word64 a1, word64 a2, word64 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 a1 a2 a3 gp ra s0
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 fa3 fa4 fa5 ra s0 s1 s2 s3 s4 s5 s6 s7 s8 sp t1 t3 t4 t5 t6
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 s7 s8 sp
fn0000000000016D74_entry:
	def fp
	def s7
	def gp
// DataOut: a0 a1 a2 a3 gp ra s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64) Local -01B8(64)

l0000000000016D74:
	sp_1 = fp
	sp_2 = fp + -448
	qwLoc48_4 = s7
	a5 = Mem0[-1936:word64]
	qwLoc40 = s6
	s6 = a2
	qwLoc18 = s1
	qwLoc38 = s5
	s1 = a0
	a2 = 200
	s5 = a1
	a0 = s6
	a1 = 0
	qwLoc50 = s8
	qwLoc08 = ra
	qwLoc10 = s0
	qwLoc20 = s2
	qwLoc28 = s3
	qwLoc30 = s4
	s8 = a3
	qwLoc58 = a5
	memset()
	a2 = fp + -440
	a1 = s1
	a0 = 2
	inet_pton()
	branch 0x0000000000000000 >= a0 l0000000000016E60
// DataOut: gp ra s0 s1 s10 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64) Local -01B8(64)

l0000000000016E60:
	a5 = (word64) Mem0[gp + -2028:int32]
	branch a5 != 0x0000000000000000 l0000000000016E20
// DataOut: gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:<invalid> s6:a2 s1:a0 a2:fp + -440 s5:a1 a0:2 a1:a2 s8:a3 t3:<invalid> t1:<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016E68:
	a0 = Mem0[gp + -1920:word64]
	a2 = 0x0000000000011000
	a3 = s1
	a2 = 0x0000000000011788
	a1 = 1
	__fprintf_chk()
	a0 = -1
// DataOut: a0 gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:(word64) Mem0[gp + -2028:int32] s6:a2 s1:a0 a2:fp + -440 s5:a1 a0:2 a1:a2 s8:a3 t3:<invalid> t1:<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016DDC:
	branch s5 < 0x0000000000000000 l0000000000016E88
// DataOut: gp ra s0 s1 s10 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:<invalid> s6:a2 s1:a0 a2:fp + -440 s5:a1 a0:2 a1:a2 s8:a3 t3:<invalid> t1:<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -01B8(64)

l0000000000016E88:
	a5 = s8 << 0x0000000D
	s5 = 32
	branch a5 >= 0x0000000000000000 l0000000000016EBC
// DataOut: gp ra s0 s10 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:<invalid> s6:a2 s1:a0 a2:fp + -440 s5:a1 a0:2 a1:a2 s8:a3 t3:<invalid> t1:<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -01B8(64)

l0000000000016E94:
	a0 = (word64) dwLoc01B8
	s5 = 8
	a0 = fn00000000000182B4(a0)
	a5 = (int64) (int32) (a0 >>u 0x00000018)
	branch a0 >= 0x0000000000000000 l0000000000016EBC
// DataOut: a5 gp ra s0 s10 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:a3 << 0x0000000D s6:a2 s1:a0 a2:fp + -440 s5:32 a0:2 a1:a2 s8:a3 t3:<invalid> t1:<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64)

l0000000000016EA8:
	a5 = (int64) ((word32) a5 + -128)
	a4 = 63
	s5 = 24
	branch a4 <u a5 l0000000000016EBC
// DataOut: gp ra s0 s10 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:<invalid> s6:a2 s1:a0 a2:fp + -440 s5:8 a0:<invalid> a1:a2 s8:a3 a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64)

l0000000000016EB8:
	s5 = 16
// DataOut: gp ra s0 s10 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:<invalid> s6:a2 s1:a0 a2:fp + -440 s5:24 a0:<invalid> a1:a2 s8:a3 a3:<invalid> a4:63 t3:<invalid> t1:<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64)

l0000000000016DE0:
	qwLoc0190 = s1
	a0 = s1
	s0 = 3
	s2 = 46
// DataOut: a0 gp ra s0 s10 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:<invalid> s6:a2 s1:a0 a2:fp + -440 s5:a1 a0:2 a1:a2 s8:a3 t3:<invalid> t1:<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64)

l0000000000016DF0:
	a0 = PHI(a0, a0)
	s0 = PHI(s0, s0)
	a1 = s2
	strchr()
	qwLoc0190 = a0
	branch a0 == 0x0000000000000000 l0000000000017194
// DataOut: a0 gp ra s0 s10 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:<invalid> s6:a2 s1:a0 a2:fp + -440 s5:a1 a0:<invalid> a1:<invalid> s8:a3 s0:<invalid> s2:46 t3:<invalid> t1:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64)

l0000000000017194:
	s4 = 0x0000000000011000
	s3 = 1
	s2 = -1
// DataOut: gp ra s0 s10 s2 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:<invalid> s6:a2 s1:a0 a2:fp + -440 s5:a1 a0:<invalid> a1:46 s8:a3 s0:<invalid> s2:46 t3:<invalid> t1:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64)

l00000000000171A0:
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	a3 = s1
	a2 = 0x00000000000117A8
	a1 = s3
	a0 = fp + -400
	__asprintf_chk()
	branch fp + -400 == s2 l00000000000172BC
// DataOut: gp ra s0 s10 s2 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:<invalid> s6:a2 s1:<invalid> a2:<invalid> s5:a1 a0:<invalid> a1:<invalid> s8:a3 s0:<invalid> s2:-1 t3:<invalid> t1:<invalid> s4:0x0000000000011000 s3:1 a3:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64)

l00000000000172BC:
	a0 = Mem0[gp + -1920:word64]
	a3 = 613
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:<invalid> s6:a2 s1:<invalid> a2:0x00000000000117A8 s5:a1 a0:fp + -400 a1:1 s8:a3 s0:<invalid> s2:-1 t3:<invalid> t1:<invalid> s4:0x0000000000011000 s3:1 a3:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000171B8:
	s0 = (int64) ((word32) s0 + -1)
	s1 = qwLoc0190
	branch s0 != 0x0000000000000000 l00000000000171A0
// DataOut: gp ra s0 s10 s2 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:<invalid> s6:a2 s1:<invalid> a2:0x00000000000117A8 s5:a1 a0:fp + -400 a1:1 s8:a3 s0:<invalid> s2:-1 t3:<invalid> t1:<invalid> s4:0x0000000000011000 s3:1 a3:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64)

l00000000000171C4:
// DataOut: gp ra s0 s10 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:<invalid> s6:a2 s1:<invalid> a2:0x00000000000117A8 s5:a1 a0:fp + -400 a1:1 s8:a3 s0:<invalid> s2:-1 t3:<invalid> t1:<invalid> s4:0x0000000000011000 s3:1 a3:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64)

l0000000000016E00:
	a0 = a0 + 1
	qwLoc0190 = a0
	s0 = (int64) ((word32) s0 + -1)
	branch s0 != 0x0000000000000000 l0000000000016DF0
// DataOut: a0 gp ra s0 s10 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:<invalid> s6:a2 s1:a0 a2:fp + -440 s5:a1 a0:<invalid> a1:46 s8:a3 s0:<invalid> s2:46 t3:<invalid> t1:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64)

l0000000000016E10:
	qwLoc0190 = PHI(qwLoc0190, qwLoc0190)
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	a3 = PHI(a3, a3)
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	s2 = PHI(s2, s2)
	s3 = PHI(s3, s3)
	s4 = PHI(s4, s4)
	a5 = 32
	branch a5 >= s5 l0000000000016EBC
// DataOut: gp ra s0 s10 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:<invalid> s6:a2 s1:<invalid> a2:<invalid> s5:a1 a0:<invalid> a1:<invalid> s8:a3 s0:<invalid> s2:<invalid> t3:<invalid> t1:<invalid> s4:0x0000000000011000 s3:1 a3:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64)

l0000000000016EBC:
	qwLoc0190 = PHI(qwLoc0190, qwLoc0190, qwLoc0190, qwLoc0190, qwLoc0190)
	a4 = PHI(a4, a4, a4, a4, a4)
	a5 = PHI(a5, a5, a5, a5, a5)
	s0 = PHI(s0, s0, s0, s0, s0)
	s1 = PHI(s1, s1, s1, s1, s1)
	s2 = PHI(s2, s2, s2, s2, s2)
	s3 = PHI(s3, s3, s3, s3, s3)
	s4 = PHI(s4, s4, s4, s4, s4)
	s5 = PHI(s5, s5, s5, s5, s5)
	a3 = 47
	a2 = fp + -392
	a1 = fp + -440
	a0 = 2
	inet_ntop()
	branch a0 == 0x0000000000000000 l0000000000017074
// DataOut: a1 gp ra s0 s10 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:<invalid> s6:a2 s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> s0:<invalid> s2:<invalid> s4:0x0000000000011000 s3:1 -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64)

l0000000000016ED4:
	a0 = fp + -392
	__strdup()
	Mem0[s6:word64] = fp + -392
	a0 = s5
	ra = fn0000000000016830(ra, gp, s0, a0, a1, out sp, out s0, out a0)
	Mem0[sp + 16:word32] = a0
	a3 = 16
	a2 = sp + 56
	a1 = sp + 16
	a0 = 2
	Mem0[sp + 56:word64] = 0x0000000000000000
	Mem0[sp + 64:word64] = 0x0000000000000000
	Mem0[sp + 72:word64] = 0x0000000000000000
	Mem0[sp + 80:word64] = 0x0000000000000000
	Mem0[sp + 88:word64] = 0x0000000000000000
	Mem0[sp + 96:word32] = 0x0000000000000000
	Mem0[sp + 100:word16] = 0x0000000000000000
	Mem0[sp + 102:byte] = 0x0000000000000000
	inet_ntop()
	branch a0 == 0x0000000000000000 l0000000000017300
// DataOut: a1 gp ra s10 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:<invalid> s6:a2 s1:<invalid> a2:fp + -392 s5:<invalid> a0:2 a1:fp + -440 s8:a3 a3:47 a4:<invalid> t3:<invalid> t1:<invalid> s0:<invalid> s2:<invalid> s4:0x0000000000011000 s3:1 -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017300:
	a0 = Mem0[gp + -1920:word64]
	a3 = 644
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:a2 s1:<invalid> a2:<invalid> s5:<invalid> a0:2 a1:<invalid> s8:a3 a3:16 a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s2:<invalid> s4:0x0000000000011000 s3:1 -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016F24:
	a0 = sp + 56
	__strdup()
	Mem0[s6 + 48:word64] = a0
	s0 = (word64) Mem0[sp + 8:int32]
	Mem0[s6 + 160:word32] = s5
	a0 = s5
	ra = fn0000000000016830(ra, gp, s0, a0, a1, out sp, out s0, out a0)
	a5 = a0 ^ -1
	a5 = a5 | s0
	a3 = 16
	a2 = sp + 56
	a1 = sp + 32
	a0 = 2
	Mem0[sp + 32:word32] = a5
	Mem0[sp + 56:word64] = 0x0000000000000000
	Mem0[sp + 64:word64] = 0x0000000000000000
	Mem0[sp + 72:word64] = 0x0000000000000000
	Mem0[sp + 80:word64] = 0x0000000000000000
	Mem0[sp + 88:word64] = 0x0000000000000000
	Mem0[sp + 96:word32] = 0x0000000000000000
	Mem0[sp + 100:word16] = 0x0000000000000000
	Mem0[sp + 102:byte] = 0x0000000000000000
	inet_ntop()
	branch a0 == 0x0000000000000000 l00000000000172F4
// DataOut: a1 gp ra s10 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:a2 s1:<invalid> a2:<invalid> s5:<invalid> a0:2 a1:<invalid> s8:a3 a3:16 a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s2:<invalid> s4:0x0000000000011000 s3:1 -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000172F4:
	a0 = Mem0[gp + -1920:word64]
	a3 = 655
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:a2 s1:<invalid> a2:<invalid> s5:<invalid> a0:2 a1:<invalid> s8:a3 a3:16 a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s2:<invalid> s4:0x0000000000011000 s3:1 -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016F84:
	a0 = sp + 56
	__strdup()
	Mem0[s6 + 40:word64] = a0
	s0 = (word64) Mem0[sp + 8:int32]
	a0 = s5
	ra = fn0000000000016830(ra, gp, s0, a0, a1, out sp, out s0, out a0)
	a3 = (word64) Mem0[sp + 32:int32]
	s0 = a0 & s0
	a2 = s0
	a1 = s5
	a0 = s0
	Mem0[sp + 24:word32] = s0
	a0 = fn0000000000017F04(gp, a0, a1, a2, a3)
	Mem0[s6 + 24:word64] = a0
	a3 = 16
	a2 = sp + 56
	a1 = sp + 24
	a0 = 2
	Mem0[sp + 56:word64] = 0x0000000000000000
	Mem0[sp + 64:word64] = 0x0000000000000000
	Mem0[sp + 72:word64] = 0x0000000000000000
	Mem0[sp + 80:word64] = 0x0000000000000000
	Mem0[sp + 88:word64] = 0x0000000000000000
	Mem0[sp + 96:word32] = 0x0000000000000000
	Mem0[sp + 100:word16] = 0x0000000000000000
	Mem0[sp + 102:byte] = 0x0000000000000000
	inet_ntop()
	branch a0 == 0x0000000000000000 l00000000000172DC
// DataOut: gp s10 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:a2 s1:<invalid> a2:<invalid> s5:<invalid> a0:2 a1:<invalid> s8:a3 a3:16 a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s2:<invalid> s4:0x0000000000011000 s3:1 -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016FF4:
	a0 = sp + 56
	__strdup()
	s0 = (word64) Mem0[sp + 24:int32]
	Mem0[s6 + 32:word64] = a0
	s3 = a0
	a0 = s0
	a0 = fn0000000000016B68(a0)
	Mem0[s6 + 184:word64] = a0
	a0 = s0
	a0 = fn00000000000182B4(a0)
	a5 = (int64) (int32) (a0 >>u 0x00000018)
	branch a0 >= 0x0000000000000000 l0000000000017098
// DataOut: a5 gp s0 s10 s3 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:2 a1:<invalid> s8:a3 a3:16 a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s2:<invalid> a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> s3:1 t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017098:
	a5 = 0x0000000000011000
	a5 = 0x0000000000011758
// DataOut: a5 gp s0 s10 s3 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:<invalid> a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017024:
	a4 = (int64) ((word32) a5 + -128)
	a3 = 63
	branch a3 >=u a4 l000000000001727C
// DataOut: a5 gp s0 s10 s3 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:<invalid> a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001727C:
	a5 = 0x0000000000011000
	a5 = 0x0000000000011760
// DataOut: a5 gp s0 s10 s3 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 a3:63 a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:<invalid> a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017030:
	a4 = (int64) ((word32) a5 + -192)
	a3 = 31
	branch a3 >=u a4 l00000000000172A4
// DataOut: a5 gp s0 s10 s3 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 a3:63 a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:<invalid> a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000172A4:
	a5 = 0x0000000000011000
	a5 = 0x0000000000011768
// DataOut: a5 gp s0 s10 s3 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 a3:31 a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:<invalid> a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001703C:
	a5 = (int64) ((word32) a5 + -224)
	a4 = 14
	branch a4 <u a5 l00000000000172B0
// DataOut: gp s0 s10 s3 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 a3:31 a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:<invalid> a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000172B0:
	a5 = 0x0000000000011000
	a5 = 0x0000000000011778
// DataOut: a5 gp s0 s10 s3 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 a3:31 a4:14 t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:<invalid> a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017048:
	a5 = 0x0000000000011000
	a5 = 0x0000000000011770
// DataOut: a5 gp s0 s10 s3 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 a3:31 a4:14 t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:<invalid> a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000170A0:
	a4 = PHI(a4, a4, a4, a4, a4)
	a5 = PHI(a5, a5, a5, a5, a5)
	a3 = PHI(a3, a3, a3, a3, a3)
	Mem0[s6 + 192:word64] = a5
	s2 = 32
	branch s5 == s2 l0000000000017158
// DataOut: gp s0 s10 s2 s3 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:<invalid> a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017158:
	a5 = 0x0000000000011000
	Mem0[s6 + 168:word64] = s3
	Mem0[s6 + 176:word64] = s3
	a4 = s6 + 96
	a5 = 0x0000000000011780
// DataOut: a4 a5 gp s10 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:32 a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000170AC:
	Mem0[sp + 40:word32] = s0
	a5 = 31
	branch s5 == a5 l0000000000017210
// DataOut: gp s0 s10 s2 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:32 a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017210:
	a3 = 16
	a2 = sp + 56
	a1 = sp + 40
	a0 = 2
	inet_ntop()
	branch a0 == 0x0000000000000000 l00000000000172E8
// DataOut: gp s10 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:31 s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:32 a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017228:
	a0 = sp + 56
	__strdup()
	a5 = (word64) Mem0[sp + 16:int32]
	a4 = (word64) Mem0[sp + 24:int32]
	Mem0[s6 + 168:word64] = a0
	a5 = a5 ^ -1
	a5 = a5 | a4
	a3 = 47
	a2 = sp + 56
	a1 = sp + 48
	a0 = 2
	Mem0[sp + 48:word32] = a5
	inet_ntop()
	branch a0 == 0x0000000000000000 l0000000000017074
// DataOut: gp s10 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:31 s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:2 a1:<invalid> s8:a3 a3:16 a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:32 a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017260:
	a0 = sp + 56
	__strdup()
	a5 = 0x0000000000012000
	Mem0[s6 + 176:word64] = a0
	a4 = s6 + 96
	a5 = 0x0000000000012660
// DataOut: a4 a5 gp s10 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:2 a1:<invalid> s8:a3 a3:47 a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:32 a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001716C:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a4 = PHI(a4, a4)
	a5 = PHI(a5, a5)
	a0 = PHI(a0, a0)
	a3 = (word64) Mem0[a5:byte]
	Mem0[a4:byte] = a3
	a5 = (word64) Mem0[a5 + 1:byte]
	Mem0[a4 + 1:byte] = a5
// DataOut: gp s10 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:32 a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000170B8:
	a5 = 0x0000000001000000
	s0 = s0 | 0x0000000001000000
	a3 = 16
	a2 = sp + 56
	a1 = sp + 40
	a0 = 2
	Mem0[sp + 40:word32] = s0
	inet_ntop()
	branch a0 == 0x0000000000000000 l00000000000172E8
// DataOut: gp s10 s2 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:31 s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:32 a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000172E8:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a5 = PHI(a5, a5)
	s0 = PHI(s0, s0)
	a0 = Mem0[gp + -1920:word64]
	a3 = 684
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:2 a1:<invalid> s8:a3 a3:16 a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:32 a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000172C4:
	qwLoc0190 = PHI(qwLoc0190, qwLoc0190, qwLoc0190, qwLoc0190)
	a4 = PHI(a4, a4, a4, a4)
	a5 = PHI(a5, a5, a5, a5)
	a0 = PHI(a0, a0, a0, a0)
	a3 = PHI(a3, a3, a3, a3)
	ra = PHI(ra, ra, ra, ra)
	s0 = PHI(s0, s0, s0, s0)
	s1 = PHI(s1, s1, s1, s1)
	s2 = PHI(s2, s2, s2, s2)
	s3 = PHI(s3, s3, s3, s3)
	s4 = PHI(s4, s4, s4, s4)
	s5 = PHI(s5, s5, s5, s5)
	sp = PHI(sp, sp, sp, sp)
	a2 = 0x0000000000011000
	a2 = 0x00000000000117B0
	a1 = 1
	__fprintf_chk()
	abort()
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s2:<invalid> s4:<invalid> s3:<invalid> a6:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000170DC:
	a0 = sp + 56
	__strdup()
	a5 = (word64) Mem0[sp + 16:int32]
	Mem0[s6 + 168:word64] = a0
	a0 = (word64) Mem0[sp + 24:int32]
	a5 = a5 ^ -1
	a0 = a5 | a0
	a0 = fn00000000000182B4(a0)
	a0 = (int64) ((word32) a0 + -1)
	a0 = fn00000000000182B4(a0)
	Mem0[sp + 48:word32] = a0
	a3 = 47
	a2 = sp + 56
	a1 = sp + 48
	a0 = 2
	inet_ntop()
	branch a0 == 0x0000000000000000 l0000000000017074
// DataOut: gp s10 s2 s5 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:0x0000000001000000 s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:2 a1:<invalid> s8:a3 a3:16 a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:32 a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017074:
	a2 = PHI(a2, a2, a2)
	a1 = PHI(a1, a1, a1)
	a4 = PHI(a4, a4, a4)
	a0 = PHI(a0, a0, a0)
	a3 = PHI(a3, a3, a3)
	ra = PHI(ra, ra, ra)
	s0 = PHI(s0, s0, s0)
	s2 = PHI(s2, s2, s2)
	s3 = PHI(s3, s3, s3)
	sp = PHI(sp, sp, sp)
	a5 = (word64) Mem0[gp + -2028:int32]
	branch a5 != 0x0000000000000000 l0000000000016E20
// DataOut: gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:2 a1:<invalid> s8:a3 a3:47 a4:<invalid> t3:<invalid> t1:<invalid> s0:<invalid> s2:<invalid> s4:<invalid> s3:<invalid> ra:<invalid> a6:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001707C:
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 43
	a1 = 1
	a0 = 0x00000000000117F8
	fwrite()
// DataOut: gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:(word64) Mem0[gp + -2028:int32] s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:2 a1:<invalid> s8:a3 a3:47 a4:<invalid> t3:<invalid> t1:<invalid> s0:<invalid> s2:<invalid> s4:<invalid> s3:<invalid> ra:<invalid> a6:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017120:
	a0 = sp + 56
	__strdup()
	a2 = 1
	a5 = (int64) (s2 - s5)
	a5 = (int64) (int32) (a2 << a5)
	a3 = 64
	a4 = 0x0000000000012000
	Mem0[s6 + 176:word64] = a0
	a5 = (int64) ((word32) a5 + -2)
	a4 = 0x0000000000011828
	a1 = a3
	a0 = s6 + 96
	__snprintf_chk()
// DataOut: gp s10 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:2 a1:<invalid> s8:a3 a3:47 a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:32 a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001717C:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a4 = PHI(a4, a4)
	a0 = PHI(a0, a0)
	a3 = PHI(a3, a3)
	s0 = PHI(s0, s0)
	a5 = s8 << 0x00000011
	branch a5 < 0x0000000000000000 l0000000000017288
// DataOut: gp s10 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:32 a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017288:
	a0 = (word64) Mem0[sp + 8:int32]
	a4 = s6 + 88
	a3 = s6 + 80
	a2 = s6 + 72
	a1 = s6 + 64
	fn0000000000017B40(gp, a0, a1, a2, a3)
// DataOut: gp s10 s6 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:a3 << 0x00000011 s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:32 a6:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017184:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a4 = PHI(a4, a4)
	a0 = PHI(a0, a0)
	a3 = PHI(a3, a3)
	s8 = s8 & 1
	branch s8 != 0x0000000000000000 l00000000000171C8
// DataOut: gp s10 s6 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:32 fa4:<invalid> fa5:<invalid> a6:<invalid> fa3:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000171C8:
	a1 = sp + 8
	a0 = 2
	a0 = fn00000000000168E4(gp, a0, a1)
	Mem0[s6 + 56:word64] = a0
	branch a0 != 0x0000000000000000 l000000000001718C
// DataOut: gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 & 1 a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:32 fa4:<invalid> fa5:<invalid> a6:<invalid> fa3:<invalid> s4:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000171DC:
	a5 = (word64) Mem0[gp + -2028:int32]
	branch a5 != 0x0000000000000000 l0000000000016E20
// DataOut: gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 & 1 a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:<invalid> a7:<invalid> t5:<invalid> t4:<invalid> a6:0 fa4:<invalid> fa5:<invalid> fa3:<invalid> s4:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000171E4:
	a3 = 0x0000000000012000
	a4 = s1
	a3 = 0x0000000000011830
	a2 = 250
	a1 = 1
	a0 = sp + 104
	__sprintf_chk()
	a0 = sp + 104
	herror()
	a0 = -1
// DataOut: a0 gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:(word64) Mem0[gp + -2028:int32] s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 & 1 a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:<invalid> a7:<invalid> t5:<invalid> t4:<invalid> a6:0 fa4:<invalid> fa5:<invalid> fa3:<invalid> s4:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001718C:
	a1 = PHI(a1, a1)
	a0 = 0
// DataOut: a0 gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:a3 & 1 a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> ra:<invalid> s0:<invalid> s3:<invalid> s2:<invalid> a7:<invalid> t5:<invalid> t4:<invalid> a6:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> s4:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016E18:
	a5 = (word64) Mem0[gp + -2028:int32]
	branch a5 == 0x0000000000000000 l0000000000017054
// DataOut: gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:32 s6:a2 s1:<invalid> a2:<invalid> s5:a1 a0:<invalid> a1:<invalid> s8:a3 s0:<invalid> s2:<invalid> t3:<invalid> t1:<invalid> s4:0x0000000000011000 s3:1 a3:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017054:
	a0 = Mem0[gp + -1920:word64]
	a2 = 0x0000000000011000
	a3 = s5
	a2 = 0x00000000000117D8
	a1 = 1
	__fprintf_chk()
	a0 = -1
// DataOut: a0 gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -448 a5:(word64) Mem0[gp + -2028:int32] s6:a2 s1:<invalid> a2:<invalid> s5:a1 a0:<invalid> a1:<invalid> s8:a3 s0:<invalid> s2:<invalid> t3:<invalid> t1:<invalid> s4:0x0000000000011000 s3:1 a3:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016E20:
	qwLoc0190 = PHI(qwLoc0190, qwLoc0190, qwLoc0190, qwLoc0190, qwLoc0190)
	a2 = PHI(a2, a2, a2, a2, a2)
	a1 = PHI(a1, a1, a1, a1, a1)
	a4 = PHI(a4, a4, a4, a4, a4)
	a5 = PHI(a5, a5, a5, a5, a5)
	a3 = PHI(a3, a3, a3, a3, a3)
	ra = PHI(ra, ra, ra, ra, ra)
	s0 = PHI(s0, s0, s0, s0, s0)
	s1 = PHI(s1, s1, s1, s1, s1)
	s2 = PHI(s2, s2, s2, s2, s2)
	s3 = PHI(s3, s3, s3, s3, s3)
	s4 = PHI(s4, s4, s4, s4, s4)
	s5 = PHI(s5, s5, s5, s5, s5)
	s8 = PHI(s8, s8, s8, s8, s8)
	sp = PHI(sp, sp, sp, sp, sp)
	a0 = -1
// DataOut: a0 gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:(word64) Mem0[gp + -2028:int32] s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:<invalid> t3:<invalid> t1:<invalid> a3:<invalid> a4:<invalid> s0:<invalid> s2:<invalid> s4:<invalid> s3:<invalid> ra:<invalid> a6:<invalid> a7:<invalid> t5:<invalid> t4:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016E24:
	qwLoc0190 = PHI(qwLoc0190, qwLoc0190, qwLoc0190, qwLoc0190, qwLoc0190)
	a2 = PHI(a2, a2, a2, a2, a2)
	a1 = PHI(a1, a1, a1, a1, a1)
	a0 = PHI(a0, a0, a0, a0, a0)
	a3 = PHI(a3, a3, a3, a3, a3)
	ra = PHI(ra, ra, ra, ra, ra)
	s0 = PHI(s0, s0, s0, s0, s0)
	s1 = PHI(s1, s1, s1, s1, s1)
	s2 = PHI(s2, s2, s2, s2, s2)
	s3 = PHI(s3, s3, s3, s3, s3)
	s4 = PHI(s4, s4, s4, s4, s4)
	s5 = PHI(s5, s5, s5, s5, s5)
	s8 = PHI(s8, s8, s8, s8, s8)
	sp = PHI(sp, sp, sp, sp, sp)
	a4 = Mem0[sp + 360:word64]
	a5 = Mem0[gp + -1936:word64]
	branch a4 != a5 l00000000000172D8
// DataOut: a0 gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> s0:<invalid> s2:<invalid> s4:<invalid> s3:<invalid> ra:<invalid> a7:<invalid> t5:<invalid> t4:<invalid> a6:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000172D8:
	qwLoc0190 = PHI(qwLoc0190, qwLoc0190)
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a4 = PHI(a4, a4)
	a5 = PHI(a5, a5)
	a0 = PHI(a0, a0)
	a3 = PHI(a3, a3)
	ra = PHI(ra, ra)
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	s2 = PHI(s2, s2)
	s3 = PHI(s3, s3)
	s4 = PHI(s4, s4)
	s5 = PHI(s5, s5)
	s8 = PHI(s8, s8)
	sp = PHI(sp, sp)
	__stack_chk_fail()
// DataOut: gp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> ra:<invalid> s0:<invalid> s2:<invalid> s4:<invalid> s3:<invalid> a6:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000172DC:
	qwLoc0190 = PHI(qwLoc0190, qwLoc0190)
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a4 = PHI(a4, a4)
	a5 = PHI(a5, a5)
	ra = PHI(ra, ra)
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	s2 = PHI(s2, s2)
	s3 = PHI(s3, s3)
	s4 = PHI(s4, s4)
	s5 = PHI(s5, s5)
	s8 = PHI(s8, s8)
	sp = PHI(sp, sp)
	a0 = Mem0[gp + -1920:word64]
	a3 = 667
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> ra:<invalid> s0:<invalid> s2:<invalid> s4:<invalid> s3:<invalid> a6:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000016E30:
	ra = Mem0[sp + 440:word64]
	s0 = Mem0[sp + 432:word64]
	s1 = Mem0[sp + 424:word64]
	s2 = Mem0[sp + 416:word64]
	s3 = Mem0[sp + 408:word64]
	s4 = Mem0[sp + 400:word64]
	s5 = Mem0[sp + 392:word64]
	s6 = Mem0[sp + 384:word64]
	s7 = Mem0[sp + 376:word64]
	s8 = Mem0[sp + 368:word64]
	sp = sp + 448
	return a0
// DataOut: a0 gp s10
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> s0:<invalid> s2:<invalid> s4:<invalid> s3:<invalid> ra:<invalid> a7:<invalid> t5:<invalid> t4:<invalid> a6:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

fn0000000000016D74_exit:
// DataOut: a0
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s6:<invalid> s1:<invalid> a2:<invalid> s5:<invalid> a0:<invalid> a1:<invalid> s8:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> ra:<invalid> s0:<invalid> s2:<invalid> s3:<invalid> s4:<invalid> s7:<invalid> a7:<invalid> t5:<invalid> t4:<invalid> a6:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -400(fp):<invalid> -88(fp):<invalid> -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra



word64 fn000000000001730C(word64 gp, word64 a0, word64 a1, ptr64 & s3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 a1 gp
// LiveOut: a0 s3
// Trashed: a0 a1 a2 a3 a4 a5 a6 ra s0 s1 s2 s3 sp t1 t3
// Preserved: ra s0 s1 sp
fn000000000001730C_entry:
	def fp
	def s0
	def gp
// DataOut: a0 a1 gp s10 s3 s7
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l000000000001730C:
	sp_1 = fp
	sp_2 = fp + -192
	qwLoc10_4 = s0
	a4 = Mem0[-1936:word64]
	qwLoc08 = ra
	qwLoc18 = s1
	a5 = 128
	qwLoc28 = a4
	branch a5 <u a0 l00000000000173BC
// DataOut: a0 a1 gp s10 s3 s7
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64) Local -0028(64)

l000000000001732C:
	a4 = 8
	qwLocB8 = 0x0000000000000000
	qwLocB0 = 0x0000000000000000
	s1 = a1
	a5 = fp + -184
	a4 = (int64) (a4 - a0)
	a3 = 7
	a2 = -1
	a1 = 255
	branch a0 == 0x0000000000000000 l000000000001736C
// DataOut: a0 a1 a2 a3 a4 a5 gp s10 s3 s7
// DataOut (flags): 
// SymbolicIn: sp:fp + -192 a4:<invalid> a5:128 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0028(64)

l0000000000017354:
	a6 = PHI(a6, a6)
	a4 = PHI(a4, a4)
	a5 = PHI(a5, a5)
	a0 = PHI(a0, a0)
	branch a3 >= a0 l00000000000173C4
// DataOut: a0 a1 a2 a3 a4 a5 gp s10 s3 s7
// DataOut (flags): 
// SymbolicIn: sp:fp + -192 a4:<invalid> a5:<invalid> s1:a1 a3:7 a2:-1 a1:255 a6:<invalid> a0:<invalid> -184(fp):<invalid> -176(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0028(64)

l00000000000173C4:
	a6 = (int64) (int32) (a1 << a4)
	Mem0[a5:byte] = a6
// DataOut: a0 a1 a2 a3 a4 a5 gp s10 s3 s7
// DataOut (flags): 
// SymbolicIn: sp:fp + -192 a4:<invalid> a5:<invalid> s1:a1 a3:7 a2:-1 a1:255 a6:<invalid> a0:<invalid> -184(fp):<invalid> -176(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0028(64)

l0000000000017358:
	Mem0[a5:byte] = a2
// DataOut: a0 a1 a2 a3 a4 a5 gp s10 s3 s7
// DataOut (flags): 
// SymbolicIn: sp:fp + -192 a4:<invalid> a5:<invalid> s1:a1 a3:7 a2:-1 a1:255 a6:<invalid> a0:<invalid> -184(fp):<invalid> -176(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0028(64)

l000000000001735C:
	a6 = PHI(a6, a6)
	a0 = (int64) ((word32) a0 + -8)
	a5 = a5 + 1
	a4 = (int64) ((word32) a4 + 8)
	branch 0x0000000000000000 < a0 l0000000000017354
// DataOut: a0 a1 a2 a3 a4 a5 gp s10 s3 s7
// DataOut (flags): 
// SymbolicIn: sp:fp + -192 a4:<invalid> a5:<invalid> s1:a1 a3:7 a2:-1 a1:255 a6:<invalid> a0:<invalid> -184(fp):<invalid> -176(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0028(64)

l000000000001736C:
	a6 = PHI(a6, a6)
	a4 = PHI(a4, a4)
	a5 = PHI(a5, a5)
	a3 = 128
	a2 = fp + -168
	a1 = fp + -184
	a0 = 10
	inet_ntop()
	branch a0 == 0x0000000000000000 l00000000000173BC
// DataOut: a1 gp s10 s3 s7
// DataOut (flags): 
// SymbolicIn: sp:fp + -192 a4:<invalid> a5:<invalid> s1:a1 a3:7 a2:-1 a1:255 a6:<invalid> a0:<invalid> -184(fp):<invalid> -176(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0028(64)

l00000000000173BC:
	qwLocB8 = PHI(qwLocB8, qwLocB8)
	qwLocB0 = PHI(qwLocB0, qwLocB0)
	a6 = PHI(a6, a6)
	a3 = PHI(a3, a3)
	a2 = PHI(a2, a2)
	a4 = PHI(a4, a4)
	a5 = PHI(a5, a5)
	a1 = PHI(a1, a1)
	s1 = PHI(s1, s1)
	a0 = 0
// DataOut: a0 a1 gp s10 s3 s7
// DataOut (flags): 
// SymbolicIn: sp:fp + -192 a4:<invalid> a5:<invalid> s1:a1 a3:128 a2:fp + -168 a1:fp + -184 a0:10 t3:<invalid> t1:<invalid> a6:<invalid> -184(fp):<invalid> -176(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0028(64)

l0000000000017384:
	a2 = 16
	a1 = fp + -184
	a0 = s1
	memcpy()
	a0 = fp + -168
	__strdup()
// DataOut: a0 a1 gp s10 s3 s7
// DataOut (flags): 
// SymbolicIn: sp:fp + -192 a4:<invalid> a5:<invalid> s1:a1 a3:128 a2:fp + -168 a1:fp + -184 a0:10 t3:<invalid> t1:<invalid> a6:<invalid> -184(fp):<invalid> -176(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0028(64)

l000000000001739C:
	qwLocB8 = PHI(qwLocB8, qwLocB8)
	qwLocB0 = PHI(qwLocB0, qwLocB0)
	a6 = PHI(a6, a6)
	a3 = PHI(a3, a3)
	a2 = PHI(a2, a2)
	a0 = PHI(a0, a0)
	a1 = PHI(a1, a1)
	s1 = PHI(s1, s1)
	a4 = qwLoc28
	a5 = Mem0[gp + -1936:word64]
	branch a4 != a5 l00000000000173D0
// DataOut: a0 a1 gp s10 s3 s7
// DataOut (flags): 
// SymbolicIn: sp:fp + -192 a4:<invalid> a5:<invalid> a0:<invalid> s1:a1 a3:128 a2:<invalid> a1:fp + -184 t3:<invalid> t1:<invalid> a6:<invalid> -184(fp):<invalid> -176(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64)

l00000000000173D0:
	__stack_chk_fail()
	sp = fp + -240
	qwLocD0 = s0
	qwLocC8 = ra
	qwLocD8 = s1
	qwLocE0 = s2
	qwLocE8 = s3
	a5 = 128
	s0 = a0
	s2 = (word64) Mem0[a0:byte]
	s3 = (word64) Mem0[a0 + 1:byte]
	branch fp + -184 == a5 l00000000000174DC
// DataOut: a0 a1 gp s0 s10 s2 s3 s7
// DataOut (flags): 
// SymbolicIn: sp:fp + -192 a4:<invalid> a5:<invalid> a0:<invalid> s1:a1 a3:128 a2:<invalid> a1:fp + -184 t3:<invalid> t1:<invalid> a6:<invalid> -184(fp):<invalid> -176(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000173FC_thunk_fn00000000000174DC:
	sp = fn00000000000174DC(s0, a0, s2, s3, out s0, out a0, out a1, out s2, out s3)
	return a0
// DataOut: a0 gp s10 s3 s7
// DataOut (flags): 
// SymbolicIn: sp:fp + -240 a4:<invalid> a5:128 a0:<invalid> t3:<invalid> t1:<invalid> s0:<invalid> s2:<invalid> s3:<invalid> s1:a1 a3:128 a2:<invalid> a1:fp + -184 a6:<invalid> -232(fp):s3 -224(fp):s2 -216(fp):<invalid> -208(fp):s0 -200(fp):ra -184(fp):<invalid> -176(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000173FC_thunk_fn0000000000017400:
	sp = fn0000000000017400(s0, a0, a1, s2, s3, out s0, out a0, out a1, out s2, out s3)
	return a0
// DataOut: a0 gp s10 s3 s7
// DataOut (flags): 
// SymbolicIn: sp:fp + -240 a4:<invalid> a5:128 a0:<invalid> t3:<invalid> t1:<invalid> s0:<invalid> s2:<invalid> s3:<invalid> s1:a1 a3:128 a2:<invalid> a1:fp + -184 a6:<invalid> -232(fp):s3 -224(fp):s2 -216(fp):<invalid> -208(fp):s0 -200(fp):ra -184(fp):<invalid> -176(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000173A8:
	ra = qwLoc08
	s0 = qwLoc10
	s1 = qwLoc18
	sp = fp
	return a0
// DataOut: a0 gp s10 s3 s7
// DataOut (flags): 
// SymbolicIn: sp:fp + -192 a4:<invalid> a5:<invalid> a0:<invalid> s1:a1 a3:128 a2:<invalid> a1:fp + -184 t3:<invalid> t1:<invalid> a6:<invalid> -184(fp):<invalid> -176(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra

fn000000000001730C_exit:
	qwLocD0 = PHI(qwLocD0, qwLocD0, qwLocD0)
	qwLocC8 = PHI(qwLocC8, qwLocC8, qwLocC8)
	qwLocD8 = PHI(qwLocD8, qwLocD8, qwLocD8)
	qwLocE0 = PHI(qwLocE0, qwLocE0, qwLocE0)
	qwLocE8 = PHI(qwLocE8, qwLocE8, qwLocE8)
	a5 = PHI(a5, a5, a5)
	a0 = PHI(a0, a0, a0)
	a1 = PHI(a1, a1, a1)
	s2 = PHI(s2, s2, s2)
	s3 = PHI(s3, s3, s3)
	ra = PHI(ra, ra, ra)
	s0 = PHI(s0, s0, s0)
	s1 = PHI(s1, s1, s1)
	sp = PHI(sp, sp, sp)
	use s3 (=> s3Out)
// DataOut: a0 s3
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a4:<invalid> a5:<invalid> a0:<invalid> ra:<invalid> s0:<invalid> s1:<invalid> t3:<invalid> t1:<invalid> s2:<invalid> s3:<invalid> a2:<invalid> a1:<invalid> a3:<invalid> a6:<invalid> -232(fp):s3 -224(fp):s2 -216(fp):<invalid> -208(fp):s0 -200(fp):ra -184(fp):<invalid> -176(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):s1 -16(fp):s0 -8(fp):ra



word64 fn00000000000173D4(word64 a0, word64 a1, ptr64 & s0Out, ptr64 & a0Out, ptr64 & s2Out, ptr64 & s3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 a1
// LiveOut: a0 s0 s2 s3 sp
// Trashed: a0 a1 a2 a3 a4 a5 ra s0 s1 s2 s3 sp t1 t3
// Preserved:
fn00000000000173D4_entry:
	def fp
	def s0
	def ra
	def s1
	def s2
	def s3
	def a0
	def Mem0
// DataOut: a0 a1 gp s10 s5 s6 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l00000000000173D4:
	sp_1 = fp
	sp_2 = fp + -48
	qwLoc10_4 = s0
	qwLoc08_6 = ra
	qwLoc18_8 = s1
	qwLoc20_10 = s2
	qwLoc28_12 = s3
	a5_13 = 128
	s0_15 = a0
	s2_17 = (word64) Mem0[a0:byte]
	s3 = (word64) Mem0[1:byte]
	branch a1 == a5 l00000000000173FC_thunk_fn00000000000174DC
// DataOut: a0 a1 gp s0 s10 s2 s3 s5 s6 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000000000173FC_thunk_fn00000000000174DC:
	sp = fn00000000000174DC(s0, a0, s2, s3, out s0, out a0, out a1, out s2, out s3)
	return sp
// DataOut: a0 gp s0 s10 s2 s3 s5 s6 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -48 a5:128 s0:a0 s2:(word64) Mem0[a0:byte] s3:(word64) Mem0[a0 + 1:byte] -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000173FC_thunk_fn0000000000017400:
	sp = fn0000000000017400(s0, a0, a1, s2, s3, out s0, out a0, out a1, out s2, out s3)
	return sp
// DataOut: a0 a1 gp s0 s10 s2 s3 s5 s6 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -48 a5:128 s0:a0 s2:(word64) Mem0[a0:byte] s3:(word64) Mem0[a0 + 1:byte] -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000173FC_thunk_fn0000000000017400:
	sp = fn0000000000017400(s0, a0, a1, s2, s3, out s0, out a0, out a1, out s2, out s3)
	return sp
// DataOut: a0 gp s0 s10 s2 s3 s5 s6 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> s2:<invalid> s3:<invalid> s1:<invalid> a2:<invalid> a1:<invalid> ra:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> a3:<invalid> -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

fn00000000000173D4_exit:
	s0 = PHI(s0, s0, s0)
	a0 = PHI(a0, a0, a0)
	a1 = PHI(a1, a1, a1)
	s2 = PHI(s2, s2, s2)
	s3 = PHI(s3, s3, s3)
	sp = PHI(sp, sp, sp)
	use s0 (=> s0Out)
	use a0 (=> a0Out)
	use s2 (=> s2Out)
	use s3 (=> s3Out)
// DataOut: a0 s0 s2 s3 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> s2:<invalid> s3:<invalid> s1:<invalid> a2:<invalid> a1:<invalid> ra:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> a3:<invalid> -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra



word64 fn0000000000017400(word64 s0, word64 a0, word64 a1, word64 s2, word64 s3, ptr64 & s0Out, ptr64 & a0Out, ptr64 & a1Out, ptr64 & s2Out, ptr64 & s3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 a1 s0 s2 s3
// LiveOut: a0 a1 s0 s2 s3 sp
// Trashed: a0 a1 a2 a3 a4 a5 ra s0 s1 s2 s3 sp t1 t3
// Preserved:
fn0000000000017400_entry:
// DataOut: a0 a1 gp s0 s10 s2 s3 s5 s6 s7 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000017400:
	branch 95 < a1 l0000000000017474
// DataOut: a0 gp s0 s10 s2 s3 s5 s6 s7 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000017474:
// DataOut: a0 gp s0 s10 s2 s3 s5 s6 s7 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:v3 a5:95

l0000000000017478_thunk_fn00000000000174DC:
	word64 s0_29
	word64 a0_30
	word64 a1_31
	word64 s2_32
	word64 s3_33
	return fn00000000000174DC(s0, a0, s2, s3, out s0_29, out a0_30, out a1_31, out s2_32, out s3_33)
// DataOut: a0 a1 gp s0 s10 s2 s3 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 a5:95 s1:0x0000000000010480

l0000000000017404_thunk_fn00000000000174DC:
	word64 s0_20
	word64 a0_21
	word64 a1_22
	word64 s2_23
	word64 s3_24
	return fn00000000000174DC(s0, a0, s2, s3, out s0_20, out a0_21, out a1_22, out s2_23, out s3_24)
// DataOut: a0 a1 gp s0 s10 s2 s3 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 a5:95

fn0000000000017400_exit:
// DataOut: a0 a1 s0 s2 s3 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s1:<invalid> a2:<invalid> a1:<invalid> ra:<invalid> a0:<invalid> s0:<invalid> s2:<invalid> s3:<invalid> t3:<invalid> t1:<invalid> a4:<invalid> a3:<invalid>



word64 fn00000000000174DC(word64 s0, word64 a0, word64 s2, word64 s3, ptr64 & s0Out, ptr64 & a0Out, ptr64 & a1Out, ptr64 & s2Out, ptr64 & s3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 s0 s2 s3
// LiveOut: a0 a1 s0 s2 s3 sp
// Trashed: a0 a1 a2 a3 a4 a5 ra s0 s1 s2 s3 sp t1 t3
// Preserved:
fn00000000000174DC_entry:
// DataOut: a0 gp s0 s10 s2 s3 s5 s6 s7 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(64)

l00000000000174DC:
	memcmp()
	word64 a1_5
	*a1Out = 0x0000000000010880
	branch a0 == 0x0000000000000000 l0000000000017538
// DataOut: a1 gp s0 s10 s2 s3 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000017538:
	word64 a0_108
	*a0Out = 0x0000000000011858
	word64 s0_109
	*s0Out = Mem0[v3 + 32:word64]
	word64 s2_111
	*s2Out = Mem0[v3 + 16:word64]
	word64 s3_112
	*s3Out = Mem0[v3 + 8:word64]
	return v3 + 48
// DataOut: a0 a1 gp s0 s10 s2 s3 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:16 a1:0x0000000000010880 t3:<invalid> t1:<invalid>

l00000000000174F4:
	memcmp()
	word64 a1_25
	*a1Out = 0x0000000000010898
	branch s0 != 0x0000000000000000 l000000000001747C
// DataOut: a1 gp s0 s10 s2 s3 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:16 a1:0x0000000000010880 t3:<invalid> t1:<invalid>

l000000000001747C:
	memcmp()
	word64 a1_47
	*a1Out = 0x00000000000108B0
	branch s0 == 0x0000000000000000 l000000000001755C
// DataOut: a1 gp s0 s10 s2 s3 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:16 a1:0x0000000000010898 a0:s0 t3:<invalid> t1:<invalid>

l000000000001755C:
	word64 a0_100
	*a0Out = 0x0000000000011888
	word64 s0_101
	*s0Out = Mem0[v3 + 32:word64]
	word64 s2_103
	*s2Out = Mem0[v3 + 16:word64]
	word64 s3_104
	*s3Out = Mem0[v3 + 8:word64]
	return v3 + 48
// DataOut: a0 a1 gp s0 s10 s2 s3 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:12 a1:0x00000000000108B0 a0:s0 t3:<invalid> t1:<invalid>

l0000000000017490:
	memcmp()
	word64 a1_50
	*a1Out = 0x00000000000108C0
	branch s0 == 0x0000000000000000 l0000000000017514
// DataOut: a1 gp s0 s10 s2 s3 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:12 a1:0x00000000000108B0 a0:s0 t3:<invalid> t1:<invalid>

l0000000000017514:
	word64 a0_92
	*a0Out = 0x00000000000118A0
	word64 s0_93
	*s0Out = Mem0[v3 + 32:word64]
	word64 s2_95
	*s2Out = Mem0[v3 + 16:word64]
	word64 s3_96
	*s3Out = Mem0[v3 + 8:word64]
	return v3 + 48
// DataOut: a0 a1 gp s0 s10 s2 s3 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:12 a1:0x00000000000108C0 a0:s0 t3:<invalid> t1:<invalid>

l00000000000174A4:
	memcmp()
	word64 a1_53
	*a1Out = 0x00000000000108D0
	branch s0 != 0x0000000000000000 l0000000000017408
// DataOut: a1 gp s10 s2 s3 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:12 a1:0x00000000000108C0 a0:s0 t3:<invalid> t1:<invalid>

l0000000000017408:
	word64 a5_66 = s2 << 0x00000008 | s3
	branch (a5_66 & 0x00000000FFFFE000) == 0x0000000000002000 l0000000000017580
// DataOut: a1 a5 gp s10 s2 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:12 a1:0x00000000000108D0 a0:s0 t3:<invalid> t1:<invalid>

l0000000000017580:
	word64 a0_89
	*a0Out = 0x00000000000118D8
// DataOut: a0 a1 gp s10 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:12 a1:0x00000000000108D0 a0:s0 t3:<invalid> t1:<invalid> a5:s2 << 0x00000008 | s3 a4:(s2 << 0x00000008 | s3) & 0x00000000FFFFE000 a3:0x0000000000002000

l0000000000017420:
	branch (s2 & 254) == 252 l000000000001758C
// DataOut: a1 a5 gp s10 s2 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:12 a1:0x00000000000108D0 a0:s0 t3:<invalid> t1:<invalid> a5:s2 << 0x00000008 | s3 a4:(s2 << 0x00000008 | s3) & 0x00000000FFFFE000 a3:0x0000000000002000

l000000000001758C:
	word64 a0_87
	*a0Out = 0x00000000000118E8
// DataOut: a0 a1 gp s10 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:252 a1:0x00000000000108D0 a0:s0 t3:<invalid> t1:<invalid> a5:s2 << 0x00000008 | s3 a4:s2 & 254 a3:0x0000000000002000

l000000000001742C:
	branch (a5_66 & -64) == 65152 l0000000000017598
// DataOut: a1 a5 gp s10 s2 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:252 a1:0x00000000000108D0 a0:s0 t3:<invalid> t1:<invalid> a5:s2 << 0x00000008 | s3 a4:s2 & 254 a3:0x0000000000002000

l0000000000017598:
	word64 a0_85
	*a0Out = 0x0000000000011900
// DataOut: a0 a1 gp s10 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:(s2 << 0x00000008 | s3) & -64 a1:0x00000000000108D0 a0:s0 t3:<invalid> t1:<invalid> a5:s2 << 0x00000008 | s3 a4:65152 a3:0x0000000000002000

l000000000001743C:
	branch s2 == 255 l00000000000175A4
// DataOut: a1 a5 gp s10 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:(s2 << 0x00000008 | s3) & -64 a1:0x00000000000108D0 a0:s0 t3:<invalid> t1:<invalid> a5:s2 << 0x00000008 | s3 a4:65152 a3:0x0000000000002000

l00000000000175A4:
	word64 a0_83
	*a0Out = 0x0000000000011748
// DataOut: a0 a1 gp s10 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:(s2 << 0x00000008 | s3) & -64 a1:0x00000000000108D0 a0:s0 t3:<invalid> t1:<invalid> a5:s2 << 0x00000008 | s3 a4:255 a3:0x0000000000002000

l0000000000017444:
	word64 a0_79
	*a0Out = 0x0000000000011710
	branch (a5_66 & -2) == 8194 l00000000000175B0
// DataOut: a0 a1 gp s10 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:(s2 << 0x00000008 | s3) & -64 a1:0x00000000000108D0 a0:s0 t3:<invalid> t1:<invalid> a5:s2 << 0x00000008 | s3 a4:255 a3:0x0000000000002000

l00000000000175B0:
	word64 a0_81
	*a0Out = 0x0000000000011918
// DataOut: a0 a1 gp s10 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:(s2 << 0x00000008 | s3) & -64 a1:0x00000000000108D0 a0:0x0000000000011710 t3:<invalid> t1:<invalid> a5:(s2 << 0x00000008 | s3) & -2 a4:255 a3:8194

l00000000000174B8:
	word64 a0_57
	*a0Out = 0x00000000000118B8
	word64 s0_58
	*s0Out = Mem0[v3 + 32:word64]
	word64 s2_60
	*s2Out = Mem0[v3 + 16:word64]
	word64 s3_61
	*s3Out = Mem0[v3 + 8:word64]
	return v3 + 48
// DataOut: a0 a1 gp s0 s10 s2 s3 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:12 a1:0x00000000000108D0 a0:s0 t3:<invalid> t1:<invalid>

l0000000000017508:
	word64 a0_42
	*a0Out = 0x0000000000011870
// DataOut: a0 a1 gp s10 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:16 a1:0x0000000000010898 a0:s0 t3:<invalid> t1:<invalid>

l0000000000017458:
	word64 s0_36
	*s0Out = Mem0[v3 + 32:word64]
	word64 s2_38
	*s2Out = Mem0[v3 + 16:word64]
	word64 s3_39
	*s3Out = Mem0[v3 + 8:word64]
	return v3 + 48
// DataOut: a0 a1 gp s0 s10 s2 s3 s5 s6 s7 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 s1:0x0000000000010480 a2:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> a5:<invalid> a4:<invalid> a3:<invalid>

fn00000000000174DC_exit:
// DataOut: a0 a1 s0 s2 s3 sp
// DataOut (flags): 
// SymbolicIn: sp:v3 + 48 s1:<invalid> a2:<invalid> a1:<invalid> ra:<invalid> a0:<invalid> s0:<invalid> s2:<invalid> s3:<invalid> t3:<invalid> t1:<invalid> a5:<invalid> a4:<invalid> a3:<invalid>



word64 fn00000000000175BC(word64 gp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  gp
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 fa3 fa4 fa5 ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sp t1 t3 t4 t5 t6
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sp
fn00000000000175BC_entry:
	def fp
	def s1
	def gp
// DataOut: gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l00000000000175BC:
	sp_1 = fp
	sp_2 = fp + -416
	qwLoc18_4 = s1
	a5 = Mem0[-1936:word64]
	qwLoc10 = s0
	s0 = a2
	qwLoc20 = s2
	qwLoc30 = s4
	a2 = 200
	s4 = a0
	s2 = a1
	a0 = s0
	a1 = 0
	qwLoc40 = s6
	qwLoc08 = ra
	qwLoc28 = s3
	qwLoc38 = s5
	qwLoc48 = s7
	qwLoc50 = s8
	qwLoc58 = s9
	s6 = a3
	qwLoc68 = a5
	memset()
	a2 = fp + -408
	a1 = s4
	a0 = 10
	inet_pton()
	branch 0x0000000000000000 >= a0 l00000000000177B4
// DataOut: gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l00000000000177B4:
	a5 = (word64) Mem0[gp + -2028:int32]
	branch a5 != 0x0000000000000000 l0000000000017770
// DataOut: gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -416 a5:<invalid> s0:a2 a2:fp + -408 s4:a0 s2:a1 a0:10 a1:a2 s6:a3 t3:<invalid> t1:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000177BC:
	a0 = Mem0[gp + -1920:word64]
	a2 = 0x0000000000012000
	a3 = s4
	a2 = 0x0000000000011920
	a1 = 1
	__fprintf_chk()
	a0 = -1
// DataOut: a0 gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -416 a5:(word64) Mem0[gp + -2028:int32] s0:a2 a2:fp + -408 s4:a0 s2:a1 a0:10 a1:a2 s6:a3 t3:<invalid> t1:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017628:
	a0 = fp + -408
	a0 = fn00000000000163B0(gp, a0)
	s3 = sp + 56
	Mem0[s0 + 8:word64] = a0
	a3 = 250
	a2 = s3
	a1 = sp + 8
	a0 = 10
	inet_ntop()
	branch a0 == 0x0000000000000000 l0000000000017768
// DataOut: gp s0 s10 s2 s3 sp
// DataOut (flags): 
// SymbolicIn: sp:fp + -416 a5:<invalid> s0:a2 a2:fp + -408 s4:a0 s2:a1 a0:10 a1:a2 s6:a3 t3:<invalid> t1:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017650:
	a0 = s3
	__strdup()
	Mem0[s0:word64] = a0
	s5 = 128
	branch s5 < s2 l00000000000177DC
// DataOut: gp s0 s10 s2 s5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:10 a1:<invalid> s6:<invalid> s3:<invalid> a3:250 t3:<invalid> t1:<invalid> a4:<invalid> s1:<invalid> s5:<invalid> s9:<invalid> s7:<invalid> ra:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000177DC:
	a5 = (word64) Mem0[gp + -2028:int32]
	branch a5 != 0x0000000000000000 l0000000000017770
// DataOut: gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:250 t3:<invalid> t1:<invalid> s5:128 a4:<invalid> s1:<invalid> s9:<invalid> s7:<invalid> ra:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000177E4:
	a0 = Mem0[gp + -1920:word64]
	a2 = 0x0000000000012000
	a3 = s2
	a2 = 0x0000000000011940
	a1 = 1
	__fprintf_chk()
	a0 = -1
// DataOut: a0 gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:(word64) Mem0[gp + -2028:int32] s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:250 t3:<invalid> t1:<invalid> s5:128 a4:<invalid> s1:<invalid> s9:<invalid> s7:<invalid> ra:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017664:
	branch s2 < 0x0000000000000000 l0000000000017868
// DataOut: gp s0 s10 s2 s5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:250 t3:<invalid> t1:<invalid> s5:128 a4:<invalid> s1:<invalid> s9:<invalid> s7:<invalid> ra:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017868:
	s2 = s5
// DataOut: gp s0 s10 s5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:250 t3:<invalid> t1:<invalid> s5:128 a4:<invalid> s1:<invalid> s9:<invalid> s7:<invalid> ra:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017668:
	s5 = s2
// DataOut: gp s0 s10 s5 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:250 t3:<invalid> t1:<invalid> s5:128 a4:<invalid> s1:<invalid> s9:<invalid> s7:<invalid> ra:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001766C:
	s2 = PHI(s2, s2)
	s5 = PHI(s5, s5)
	s7 = sp + 24
	Mem0[s0 + 160:word32] = s5
	a1 = s7
	a0 = s5
	a0 = fn000000000001730C(gp, a0, a1, out s3)
	Mem0[s0 + 48:word64] = a0
	branch a0 == 0x0000000000000000 l00000000000178F8
// DataOut: gp s0 s10 s3 s7 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:250 t3:<invalid> t1:<invalid> s5:<invalid> a4:<invalid> s1:<invalid> s9:<invalid> s7:<invalid> ra:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000178F8:
	a5 = (word64) Mem0[gp + -2028:int32]
	branch a5 != 0x0000000000000000 l0000000000017770
// DataOut: gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s9:<invalid> a6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017900:
	a0 = Mem0[gp + -1920:word64]
	a2 = 0x0000000000012000
	a3 = s2
	a2 = 0x0000000000011960
	a1 = 1
	__fprintf_chk()
	a0 = -1
// DataOut: a0 gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:(word64) Mem0[gp + -2028:int32] s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s9:<invalid> a6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017688:
	s8 = sp + 40
	a5 = sp + 8
	s9 = s7
	a2 = s8
	a3 = s7
// DataOut: a2 a3 a5 gp s0 s10 s3 s7 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s9:<invalid> a6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001769C:
	a3 = PHI(a3, a3)
	a2 = PHI(a2, a2)
	a5 = PHI(a5, a5)
	a4 = (word64) Mem0[a5:byte]
	a1 = (word64) Mem0[a3:byte]
	a5 = a5 + 1
	a3 = a3 + 1
	a4 = a4 & a1
	Mem0[a2:byte] = a4
	a2 = a2 + 1
	branch s7 != a5 l000000000001769C
// DataOut: a2 a3 a5 gp s0 s10 s3 s7 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s8:<invalid> s9:<invalid> a6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000176BC:
	a3 = 250
	a2 = s3
	a1 = sp + 40
	a0 = 10
	inet_ntop()
	branch a0 == 0x0000000000000000 l0000000000017768
// DataOut: gp s0 s10 s3 s8 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s8:<invalid> s9:<invalid> a6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000176D4:
	a0 = s3
	__strdup()
	Mem0[s0 + 32:word64] = a0
	a0 = sp + 40
	a0 = fn00000000000163B0(gp, a0)
	Mem0[s0 + 16:word64] = a0
	a1 = s2
	a0 = sp + 40
	sp = fn00000000000173D4(a0, a1, out s0, out a0, out s2, out s3)
	Mem0[s0 + 184:word64] = a0
	a1 = s5
	a0 = sp + 40
	a0 = fn0000000000018118(gp, a0, a1)
	Mem0[s0 + 24:word64] = a0
	a5 = 128
	branch s2 != a5 l0000000000017870
// DataOut: gp s0 s10 s2 s3 s6 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:10 a1:<invalid> s6:<invalid> s3:<invalid> a3:250 t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s8:<invalid> s9:<invalid> a6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017870:
	a0 = s3
	__strdup()
	Mem0[s0 + 168:word64] = a0
// DataOut: gp s0 s10 s2 s3 s6 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:128 s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s8:<invalid> s9:<invalid> t4:<invalid> t5:<invalid> a7:46 a6:<invalid> t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001787C:
	s8 = PHI(s8, s8)
	s9 = PHI(s9, s9)
	a5 = (word64) Mem0[s9:byte]
	a4 = (word64) Mem0[s8:byte]
	s8 = s8 + 1
	a5 = a5 ^ -1
	a5 = a5 | a4
	Mem0[s8 + 4095:byte] = a5
	s9 = s9 + 1
	branch s3 != s8 l000000000001787C
// DataOut: gp s0 s10 s2 s3 s6 s8 s9 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s8:<invalid> s9:<invalid> t4:<invalid> t5:<invalid> a7:46 a6:<invalid> t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001789C:
	a3 = 250
	a2 = s3
	a1 = sp + 40
	a0 = 10
	inet_ntop()
	branch a0 == 0x0000000000000000 l0000000000017768
// DataOut: gp s0 s10 s2 s3 s6 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s8:<invalid> s9:<invalid> t4:<invalid> t5:<invalid> a7:46 a6:<invalid> t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017768:
	a3 = PHI(a3, a3, a3)
	a2 = PHI(a2, a2, a2)
	a1 = PHI(a1, a1, a1)
	a4 = PHI(a4, a4, a4)
	a0 = PHI(a0, a0, a0)
	s0 = PHI(s0, s0, s0)
	s2 = PHI(s2, s2, s2)
	s3 = PHI(s3, s3, s3)
	s5 = PHI(s5, s5, s5)
	s7 = PHI(s7, s7, s7)
	s8 = PHI(s8, s8, s8)
	s9 = PHI(s9, s9, s9)
	sp = PHI(sp, sp, sp)
	a5 = (word64) Mem0[gp + -2028:int32]
	branch a5 == 0x0000000000000000 l0000000000017804
// DataOut: gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:10 a1:<invalid> s6:<invalid> s3:<invalid> a3:250 t3:<invalid> t1:<invalid> a4:<invalid> s1:<invalid> s5:<invalid> s9:<invalid> s7:<invalid> ra:<invalid> s8:<invalid> t4:<invalid> t5:<invalid> a6:<invalid> a7:46 t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017804:
	a3 = Mem0[gp + -1920:word64]
	a0 = 0x0000000000011000
	a2 = 43
	a1 = 1
	a0 = 0x00000000000117F8
	fwrite()
	a0 = -1
// DataOut: a0 gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:(word64) Mem0[gp + -2028:int32] s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:10 a1:<invalid> s6:<invalid> s3:<invalid> a3:250 t3:<invalid> t1:<invalid> a4:<invalid> s1:<invalid> s5:<invalid> s9:<invalid> s7:<invalid> ra:<invalid> s8:<invalid> t4:<invalid> t5:<invalid> a6:<invalid> a7:46 t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000178B4:
	a0 = s3
	__strdup()
	a5 = 128
	Mem0[s0 + 176:word64] = a0
	s2 = (int64) (a5 - s2)
	a0 = s0 + 96
	branch s2 != a5 l0000000000017728
// DataOut: gp s0 s10 s2 s6 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:10 a1:<invalid> s6:<invalid> s3:<invalid> a3:250 t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s8:<invalid> s9:<invalid> t4:<invalid> t5:<invalid> a7:46 a6:<invalid> t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000178D0:
	a3 = 0x0000000000011000
	a3 = 0x00000000000111D0
// DataOut: gp s0 s10 s6 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:128 s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:250 t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s8:<invalid> s9:<invalid> t4:<invalid> t5:<invalid> a7:46 a6:<invalid> t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017714:
	a5 = Mem0[s0 + 32:word64]
	a0 = s0 + 96
	s2 = 0
	Mem0[s0 + 168:word64] = a5
	Mem0[s0 + 176:word64] = a5
// DataOut: gp s0 s10 s2 s6 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:128 s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s8:<invalid> s9:<invalid> t4:<invalid> t5:<invalid> a7:46 a6:<invalid> t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017728:
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a4 = PHI(a4, a4)
	a0 = PHI(a0, a0)
	s2 = PHI(s2, s2)
	s8 = PHI(s8, s8)
	s9 = PHI(s9, s9)
	s2 = s2 << 0x00000000
	a5 = 0x0000000000010000
	s2 = s2 >>u 0x0000001D
	a5 = 0x0000000000010480
	s2 = 0x0000000000010480 + s2
	a3 = Mem0[s2:word64]
// DataOut: gp s0 s10 s6 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s8:<invalid> s9:<invalid> t4:<invalid> t5:<invalid> a7:46 a6:<invalid> t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017740:
	a3 = PHI(a3, a3)
	a4 = PHI(a4, a4)
	a0 = PHI(a0, a0)
	s2 = PHI(s2, s2)
	s8 = PHI(s8, s8)
	s9 = PHI(s9, s9)
	a2 = 0x0000000000012000
	a2 = 0x0000000000011990
	a1 = 64
	snprintf()
	a5 = s6 << 0x00000011
	branch a5 < 0x0000000000000000 l00000000000178DC
// DataOut: gp s0 s10 s6 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s8:<invalid> s9:<invalid> t4:<invalid> t5:<invalid> a7:46 a6:<invalid> t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000178DC:
	a4 = s0 + 88
	a3 = s0 + 80
	a2 = s0 + 72
	a1 = s0 + 64
	a0 = sp + 8
	fn0000000000017D10(gp, a0, a1, a2, a3)
// DataOut: gp s10 s6 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:0x0000000000011990 s4:<invalid> s2:<invalid> a0:<invalid> a1:64 s6:<invalid> s3:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s8:<invalid> s9:<invalid> t4:<invalid> t5:<invalid> a7:46 a6:<invalid> t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017758:
	a3 = PHI(a3, a3)
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a4 = PHI(a4, a4)
	a0 = PHI(a0, a0)
	s6 = s6 & 1
	branch s6 != 0x0000000000000000 l0000000000017824
// DataOut: gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s8:<invalid> s9:<invalid> t4:<invalid> t5:<invalid> a6:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> a7:46 t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017824:
	a1 = sp + 8
	a0 = 10
	a0 = fn00000000000168E4(gp, a0, a1)
	Mem0[s0 + 56:word64] = a0
	branch a0 != 0x0000000000000000 l0000000000017760
// DataOut: gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s8:<invalid> s9:<invalid> t4:<invalid> t5:<invalid> a6:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> a7:46 t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017838:
	a5 = (word64) Mem0[gp + -2028:int32]
	branch a5 != 0x0000000000000000 l0000000000017770
// DataOut: gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s8:<invalid> s9:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> a6:0 fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017840:
	a3 = 0x0000000000012000
	a4 = s4
	a3 = 0x0000000000011830
	a2 = 250
	a1 = 1
	a0 = s3
	__sprintf_chk()
	a0 = s3
	herror()
// DataOut: gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:(word64) Mem0[gp + -2028:int32] s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s8:<invalid> s9:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> a6:0 fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017770:
	a3 = PHI(a3, a3, a3, a3, a3, a3)
	a2 = PHI(a2, a2, a2, a2, a2, a2)
	a1 = PHI(a1, a1, a1, a1, a1, a1)
	a4 = PHI(a4, a4, a4, a4, a4, a4)
	a5 = PHI(a5, a5, a5, a5, a5, a5)
	s0 = PHI(s0, s0, s0, s0, s0, s0)
	s2 = PHI(s2, s2, s2, s2, s2, s2)
	s3 = PHI(s3, s3, s3, s3, s3, s3)
	s5 = PHI(s5, s5, s5, s5, s5, s5)
	s6 = PHI(s6, s6, s6, s6, s6, s6)
	s7 = PHI(s7, s7, s7, s7, s7, s7)
	s8 = PHI(s8, s8, s8, s8, s8, s8)
	s9 = PHI(s9, s9, s9, s9, s9, s9)
	sp = PHI(sp, sp, sp, sp, sp, sp)
	a0 = -1
// DataOut: a0 gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:(word64) Mem0[gp + -2028:int32] s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s5:<invalid> a4:<invalid> s1:<invalid> s9:<invalid> s7:<invalid> ra:<invalid> s8:<invalid> a6:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017760:
	a1 = PHI(a1, a1)
	a0 = 0
// DataOut: a0 gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> s3:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s5:<invalid> s7:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s8:<invalid> s9:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> a6:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017774:
	a3 = PHI(a3, a3, a3, a3, a3, a3)
	a2 = PHI(a2, a2, a2, a2, a2, a2)
	a1 = PHI(a1, a1, a1, a1, a1, a1)
	a0 = PHI(a0, a0, a0, a0, a0, a0)
	s0 = PHI(s0, s0, s0, s0, s0, s0)
	s2 = PHI(s2, s2, s2, s2, s2, s2)
	s3 = PHI(s3, s3, s3, s3, s3, s3)
	s5 = PHI(s5, s5, s5, s5, s5, s5)
	s6 = PHI(s6, s6, s6, s6, s6, s6)
	s7 = PHI(s7, s7, s7, s7, s7, s7)
	s8 = PHI(s8, s8, s8, s8, s8, s8)
	s9 = PHI(s9, s9, s9, s9, s9, s9)
	sp = PHI(sp, sp, sp, sp, sp, sp)
	a4 = Mem0[sp + 312:word64]
	a5 = Mem0[gp + -1936:word64]
	branch a4 != a5 l0000000000017920
// DataOut: a0 gp s10 sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s3:<invalid> s5:<invalid> a4:<invalid> s1:<invalid> s9:<invalid> s7:<invalid> ra:<invalid> s8:<invalid> a6:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017920:
	__stack_chk_fail()
// DataOut: gp s10
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s3:<invalid> a4:<invalid> s5:<invalid> s1:<invalid> s9:<invalid> s7:<invalid> ra:<invalid> s8:<invalid> a6:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017920_thunk_fn0000000000017924:
	a0 = fn0000000000017924(gp)
	return a0
// DataOut: a0 gp s10
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s3:<invalid> a4:<invalid> s5:<invalid> s1:<invalid> s9:<invalid> s7:<invalid> ra:<invalid> s8:<invalid> a6:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017780:
	ra = Mem0[sp + 408:word64]
	s0 = Mem0[sp + 400:word64]
	s1 = Mem0[sp + 392:word64]
	s2 = Mem0[sp + 384:word64]
	s3 = Mem0[sp + 376:word64]
	s4 = Mem0[sp + 368:word64]
	s5 = Mem0[sp + 360:word64]
	s6 = Mem0[sp + 352:word64]
	s7 = Mem0[sp + 344:word64]
	s8 = Mem0[sp + 336:word64]
	s9 = Mem0[sp + 328:word64]
	sp = sp + 416
	return a0
// DataOut: a0 gp s10
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s3:<invalid> a4:<invalid> s5:<invalid> s1:<invalid> s9:<invalid> s7:<invalid> ra:<invalid> s8:<invalid> a6:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

fn00000000000175BC_exit:
	a0 = PHI(a0, a0)
	ra = PHI(ra, ra)
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	s2 = PHI(s2, s2)
	s3 = PHI(s3, s3)
	s4 = PHI(s4, s4)
	s5 = PHI(s5, s5)
	s6 = PHI(s6, s6)
	s7 = PHI(s7, s7)
	s8 = PHI(s8, s8)
	s9 = PHI(s9, s9)
	sp = PHI(sp, sp)
// DataOut: a0
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> a2:<invalid> s4:<invalid> s2:<invalid> a0:<invalid> a1:<invalid> s6:<invalid> a3:<invalid> t3:<invalid> t1:<invalid> s3:<invalid> a4:<invalid> ra:<invalid> s1:<invalid> s5:<invalid> s7:<invalid> s8:<invalid> s9:<invalid> a6:<invalid> t4:<invalid> t5:<invalid> a7:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> t6:<invalid> -104(fp):<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra



word64 fn0000000000017924(word64 gp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  gp
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6 t1 t3
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sp
fn0000000000017924_entry:
	def fp
	def s2
	def gp
// DataOut: gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l0000000000017924:
	sp_1 = fp
	sp_2 = fp + -96
	qwLoc20_4 = s2
	a5 = Mem0[-2016:word64]
	qwLoc18 = s1
	qwLoc08 = ra
	qwLoc10 = s0
	qwLoc28 = s3
	qwLoc30 = s4
	qwLoc38 = s5
	qwLoc40 = s6
	qwLoc48 = s7
	qwLoc50 = s8
	qwLoc58 = s9
	branch a5 == 0x0000000000000000 l00000000000179B8
// DataOut: gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000000000179B8:
	s0 = (word64) Mem0[gp + -2024:int32]
	branch s0 != 0x0000000000000000 l000000000001795C
// DataOut: gp s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a5:<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000179C0:
	s4 = 0x0000000000013000
	a1 = 1
	a0 = 0x0000000000012A38
	dlopen()
	Mem0[gp + 2080:word64] = 0x0000000000012A38
	s3 = 0x0000000000012A38
	branch 0x0000000000012A38 == 0x0000000000000000 l0000000000017B14
// DataOut: gp s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a5:<invalid> s0:(word64) Mem0[gp + -2024:int32] -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017B14:
	a3 = 256
	a4 = 0x0000000000013000
	a5 = 0x0000000000012A38
	a4 = 0x0000000000012A58
	a2 = 1
	a1 = a3
	a0 = gp + -800
	s0 = -1
	__snprintf_chk()
	Mem0[gp + 2072:word32] = s0
// DataOut: gp s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a5:<invalid> s0:(word64) Mem0[gp + -2024:int32] s4:0x0000000000013000 a1:1 a0:0x0000000000012A38 t3:<invalid> t1:<invalid> s3:0x0000000000012A38 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000179DC:
	a1 = 0x0000000000013000
	a1 = 0x0000000000012A78
	dlsym()
	a1 = 0x0000000000013000
	Mem0[gp + 2152:word64] = 0x0000000000012A38
	a1 = 0x0000000000012A90
	a0 = 0x0000000000012A38
	dlsym()
	a1 = 0x0000000000013000
	s2 = 0x0000000000012A38
	a1 = 0x0000000000012AA0
	a0 = 0x0000000000012A38
	Mem0[gp + 2144:word64] = 0x0000000000012A38
	dlsym()
	a1 = 0x0000000000013000
	s4 = 0x0000000000012A38
	a1 = 0x0000000000012AC0
	a0 = 0x0000000000012A38
	Mem0[gp + 2136:word64] = 0x0000000000012A38
	dlsym()
	a1 = 0x0000000000013000
	s5 = 0x0000000000012A38
	a1 = 0x0000000000012AD0
	a0 = 0x0000000000012A38
	Mem0[gp + 2120:word64] = 0x0000000000012A38
	dlsym()
	a1 = 0x0000000000013000
	s6 = 0x0000000000012A38
	a1 = 0x0000000000012AE8
	a0 = 0x0000000000012A38
	Mem0[gp + 2112:word64] = 0x0000000000012A38
	dlsym()
	a1 = 0x0000000000013000
	s7 = 0x0000000000012A38
	a1 = 0x0000000000012B00
	a0 = 0x0000000000012A38
	Mem0[gp + 2104:word64] = 0x0000000000012A38
	dlsym()
	a1 = 0x0000000000013000
	s8 = 0x0000000000012A38
	a1 = 0x0000000000012B18
	a0 = 0x0000000000012A38
	Mem0[gp + 2096:word64] = 0x0000000000012A38
	dlsym()
	a1 = 0x0000000000013000
	s9 = 0x0000000000012A38
	a1 = 0x0000000000012B38
	a0 = 0x0000000000012A38
	Mem0[gp + 2088:word64] = 0x0000000000012A38
	dlsym()
	Mem0[gp + 2128:word64] = 0x0000000000012A38
	branch 0x0000000000012A38 == 0x0000000000000000 l0000000000017ACC
// DataOut: gp s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a5:<invalid> s0:(word64) Mem0[gp + -2024:int32] s4:0x0000000000013000 a1:1 a0:0x0000000000012A38 t3:<invalid> t1:<invalid> s3:0x0000000000012A38 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017AAC:
	branch 0x0000000000012A38 == 0x0000000000000000 l0000000000017ACC
// DataOut: gp s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a5:<invalid> s0:(word64) Mem0[gp + -2024:int32] s4:0x0000000000012A38 a1:0x0000000000012B38 a0:0x0000000000012A38 t3:<invalid> t1:<invalid> s3:0x0000000000012A38 s2:0x0000000000012A38 s5:0x0000000000012A38 s6:0x0000000000012A38 s7:0x0000000000012A38 s8:0x0000000000012A38 s9:0x0000000000012A38 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017AB0:
	branch 0x0000000000012A38 == 0x0000000000000000 l0000000000017ACC
// DataOut: gp s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a5:<invalid> s0:(word64) Mem0[gp + -2024:int32] s4:0x0000000000012A38 a1:0x0000000000012B38 a0:0x0000000000012A38 t3:<invalid> t1:<invalid> s3:0x0000000000012A38 s2:0x0000000000012A38 s5:0x0000000000012A38 s6:0x0000000000012A38 s7:0x0000000000012A38 s8:0x0000000000012A38 s9:0x0000000000012A38 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017AB4:
	branch 0x0000000000012A38 == 0x0000000000000000 l0000000000017ACC
// DataOut: gp s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a5:<invalid> s0:(word64) Mem0[gp + -2024:int32] s4:0x0000000000012A38 a1:0x0000000000012B38 a0:0x0000000000012A38 t3:<invalid> t1:<invalid> s3:0x0000000000012A38 s2:0x0000000000012A38 s5:0x0000000000012A38 s6:0x0000000000012A38 s7:0x0000000000012A38 s8:0x0000000000012A38 s9:0x0000000000012A38 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017AB8:
	branch 0x0000000000012A38 == 0x0000000000000000 l0000000000017ACC
// DataOut: gp s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a5:<invalid> s0:(word64) Mem0[gp + -2024:int32] s4:0x0000000000012A38 a1:0x0000000000012B38 a0:0x0000000000012A38 t3:<invalid> t1:<invalid> s3:0x0000000000012A38 s2:0x0000000000012A38 s5:0x0000000000012A38 s6:0x0000000000012A38 s7:0x0000000000012A38 s8:0x0000000000012A38 s9:0x0000000000012A38 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017ABC:
	branch 0x0000000000012A38 == 0x0000000000000000 l0000000000017ACC
// DataOut: gp s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a5:<invalid> s0:(word64) Mem0[gp + -2024:int32] s4:0x0000000000012A38 a1:0x0000000000012B38 a0:0x0000000000012A38 t3:<invalid> t1:<invalid> s3:0x0000000000012A38 s2:0x0000000000012A38 s5:0x0000000000012A38 s6:0x0000000000012A38 s7:0x0000000000012A38 s8:0x0000000000012A38 s9:0x0000000000012A38 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017AC0:
	branch 0x0000000000012A38 == 0x0000000000000000 l0000000000017ACC
// DataOut: gp s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a5:<invalid> s0:(word64) Mem0[gp + -2024:int32] s4:0x0000000000012A38 a1:0x0000000000012B38 a0:0x0000000000012A38 t3:<invalid> t1:<invalid> s3:0x0000000000012A38 s2:0x0000000000012A38 s5:0x0000000000012A38 s6:0x0000000000012A38 s7:0x0000000000012A38 s8:0x0000000000012A38 s9:0x0000000000012A38 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017ACC:
	a4 = 0x0000000000013000
	a5 = 0x0000000000012B50
	a6 = Mem0[0x0000000000012B50:word64]
	a0 = Mem0[0x0000000000012B58:word64]
	a1 = Mem0[0x0000000000012B60:word64]
	a2 = Mem0[0x0000000000012B68:word64]
	a3 = Mem0[0x0000000000012B70:word64]
	a4 = (word64) Mem0[0x0000000000012B78:int32]
	a5 = gp + -800
	s0 = -1
	Mem0[a5:word64] = a6
	Mem0[a5 + 8:word64] = a0
	Mem0[a5 + 16:word64] = a1
	Mem0[a5 + 24:word64] = a2
	Mem0[a5 + 32:word64] = a3
	Mem0[a5 + 40:word32] = a4
	Mem0[gp + 2072:word32] = s0
// DataOut: gp s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a5:<invalid> s0:(word64) Mem0[gp + -2024:int32] s4:0x0000000000012A38 a1:0x0000000000012B38 a0:0x0000000000012A38 t3:<invalid> t1:<invalid> s3:0x0000000000012A38 s2:0x0000000000012A38 s5:0x0000000000012A38 s6:0x0000000000012A38 s7:0x0000000000012A38 s8:0x0000000000012A38 s9:0x0000000000012A38 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017AC4:
	Mem0[gp + 2072:word32] = 0x0000000000000000
// DataOut: gp s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a5:<invalid> s0:(word64) Mem0[gp + -2024:int32] s4:0x0000000000012A38 a1:0x0000000000012B38 a0:0x0000000000012A38 t3:<invalid> t1:<invalid> s3:0x0000000000012A38 s2:0x0000000000012A38 s5:0x0000000000012A38 s6:0x0000000000012A38 s7:0x0000000000012A38 s8:0x0000000000012A38 s9:0x0000000000012A38 -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001795C:
	s0 = PHI(s0, s0)
	a5 = (word64) Mem0[gp + -2028:int32]
	branch a5 != 0x0000000000000000 l000000000001796C
// DataOut: gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a5:<invalid> s0:(word64) Mem0[gp + -2024:int32] -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017964:
	a5 = (word64) Mem0[gp + -800:byte]
	branch a5 != 0x0000000000000000 l00000000000179A8
// DataOut: gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a5:(word64) Mem0[gp + -2028:int32] s0:(word64) Mem0[gp + -2024:int32] -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l00000000000179A8:
	a1 = Mem0[gp + -1920:word64]
	a0 = gp + -800
	fputs()
// DataOut: gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a5:(word64) Mem0[gp + -800:byte] s0:(word64) Mem0[gp + -2024:int32] -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l000000000001796C:
	a5 = PHI(a5, a5, a5)
	a1 = PHI(a1, a1, a1)
	a0 = PHI(a0, a0, a0)
	s0 = (word64) Mem0[gp + -2024:int32]
// DataOut: gp s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a5:<invalid> s0:(word64) Mem0[gp + -2024:int32] a1:<invalid> a0:gp + -800 t3:<invalid> t1:<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017970:
	a6 = PHI(a6, a6, a6, a6)
	a2 = PHI(a2, a2, a2, a2)
	a3 = PHI(a3, a3, a3, a3)
	a4 = PHI(a4, a4, a4, a4)
	a5 = PHI(a5, a5, a5, a5)
	a1 = PHI(a1, a1, a1, a1)
	s0 = PHI(s0, s0, s0, s0)
	ra = qwLoc08
	a0 = s0
	s1 = qwLoc18
	s0 = qwLoc10
	s2 = qwLoc20
	s3 = qwLoc28
	s4 = qwLoc30
	s5 = qwLoc38
	s6 = qwLoc40
	s7 = qwLoc48
	s8 = qwLoc50
	s9 = qwLoc58
	sp = fp
	return a0
// DataOut: a0 gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -96 a5:<invalid> s0:<invalid> s4:<invalid> a1:<invalid> a0:<invalid> t3:<invalid> t1:<invalid> s3:0x0000000000012A38 a3:<invalid> a4:<invalid> a2:<invalid> s2:0x0000000000012A38 s5:0x0000000000012A38 s6:0x0000000000012A38 s7:0x0000000000012A38 s8:0x0000000000012A38 s9:0x0000000000012A38 a6:<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

fn0000000000017924_exit:
// DataOut: a0
// DataOut (flags): 
// SymbolicIn: sp:fp a5:<invalid> s0:s0 ra:ra a0:<invalid> s1:s1 s2:s2 s3:s3 s4:s4 s5:s5 s6:s6 s7:s7 s8:s8 s9:s9 a1:<invalid> t3:<invalid> t1:<invalid> a3:<invalid> a4:<invalid> a2:<invalid> a6:<invalid> -88(fp):s9 -80(fp):s8 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra



void fn0000000000017B40(word64 gp, word64 a0, word64 a1, word64 a2, word64 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 a1 a2 a3 gp
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 fa3 fa4 fa5 t1 t3
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 s7 sp
fn0000000000017B40_entry:
	def fp
	def s0
	def s1
	def s2
	def s3
	def s4
	def ra
	def s5
	def s6
	def s7
	def a0
	def a1
	def a2
	def a3
	def a4
	def gp
	def fa3
	def t1
	def fa5
	def fa4
	def a5
// DataOut: a0 a1 a2 a3 gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l0000000000017B40:
	sp_1 = fp
	sp_2 = fp + -80
	qwLoc10_4 = s0
	qwLoc18_6 = s1
	qwLoc20_8 = s2
	qwLoc28_10 = s3
	qwLoc30_12 = s4
	qwLoc08_14 = ra
	qwLoc38_16 = s5
	qwLoc40_18 = s6
	qwLoc48_20 = s7
	s0_22 = a0
	s3_24 = a1
	s2_26 = a2
	s1_28 = a3
	s4_30 = a4
	a0_32 = fn0000000000017924(gp)
	branch a0_32 == 0x0000000000000000 l0000000000017BB0
// DataOut: gp s0 s1 s10 s2 s3 s8
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000017BB0:
	a0_80 = s0_22
	a0_81 = fn00000000000182B4(a0_80)
	a5 = Mem0[-1944:word64]
	s7 = a0
	call a5 (retsize: 0; depth: 80)
		defs: a0,a1,a2,a3,a4,a5,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
	a5 = Mem0[gp + -1952:word64]
	a1 = 16
	a0 = 1
	call a5 (retsize: 0; depth: 80)
		defs: a0,a1,a2,a3,a4,a5,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
	s0 = a0
	branch a0 == 0x0000000000000000 l0000000000017C3C
// DataOut: a0 gp s0 s1 s10 s2 s3 s7 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:a0 s3:a1 s2:a2 s1:a3 s4:a4 a5:<invalid> a0:<invalid> a1:<invalid> t3:<invalid> t1:<invalid> a3:<invalid> a4:<invalid> a2:<invalid> a6:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017BDC:
	a5 = Mem0[gp + -1992:word64]
	a4 = 1
	a1 = s7 << 0x00000000
	Mem0[a0 + 76:word32] = a4
	a1 = a1 >>u 0x00000000
	call a5 (retsize: 0; depth: 80)
		defs: a0,a1,a2,a3,a4,a5,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
	s6 = a0
	branch a0 < 0x0000000000000000 l0000000000017B84
// DataOut: gp s0 s1 s10 s2 s3 s6 s7 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:1 s3:a1 s2:a2 s1:a3 s4:a4 a0:1 a5:<invalid> s7:<invalid> a1:16 a3:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> a2:<invalid> a6:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017BFC:
	a5 = Mem0[gp + -1960:word64]
	a1 = a0
	a0 = s0
	call a5 (retsize: 0; depth: 80)
		defs: a0,a1,a2,a3,a4,a5,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
	branch a0 == 0x0000000000000000 l0000000000017C18
// DataOut: a0 gp s1 s10 s2 s3 s6 s7 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:1 s3:a1 s2:a2 s1:a3 s4:a4 a0:1 a5:<invalid> s7:<invalid> a1:<invalid> a4:1 s6:1 a3:<invalid> t3:<invalid> t1:<invalid> a2:<invalid> a6:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017C10:
	__strdup()
	Mem0[s3:word64] = a0
// DataOut: gp s1 s10 s2 s6 s7 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:1 s3:a1 s2:a2 s1:a3 s4:a4 a0:1 a5:<invalid> s7:<invalid> a1:1 a4:1 s6:1 a3:<invalid> t3:<invalid> t1:<invalid> a2:<invalid> a6:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017C18:
	a5 = Mem0[gp + -1968:word64]
	a0 = s6
	call a5 (retsize: 0; depth: 80)
		defs: a0,a1,a2,a3,a4,a5,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
	branch a0 == 0x0000000000000000 l0000000000017C30
// DataOut: a0 gp s1 s10 s2 s7 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:1 s3:a1 s2:a2 s1:a3 s4:a4 a0:1 a5:<invalid> s7:<invalid> a1:1 a4:1 s6:1 t3:<invalid> t1:<invalid> a3:<invalid> a2:<invalid> a6:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017C28:
	__strdup()
	Mem0[s2:word64] = a0
// DataOut: gp s1 s10 s7 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:1 s3:a1 s2:a2 s1:a3 s4:a4 a0:1 a5:<invalid> s7:<invalid> a1:1 a4:1 s6:1 t3:<invalid> t1:<invalid> a3:<invalid> a2:<invalid> a6:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017C30:
	a5 = Mem0[gp + -1976:word64]
	a0 = s0
	call a5 (retsize: 0; depth: 80)
		defs: a0,a1,a2,a3,a4,a5,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
// DataOut: gp s1 s10 s7 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:1 s3:a1 s2:a2 s1:a3 s4:a4 a0:1 a5:<invalid> s7:<invalid> a1:1 a4:1 s6:1 t3:<invalid> t1:<invalid> a3:<invalid> a2:<invalid> a6:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017C3C:
	gp = PHI(gp, gp)
	a5 = Mem0[gp + -1952:word64]
	a1 = 16
	a0 = 2
	call a5 (retsize: 0; depth: 80)
		defs: a0,a1,a2,a3,a4,a5,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
	s0 = a0
	branch a0 == 0x0000000000000000 l0000000000017CF4
// DataOut: a0 gp s0 s1 s10 s7 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:1 s3:a1 s2:a2 s1:a3 s4:a4 a0:1 a5:<invalid> s7:<invalid> a1:<invalid> a3:<invalid> a4:<invalid> s6:1 t3:<invalid> t1:<invalid> a2:<invalid> a6:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017CF4:
	a5 = Mem0[gp + -1952:word64]
	a1 = 16
	a0 = 6
	call a5 (retsize: 0; depth: 80)
		defs: a0,a1,a2,a3,a4,a5,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
	s0 = a0
	branch a0 != 0x0000000000000000 l0000000000017C54
// DataOut: a0 gp s0 s1 s10 s7 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:2 s3:a1 s2:a2 s1:a3 s4:a4 a0:2 a5:<invalid> s7:<invalid> a1:16 a3:<invalid> a4:<invalid> s6:1 t3:<invalid> t1:<invalid> a2:<invalid> a6:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017D0C:
// DataOut: gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:6 s3:a1 s2:a2 s1:a3 s4:a4 a0:6 a5:<invalid> s7:<invalid> a1:16 a3:<invalid> a4:<invalid> s6:1 t3:<invalid> t1:<invalid> a2:<invalid> a6:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017C54:
	gp = PHI(gp, gp)
	s0 = PHI(s0, s0)
	s7 = PHI(s7, s7)
	a5 = Mem0[gp + -1984:word64]
	a4 = 1
	a1 = s7 << 0x00000000
	Mem0[s0 + 76:word32] = a4
	a1 = a1 >>u 0x00000000
	call a5 (retsize: 0; depth: 80)
		defs: a0,a1,a2,a3,a4,a5,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
	s2 = a0
	branch a0 == 0x0000000000000000 l0000000000017C94
// DataOut: a0 a4 gp s1 s10 s2 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:<invalid> s3:a1 s2:a2 s1:a3 s4:a4 a0:<invalid> a5:<invalid> s7:<invalid> a1:16 a3:<invalid> a4:<invalid> s6:1 t3:<invalid> t1:<invalid> a2:<invalid> a6:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017C74:
	a0 = Mem0[a0 + 32:word64]
	branch a0 == 0x0000000000000000 l0000000000017C84
// DataOut: a0 a4 gp s1 s10 s2 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:<invalid> s3:a1 s2:<invalid> s1:a3 s4:a4 a0:<invalid> a5:<invalid> s7:<invalid> a1:<invalid> a4:1 a3:<invalid> s6:1 t3:<invalid> t1:<invalid> a2:<invalid> a6:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017C7C:
	__strdup()
	Mem0[s1:word64] = a0
// DataOut: a4 gp s10 s2 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:<invalid> s3:a1 s2:<invalid> s1:a3 s4:a4 a0:<invalid> a5:<invalid> s7:<invalid> a1:<invalid> a4:1 a3:<invalid> s6:1 t3:<invalid> t1:<invalid> a2:<invalid> a6:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017C84:
	fa4 = Mem0[s2 + 52:real32]
	fa5 = (real32) 0x0000000000000000
	a5 = (word64) ((real32) fa4 = (real32) fa5)
	branch a5 == 0x0000000000000000 l0000000000017CC8
// DataOut: a4 a5 gp s10 s2 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:<invalid> s3:a1 s2:<invalid> s1:a3 s4:a4 a0:<invalid> a5:<invalid> s7:<invalid> a1:<invalid> a4:1 t3:<invalid> t1:<invalid> a3:<invalid> s6:1 a2:<invalid> a6:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017CC8:
	fa5 = Mem0[s2 + 48:real32]
	a2 = 0x0000000000013000
	fa5 = (real64) fa5
	fa4 = (real64) a4
	a2 = 0x0000000000012B80
	fa3 = (real64) a5
	a1 = 1
	a0 = s4
	__asprintf_chk()
// DataOut: gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:<invalid> s3:a1 s2:<invalid> s1:a3 s4:a4 a0:<invalid> a5:<invalid> s7:<invalid> a1:<invalid> a4:1 t3:<invalid> t1:<invalid> fa4:<invalid> fa5:(real32) 0x0000000000000000 a3:<invalid> s6:1 a2:<invalid> a6:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017C94:
	a0 = s0
	ra = qwLoc08
	s0 = qwLoc10
	s1 = qwLoc18
	s2 = qwLoc20
	s3 = qwLoc28
	s4 = qwLoc30
	s5 = qwLoc38
	s6 = qwLoc40
	s7 = qwLoc48
	t1 = Mem0[gp + -1976:word64]
	sp = fp
	call t1 (retsize: 0;)
		defs: a0,a1,a2,a3,a4,a5,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
	return
// DataOut: gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:<invalid> s3:a1 s2:<invalid> s1:a3 s4:a4 a0:<invalid> a5:<invalid> s7:<invalid> a1:<invalid> a4:1 a3:<invalid> t3:<invalid> t1:<invalid> fa4:<invalid> fa5:<invalid> a2:<invalid> fa3:<invalid> s6:1 a6:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017B84:
	fa3_59 = PHI(fa3, fa3, fa3)
	t1_60 = PHI(t1, t1, t1)
	fa5_61 = PHI(fa5, fa5, fa5)
	fa4_62 = PHI(fa4, fa4, fa4)
	gp_63 = PHI(gp, gp, gp)
	a5_64 = PHI(a5, a5, a5)
	a4_65 = PHI(a4, a4, a4)
	a3_66 = PHI(a3, a3, a3)
	a2_67 = PHI(a2, a2, a2)
	a1_68 = PHI(a1, a1, a1)
	a0_69 = PHI(a0_32, a0, a0)
	ra_70 = qwLoc08_14
	s0_71 = qwLoc10_4
	s1_72 = qwLoc18_6
	s2_73 = qwLoc20_8
	s3_74 = qwLoc28_10
	s4_75 = qwLoc30_12
	s5_76 = qwLoc38_16
	s6_77 = qwLoc40_18
	s7_78 = qwLoc48_20
	sp_79 = fp
	return
// DataOut: gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:<invalid> s3:a1 s2:a2 s1:a3 s4:a4 a0:<invalid> a5:<invalid> s7:<invalid> a1:<invalid> a4:<invalid> s6:1 a3:<invalid> t3:<invalid> t1:<invalid> a2:<invalid> a6:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

fn0000000000017B40_exit:
	fa3_38 = PHI(fa3_59, fa3)
	t1_39 = PHI(t1_60, t1)
	fa5_40 = PHI(fa5_61, fa5)
	fa4_41 = PHI(fa4_62, fa4)
	gp_42 = PHI(gp_63, gp)
	a5_43 = PHI(a5_64, a5)
	a4_44 = PHI(a4_65, a4)
	a3_45 = PHI(a3_66, a3)
	a2_46 = PHI(a2_67, a2)
	a1_47 = PHI(a1_68, a1)
	a0_48 = PHI(a0_69, a0)
	ra_49 = PHI(ra_70, ra)
	s0_50 = PHI(s0_71, s0)
	s1_51 = PHI(s1_72, s1)
	s2_52 = PHI(s2_73, s2)
	s3_53 = PHI(s3_74, s3)
	s4_54 = PHI(s4_75, s4)
	s5_55 = PHI(s5_76, s5)
	s6_56 = PHI(s6_77, s6)
	s7_57 = PHI(s7_78, s7)
	sp_58 = PHI(sp_79, sp)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp s0:s0 s3:s3 s2:s2 s1:s1 s4:s4 ra:ra s5:s5 s6:s6 s7:s7 a0:<invalid> a5:<invalid> a1:<invalid> a4:<invalid> t1:<invalid> a3:<invalid> t3:<invalid> fa4:<invalid> fa5:<invalid> a2:<invalid> a6:<invalid> fa3:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra



void fn0000000000017D10(word64 gp, word64 a0, word64 a1, word64 a2, word64 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 a1 a2 a3 gp
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 fa3 fa4 fa5 t1 t3
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 s7 sp
fn0000000000017D10_entry:
	def fp
	def s0
	def s2
	def s3
	def s4
	def s5
	def ra
	def s1
	def s6
	def s7
	def a0
	def a1
	def a2
	def a3
	def a4
	def gp
	def fa3
	def t1
	def fa5
	def fa4
	def a6
	def a5
// DataOut: a0 a1 a2 a3 gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l0000000000017D10:
	sp_1 = fp
	sp_2 = fp + -80
	qwLoc10_4 = s0
	qwLoc20_6 = s2
	qwLoc28_8 = s3
	qwLoc30_10 = s4
	qwLoc38_12 = s5
	qwLoc08_14 = ra
	qwLoc18_16 = s1
	qwLoc40_18 = s6
	qwLoc48_20 = s7
	s0_22 = a0
	s4_24 = a1
	s3_26 = a2
	s2_28 = a3
	s5_30 = a4
	a0_32 = fn0000000000017924(gp)
	branch a0_32 == 0x0000000000000000 l0000000000017D80
// DataOut: gp s0 s10 s2 s3 s4
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000017D80:
	a5 = Mem0[-1944:word64]
	call a5 (retsize: 0; depth: 80)
		defs: a0,a1,a2,a3,a4,a5,a6,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
	a5 = Mem0[gp + -1952:word64]
	a1 = 16
	a0 = 12
	call a5 (retsize: 0; depth: 80)
		defs: a0,a1,a2,a3,a4,a5,a6,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
	s1 = a0
	branch a0 == 0x0000000000000000 l0000000000017E18
// DataOut: a0 gp s0 s1 s10 s2 s3 s4
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:a0 s4:a1 s3:a2 s2:a3 s5:a4 a5:<invalid> a0:<invalid> a1:<invalid> t3:<invalid> t1:<invalid> a3:<invalid> a4:<invalid> a2:<invalid> a6:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017DA0:
	a4 = (word64) Mem0[s0 + 4:uint32]
	a5 = (word64) Mem0[s0 + 12:uint32]
	a1 = (word64) Mem0[s0:uint32]
	a2 = (word64) Mem0[s0 + 8:uint32]
	a3 = Mem0[gp + -2000:word64]
	a4 = a4 << 0x00000000
	a5 = a5 << 0x00000000
	a6 = 1
	Mem0[a0 + 76:word32] = a6
	a1 = a4 | a1
	a2 = a5 | a2
	call a3 (retsize: 0; depth: 80)
		defs: a0,a1,a2,a3,a4,a5,a6,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
	s7 = a0
	branch a0 < 0x0000000000000000 l0000000000017D54
// DataOut: gp s0 s1 s10 s2 s3 s4 s7
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:a0 s4:a1 s3:a2 s2:a3 s5:a4 a5:<invalid> a1:16 a0:12 s1:12 t3:<invalid> t1:<invalid> a3:<invalid> a4:<invalid> a2:<invalid> a6:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017DD8:
	a5 = Mem0[gp + -1960:word64]
	a1 = a0
	a0 = s1
	call a5 (retsize: 0; depth: 80)
		defs: a0,a1,a2,a3,a4,a5,a6,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
	branch a0 == 0x0000000000000000 l0000000000017DF4
// DataOut: a0 gp s0 s10 s2 s3 s4 s7
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:a0 s4:a1 s3:a2 s2:a3 s5:a4 a5:(word64) Mem0[a0 + 12:uint32] << 0x00000000 a1:(word64) Mem0[a0 + 4:uint32] << 0x00000000 | (word64) Mem0[a0:uint32] a0:12 s1:12 a4:(word64) Mem0[a0 + 4:uint32] << 0x00000000 a2:(word64) Mem0[a0 + 12:uint32] << 0x00000000 | (word64) Mem0[a0 + 8:uint32] a3:<invalid> a6:1 s7:12 t3:<invalid> t1:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017DEC:
	__strdup()
	Mem0[s4:word64] = a0
// DataOut: gp s0 s10 s2 s3 s7
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:a0 s4:a1 s3:a2 s2:a3 s5:a4 a5:<invalid> a1:12 a0:12 s1:12 a4:(word64) Mem0[a0 + 4:uint32] << 0x00000000 a2:(word64) Mem0[a0 + 12:uint32] << 0x00000000 | (word64) Mem0[a0 + 8:uint32] a3:<invalid> a6:1 s7:12 t3:<invalid> t1:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017DF4:
	a5 = Mem0[gp + -1968:word64]
	a0 = s7
	call a5 (retsize: 0; depth: 80)
		defs: a0,a1,a2,a3,a4,a5,a6,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
	branch a0 == 0x0000000000000000 l0000000000017E0C
// DataOut: a0 gp s0 s10 s2 s3
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:a0 s4:a1 s3:a2 s2:a3 s5:a4 a5:<invalid> a1:12 a0:12 s1:12 a4:(word64) Mem0[a0 + 4:uint32] << 0x00000000 a2:(word64) Mem0[a0 + 12:uint32] << 0x00000000 | (word64) Mem0[a0 + 8:uint32] a3:<invalid> a6:1 s7:12 t3:<invalid> t1:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017E04:
	__strdup()
	Mem0[s3:word64] = a0
// DataOut: gp s0 s10 s2
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:a0 s4:a1 s3:a2 s2:a3 s5:a4 a5:<invalid> a1:12 a0:12 s1:12 a4:(word64) Mem0[a0 + 4:uint32] << 0x00000000 a2:(word64) Mem0[a0 + 12:uint32] << 0x00000000 | (word64) Mem0[a0 + 8:uint32] a3:<invalid> a6:1 s7:12 t3:<invalid> t1:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017E0C:
	a5 = Mem0[gp + -1976:word64]
	a0 = s1
	call a5 (retsize: 0; depth: 80)
		defs: a0,a1,a2,a3,a4,a5,a6,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
// DataOut: gp s0 s10 s2
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:a0 s4:a1 s3:a2 s2:a3 s5:a4 a5:<invalid> a1:12 a0:12 s1:12 a4:(word64) Mem0[a0 + 4:uint32] << 0x00000000 a2:(word64) Mem0[a0 + 12:uint32] << 0x00000000 | (word64) Mem0[a0 + 8:uint32] a3:<invalid> a6:1 s7:12 t3:<invalid> t1:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017E18:
	gp = PHI(gp, gp)
	a5 = Mem0[gp + -1952:word64]
	a1 = 16
	a0 = 30
	call a5 (retsize: 0; depth: 80)
		defs: a0,a1,a2,a3,a4,a5,a6,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
	s1 = a0
	branch a0 == 0x0000000000000000 l0000000000017EE8
// DataOut: a0 gp s0 s1 s10 s2
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:a0 s4:a1 s3:a2 s2:a3 s5:a4 a5:<invalid> a1:<invalid> a0:12 s1:12 a4:<invalid> a2:<invalid> a3:<invalid> a6:<invalid> s7:12 t3:<invalid> t1:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017EE8:
	a5 = Mem0[gp + -1952:word64]
	a1 = 16
	a0 = 31
	call a5 (retsize: 0; depth: 80)
		defs: a0,a1,a2,a3,a4,a5,a6,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
	s1 = a0
	branch a0 != 0x0000000000000000 l0000000000017E30
// DataOut: a0 gp s0 s1 s10 s2
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:a0 s4:a1 s3:a2 s2:a3 s5:a4 a5:<invalid> a1:16 a0:30 s1:30 a4:<invalid> a2:<invalid> a3:<invalid> a6:<invalid> s7:12 t3:<invalid> t1:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017F00:
// DataOut: gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:a0 s4:a1 s3:a2 s2:a3 s5:a4 a5:<invalid> a1:16 a0:31 s1:31 a4:<invalid> a2:<invalid> a3:<invalid> a6:<invalid> s7:12 t3:<invalid> t1:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017E30:
	gp = PHI(gp, gp)
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	a4 = (word64) Mem0[s0 + 4:uint32]
	a5 = (word64) Mem0[s0 + 12:uint32]
	a1 = (word64) Mem0[s0:uint32]
	a2 = (word64) Mem0[s0 + 8:uint32]
	a3 = Mem0[gp + -2008:word64]
	a4 = a4 << 0x00000000
	a5 = a5 << 0x00000000
	a6 = 1
	Mem0[s1 + 76:word32] = a6
	a1 = a4 | a1
	a2 = a5 | a2
	call a3 (retsize: 0; depth: 80)
		defs: a0,a1,a2,a3,a4,a5,a6,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
	s0 = a0
	branch a0 == 0x0000000000000000 l0000000000017E88
// DataOut: a0 a4 gp s0 s10 s2
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:a0 s4:a1 s3:a2 s2:a3 s5:a4 a5:<invalid> a1:16 a0:<invalid> s1:<invalid> a4:<invalid> a2:<invalid> a3:<invalid> a6:<invalid> s7:12 t3:<invalid> t1:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017E68:
	a0 = Mem0[a0 + 32:word64]
	branch a0 == 0x0000000000000000 l0000000000017E78
// DataOut: a0 a4 gp s0 s10 s2
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:<invalid> s4:a1 s3:a2 s2:a3 s5:a4 a5:(word64) Mem0[a0 + 12:uint32] << 0x00000000 a1:(word64) Mem0[a0 + 4:uint32] << 0x00000000 | (word64) Mem0[a0:uint32] a0:<invalid> s1:<invalid> a4:(word64) Mem0[a0 + 4:uint32] << 0x00000000 a2:(word64) Mem0[a0 + 12:uint32] << 0x00000000 | (word64) Mem0[a0 + 8:uint32] a3:<invalid> a6:1 s7:12 t3:<invalid> t1:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017E70:
	__strdup()
	Mem0[s2:word64] = a0
// DataOut: a4 gp s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:<invalid> s4:a1 s3:a2 s2:a3 s5:a4 a5:(word64) Mem0[a0 + 12:uint32] << 0x00000000 a1:(word64) Mem0[a0 + 4:uint32] << 0x00000000 | (word64) Mem0[a0:uint32] a0:<invalid> s1:<invalid> a4:(word64) Mem0[a0 + 4:uint32] << 0x00000000 a2:(word64) Mem0[a0 + 12:uint32] << 0x00000000 | (word64) Mem0[a0 + 8:uint32] a3:<invalid> a6:1 s7:12 t3:<invalid> t1:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017E78:
	fa4 = Mem0[s0 + 52:real32]
	fa5 = (real32) 0x0000000000000000
	a5 = (word64) ((real32) fa4 = (real32) fa5)
	branch a5 == 0x0000000000000000 l0000000000017EBC
// DataOut: a4 a5 gp s0 s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:<invalid> s4:a1 s3:a2 s2:a3 s5:a4 a5:(word64) Mem0[a0 + 12:uint32] << 0x00000000 a1:(word64) Mem0[a0 + 4:uint32] << 0x00000000 | (word64) Mem0[a0:uint32] a0:<invalid> s1:<invalid> a4:(word64) Mem0[a0 + 4:uint32] << 0x00000000 a2:(word64) Mem0[a0 + 12:uint32] << 0x00000000 | (word64) Mem0[a0 + 8:uint32] a3:<invalid> a6:1 t3:<invalid> t1:<invalid> s7:12 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017EBC:
	fa5 = Mem0[s0 + 48:real32]
	a2 = 0x0000000000013000
	fa5 = (real64) fa5
	fa4 = (real64) a4
	a2 = 0x0000000000012B80
	fa3 = (real64) a5
	a1 = 1
	a0 = s5
	__asprintf_chk()
// DataOut: gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:<invalid> s4:a1 s3:a2 s2:a3 s5:a4 a5:<invalid> a1:(word64) Mem0[a0 + 4:uint32] << 0x00000000 | (word64) Mem0[a0:uint32] a0:<invalid> s1:<invalid> a4:(word64) Mem0[a0 + 4:uint32] << 0x00000000 a2:(word64) Mem0[a0 + 12:uint32] << 0x00000000 | (word64) Mem0[a0 + 8:uint32] a3:<invalid> a6:1 t3:<invalid> t1:<invalid> fa4:<invalid> fa5:(real32) 0x0000000000000000 s7:12 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017E88:
	a0 = s1
	ra = qwLoc08
	s0 = qwLoc10
	s1 = qwLoc18
	s2 = qwLoc20
	s3 = qwLoc28
	s4 = qwLoc30
	s5 = qwLoc38
	s6 = qwLoc40
	s7 = qwLoc48
	t1 = Mem0[gp + -1976:word64]
	sp = fp
	call t1 (retsize: 0;)
		defs: a0,a1,a2,a3,a4,a5,a6,fa3,fa4,fa5,gp,ra,s0,s1,s2,s3,s4,s5,s6,s7,sp,t1
	return
// DataOut: gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:<invalid> s4:a1 s3:a2 s2:a3 s5:a4 a5:<invalid> a1:<invalid> a0:<invalid> s1:<invalid> a4:(word64) Mem0[a0 + 4:uint32] << 0x00000000 a2:<invalid> a3:<invalid> a6:1 t3:<invalid> t1:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> s7:12 -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017D54:
	fa3_61 = PHI(fa3, fa3, fa3)
	t1_62 = PHI(t1, t1, t1)
	fa5_63 = PHI(fa5, fa5, fa5)
	fa4_64 = PHI(fa4, fa4, fa4)
	a6_65 = PHI(a6, a6, a6)
	gp_66 = PHI(gp, gp, gp)
	a5_67 = PHI(a5, a5, a5)
	a4_68 = PHI(a4, a4, a4)
	a3_69 = PHI(a3, a3, a3)
	a2_70 = PHI(a2, a2, a2)
	a1_71 = PHI(a1, a1, a1)
	a0_72 = PHI(a0_32, a0, a0)
	ra_73 = qwLoc08_14
	s0_74 = qwLoc10_4
	s1_75 = qwLoc18_16
	s2_76 = qwLoc20_6
	s3_77 = qwLoc28_8
	s4_78 = qwLoc30_10
	s5_79 = qwLoc38_12
	s6_80 = qwLoc40_18
	s7_81 = qwLoc48_20
	sp_82 = fp
	return
// DataOut: gp s10
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 s0:a0 s4:a1 s3:a2 s2:a3 s5:a4 a5:<invalid> a1:<invalid> a0:<invalid> s1:<invalid> a4:<invalid> a2:<invalid> a3:<invalid> a6:<invalid> s7:12 t3:<invalid> t1:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

fn0000000000017D10_exit:
	fa3_39 = PHI(fa3_61, fa3)
	t1_40 = PHI(t1_62, t1)
	fa5_41 = PHI(fa5_63, fa5)
	fa4_42 = PHI(fa4_64, fa4)
	a6_43 = PHI(a6_65, a6)
	gp_44 = PHI(gp_66, gp)
	a5_45 = PHI(a5_67, a5)
	a4_46 = PHI(a4_68, a4)
	a3_47 = PHI(a3_69, a3)
	a2_48 = PHI(a2_70, a2)
	a1_49 = PHI(a1_71, a1)
	a0_50 = PHI(a0_72, a0)
	ra_51 = PHI(ra_73, ra)
	s0_52 = PHI(s0_74, s0)
	s1_53 = PHI(s1_75, s1)
	s2_54 = PHI(s2_76, s2)
	s3_55 = PHI(s3_77, s3)
	s4_56 = PHI(s4_78, s4)
	s5_57 = PHI(s5_79, s5)
	s6_58 = PHI(s6_80, s6)
	s7_59 = PHI(s7_81, s7)
	sp_60 = PHI(sp_82, sp)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp s0:s0 s4:s4 s3:s3 s2:s2 s5:s5 ra:ra s1:s1 s6:s6 s7:s7 a5:<invalid> a1:<invalid> a0:<invalid> a4:<invalid> a2:<invalid> a3:<invalid> a6:<invalid> t1:<invalid> t3:<invalid> fa4:<invalid> fa5:<invalid> fa3:<invalid> -72(fp):s7 -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra



word64 fn0000000000017F04(word64 gp, word64 a0, word64 a1, word64 a2, word64 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 a1 a2 a3 gp
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s2 s4 s5 s6 sp t1 t3 t4 t5 t6
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 sp
fn0000000000017F04_entry:
	def fp
	def s3
	def gp
// DataOut: a0 a1 a2 a3 gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l0000000000017F04:
	sp_1 = fp
	sp_2 = fp + -80
	qwLoc28_4 = s3
	a5 = Mem0[-1936:word64]
	qwLoc10 = s0
	qwLoc18 = s1
	qwLoc20 = s2
	qwLoc30 = s4
	qwLoc38 = s5
	qwLoc40 = s6
	s0 = a1
	qwLoc08 = ra
	s5 = a2
	s4 = a3
	qwLoc48 = a5
	qwLoc50 = 0x0000000000000000
	a0 = fn00000000000182B4(a0)
	a1 = (int64) (int32) (a0 >>u 0x00000010)
	t1 = (int64) (int32) (a0 >>u 0x00000008)
	t3 = 32
	s6 = (int64) (int32) (a0 >>u 0x00000018)
	s1 = a1 & 255
	s2 = t1 & 255
	branch s0 == t3 l0000000000018048
// DataOut: a0 gp s0 s10 s4 s5 s8
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64) Local -0048(64)

l0000000000018048:
	a2 = 0x0000000000013000
	a3 = a0 & 255
	a6 = s6
	a5 = s1
	a4 = s2
	a2 = 0x0000000000012B88
	a1 = 1
	a0 = fp + -80
	__asprintf_chk()
// DataOut: a1 gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:<invalid> s0:a1 s5:a2 s4:a3 a1:<invalid> t1:<invalid> t3:32 s6:<invalid> s1:<invalid> s2:<invalid> a3:<invalid> a4:<invalid> a0:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0048(64)

l0000000000017F60:
	a1 = 24
	branch s0 == a1 l0000000000018070
// DataOut: a1 gp s0 s10 s4 s5 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:<invalid> s0:a1 s5:a2 s4:a3 a1:<invalid> t1:<invalid> t3:32 s6:<invalid> s1:<invalid> s2:<invalid> a3:<invalid> a4:<invalid> a0:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0048(64)

l0000000000018070:
	a2 = 0x0000000000013000
	a5 = s6
	a4 = s1
	a3 = s2
	a2 = 0x0000000000012BA8
	a1 = 1
	a0 = fp + -80
	__asprintf_chk()
// DataOut: a1 gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:<invalid> s0:a1 s5:a2 s4:a3 a1:24 t1:<invalid> t3:32 s6:<invalid> s1:<invalid> s2:<invalid> a3:<invalid> a4:<invalid> a0:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0048(64)

l0000000000017F68:
	a0 = 16
	branch s0 == a0 l00000000000180D8
// DataOut: a0 a1 gp s0 s10 s4 s5 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:<invalid> s0:a1 s5:a2 s4:a3 a1:24 t1:<invalid> t3:32 s6:<invalid> s1:<invalid> s2:<invalid> a3:<invalid> a4:<invalid> a0:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0048(64)

l00000000000180D8:
	a2 = 0x0000000000013000
	a4 = s6
	a3 = s1
	a2 = 0x0000000000012BC0
	a1 = 1
	a0 = fp + -80
	__asprintf_chk()
// DataOut: a1 gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:<invalid> s0:a1 s5:a2 s4:a3 a1:24 t1:<invalid> t3:32 s6:<invalid> s1:<invalid> s2:<invalid> a0:16 a3:<invalid> a4:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0048(64)

l0000000000017F70:
	a5 = 8
	branch s0 == a5 l00000000000180F8
// DataOut: a0 a1 a5 gp s0 s10 s4 s5 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:<invalid> s0:a1 s5:a2 s4:a3 a1:24 t1:<invalid> t3:32 s6:<invalid> s1:<invalid> s2:<invalid> a0:16 a3:<invalid> a4:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0048(64)

l00000000000180F8:
	a2 = 0x0000000000013000
	a3 = s6
	a2 = 0x0000000000012BD8
	a1 = 1
	a0 = fp + -80
	__asprintf_chk()
// DataOut: a1 gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:8 s0:a1 s5:a2 s4:a3 a1:24 t1:<invalid> t3:32 s6:<invalid> s1:<invalid> s2:<invalid> a0:16 a3:<invalid> a4:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0048(64)

l0000000000017F78:
	branch a1 <u s0 l0000000000017FBC
// DataOut: a0 a1 a5 gp s0 s10 s4 s5 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:8 s0:a1 s5:a2 s4:a3 a1:24 t1:<invalid> t3:32 s6:<invalid> s1:<invalid> s2:<invalid> a0:16 a3:<invalid> a4:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0048(64)

l0000000000017FBC:
	a0 = s5
	a0 = fn00000000000182B4(a0)
	s0 = a0
	a0 = s4
	a0 = fn00000000000182B4(a0)
	a2 = 0x0000000000013000
	a4 = a0 & 255
	a7 = s6
	a6 = s1
	a5 = s2
	a3 = s0 & 255
	a2 = 0x0000000000012BF0
	a1 = 1
	a0 = fp + -80
	__asprintf_chk()
// DataOut: a1 gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:8 s0:a1 s5:a2 s4:a3 a1:24 t1:<invalid> t3:32 s6:<invalid> s1:<invalid> s2:<invalid> a0:16 a3:<invalid> a4:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0048(64)

l0000000000017F7C:
	branch a0 <u s0 l0000000000018094
// DataOut: a1 a5 gp s0 s10 s4 s5 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:8 s0:a1 s5:a2 s4:a3 a1:24 t1:<invalid> t3:32 s6:<invalid> s1:<invalid> s2:<invalid> a0:16 a3:<invalid> a4:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0048(64)

l0000000000018094:
	a0 = s5
	a0 = fn00000000000182B4(a0)
	s0 = a0
	a0 = s4
	a0 = fn00000000000182B4(a0)
	a4 = (int64) (int32) (a0 >>u 0x00000008)
	a3 = (int64) (int32) (s0 >>u 0x00000008)
	a2 = 0x0000000000013000
	a6 = s6
	a5 = s1
	a4 = a4 & 255
	a3 = a3 & 255
	a2 = 0x0000000000012C10
	a1 = 1
	a0 = fp + -80
	__asprintf_chk()
// DataOut: a1 gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:8 s0:a1 s5:a2 s4:a3 a1:24 t1:<invalid> t3:32 s6:<invalid> s1:<invalid> s2:<invalid> a0:16 a3:<invalid> a4:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0048(64)

l0000000000017F80:
	branch a5 <u s0 l0000000000018008
// DataOut: a1 gp s10 s4 s5 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:8 s0:a1 s5:a2 s4:a3 a1:24 t1:<invalid> t3:32 s6:<invalid> s1:<invalid> s2:<invalid> a0:16 a3:<invalid> a4:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0048(64)

l0000000000018008:
	a0 = s5
	a0 = fn00000000000182B4(a0)
	s0 = a0
	a0 = s4
	a0 = fn00000000000182B4(a0)
	a4 = (int64) (int32) (a0 >>u 0x00000010)
	a3 = (int64) (int32) (s0 >>u 0x00000010)
	a2 = 0x0000000000013000
	a5 = s6
	a4 = a4 & 255
	a3 = a3 & 255
	a2 = 0x0000000000012C30
	a1 = 1
	a0 = fp + -80
	__asprintf_chk()
// DataOut: a1 gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:8 s0:a1 s5:a2 s4:a3 a1:24 t1:<invalid> t3:32 s6:<invalid> s1:<invalid> s2:<invalid> a0:16 a3:<invalid> a4:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0048(64)

l0000000000017FF8:
	a7 = PHI(a7, a7, a7, a7, a7, a7, a7)
	a6 = PHI(a6, a6, a6, a6, a6, a6, a6)
	a3 = PHI(a3, a3, a3, a3, a3, a3, a3)
	a2 = PHI(a2, a2, a2, a2, a2, a2, a2)
	a1 = PHI(a1, a1, a1, a1, a1, a1, a1)
	a4 = PHI(a4, a4, a4, a4, a4, a4, a4)
	a0 = PHI(a0, a0, a0, a0, a0, a0, a0)
	s0 = PHI(s0, s0, s0, s0, s0, s0, s0)
	a5 = -1
	branch fp + -80 == a5 l0000000000017F84
// DataOut: a1 gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:<invalid> s0:<invalid> s5:a2 s4:a3 a1:1 t1:<invalid> t3:<invalid> s6:<invalid> s1:<invalid> s2:<invalid> a2:<invalid> a3:<invalid> a6:<invalid> a4:<invalid> a0:fp + -80 a7:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0048(64)

l0000000000018000:
	a0 = 0x0000000000000000
// DataOut: a0 a1 gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:-1 s0:<invalid> s5:a2 s4:a3 a1:1 t1:<invalid> t3:<invalid> s6:<invalid> s1:<invalid> s2:<invalid> a2:<invalid> a3:<invalid> a6:<invalid> a4:<invalid> a0:fp + -80 a7:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0048(64)

l0000000000017F84:
	a7 = PHI(a7, a7)
	a6 = PHI(a6, a6)
	a3 = PHI(a3, a3)
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a4 = PHI(a4, a4)
	a5 = PHI(a5, a5)
	s0 = PHI(s0, s0)
	a0 = 0
// DataOut: a0 a1 gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:<invalid> s0:<invalid> s5:a2 s4:a3 a1:<invalid> t1:<invalid> t3:<invalid> s6:<invalid> s1:<invalid> s2:<invalid> a2:<invalid> a3:<invalid> a6:<invalid> a4:<invalid> a0:<invalid> a7:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0048(64)

l0000000000017F88:
	a7 = PHI(a7, a7)
	a6 = PHI(a6, a6)
	a3 = PHI(a3, a3)
	a2 = PHI(a2, a2)
	a1 = PHI(a1, a1)
	a0 = PHI(a0, a0)
	s0 = PHI(s0, s0)
	a4 = qwLoc48
	a5 = Mem0[gp + -1936:word64]
	branch a4 != a5 l0000000000018114
// DataOut: a0 a1 gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:<invalid> s0:<invalid> s5:a2 s4:a3 a1:<invalid> t1:<invalid> t3:<invalid> s6:<invalid> s1:<invalid> s2:<invalid> a2:<invalid> a3:<invalid> a6:<invalid> a4:<invalid> a0:0x0000000000000000 a7:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000018114:
	__stack_chk_fail()
// DataOut: a0 a1 gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:<invalid> s0:<invalid> s5:a2 s4:a3 a1:<invalid> t1:<invalid> t3:<invalid> s6:<invalid> s1:<invalid> s2:<invalid> a2:<invalid> a3:<invalid> a6:<invalid> a4:<invalid> a0:0x0000000000000000 a7:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000018114_thunk_fn0000000000018118:
	a0 = fn0000000000018118(gp, a0, a1)
	return a0
// DataOut: a0 gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:<invalid> s0:<invalid> s5:a2 s4:a3 a1:<invalid> t1:<invalid> t3:<invalid> s6:<invalid> s1:<invalid> s2:<invalid> a2:<invalid> a3:<invalid> a6:<invalid> a4:<invalid> a0:0x0000000000000000 a7:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000017F94:
	ra = qwLoc08
	s0 = qwLoc10
	s1 = qwLoc18
	s2 = qwLoc20
	s3 = qwLoc28
	s4 = qwLoc30
	s5 = qwLoc38
	s6 = qwLoc40
	sp = fp
	return a0
// DataOut: a0 gp s10 s8
// DataOut (flags): 
// SymbolicIn: sp:fp + -80 a5:<invalid> s0:<invalid> s5:a2 s4:a3 a1:<invalid> t1:<invalid> t3:<invalid> s6:<invalid> s1:<invalid> s2:<invalid> a2:<invalid> a3:<invalid> a6:<invalid> a4:<invalid> a0:0x0000000000000000 a7:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

fn0000000000017F04_exit:
	a0 = PHI(a0, a0)
	ra = PHI(ra, ra)
	s0 = PHI(s0, s0)
	s1 = PHI(s1, s1)
	s2 = PHI(s2, s2)
	s3 = PHI(s3, s3)
	s4 = PHI(s4, s4)
	s5 = PHI(s5, s5)
	s6 = PHI(s6, s6)
	sp = PHI(sp, sp)
// DataOut: a0
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> s0:<invalid> s5:<invalid> s4:<invalid> a1:<invalid> t1:<invalid> t3:<invalid> s6:<invalid> s1:<invalid> s2:<invalid> a2:<invalid> a3:<invalid> a6:<invalid> a4:<invalid> a0:<invalid> ra:ra s3:s3 t4:<invalid> t5:<invalid> a7:<invalid> t6:<invalid> -80(fp):0x0000000000000000 -72(fp):<invalid> -64(fp):s6 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra



word64 fn0000000000018118(word64 gp, word64 a0, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 a1 gp
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 sp t1 t3 t4 t5 t6
// Preserved: ra s0 sp
fn0000000000018118_entry:
	def fp
	def s0
	def gp
// DataOut: a0 a1 gp s10 s2 s3 s6 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l0000000000018118:
	sp_1 = fp
	sp_2 = fp + -288
	qwLoc10_4 = s0
	a5 = Mem0[-1936:word64]
	qwLoc08 = ra
	t4 = a1 & 3
	qwLoc18 = a5
	branch t4 != 0x0000000000000000 l00000000000182A8
// DataOut: a0 a1 gp s10 s2 s3 s6 s8 s9 t4
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64) Local -0018(64)

l00000000000182A8:
	a0 = 0
// DataOut: a0 gp s10 s2 s3 s6 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp + -288 a5:<invalid> t4:a1 & 3 -24(fp):<invalid> -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0018(64)

l0000000000018134:
	a5 = a1 & 7
	a4 = 4
	t5 = (int64) (int32) (a1 >>u 0x00000003)
	branch a5 == a4 l0000000000018264
// DataOut: a0 a1 a4 gp s10 s2 s3 s6 s8 s9 t4 t5
// DataOut (flags): 
// SymbolicIn: sp:fp + -288 a5:<invalid> t4:a1 & 3 -24(fp):<invalid> -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0018(64)

l0000000000018264:
	a5 = (int64) ((word32) a1 + a4)
	a5 = (int64) (int32) (a5 >>u 0x00000003)
	a5 = (int64) ((word32) a5 + -1)
	a5 = a5 << 0x00000000
	a5 = a5 >>u 0x00000000
	a5 = a0 + a5
	a5 = (word64) Mem0[a5:byte]
	a3 = 9
	a5 = a5 >>u 0x00000004
	a4 = a5 + 87
	branch a3 <u a5 l0000000000018294
// DataOut: a0 a5 gp s10 s2 s3 s6 s8 s9 t5
// DataOut (flags): 
// SymbolicIn: sp:fp + -288 a5:a1 & 7 t4:a1 & 3 a4:4 t5:(int64) (int32) (a1 >>u 0x00000003) -24(fp):<invalid> -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0018(64)

l0000000000018290:
	a4 = a5 + 48
// DataOut: a0 gp s10 s2 s3 s6 s8 s9 t5
// DataOut (flags): 
// SymbolicIn: sp:fp + -288 a5:(word64) Mem0[a0 + (((int64) ((word32) ((int64) ((int32) ((int64) ((word32) a1 + 4) >>u 0x00000003))) + -1) << 0x00000000) >>u 0x00000000):byte] >>u 0x00000004 t4:a1 & 3 a4:((word64) Mem0[a0 + (((int64) ((word32) ((int64) ((int32) ((int64) ((word32) a1 + 4) >>u 0x00000003))) + -1) << 0x00000000) >>u 0x00000000):byte] >>u 0x00000004) + 87 t5:(int64) (int32) (a1 >>u 0x00000003) a3:9 -24(fp):<invalid> -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0018(64)

l0000000000018294:
	a4 = PHI(a4, a4)
	a5 = 46
	bLoc0118 = a4
	bLoc0117 = a5
	t4 = 2
// DataOut: a0 gp s10 s2 s3 s6 s8 s9 t4 t5
// DataOut (flags): 
// SymbolicIn: sp:fp + -288 a5:(word64) Mem0[a0 + (((int64) ((word32) ((int64) ((int32) ((int64) ((word32) a1 + 4) >>u 0x00000003))) + -1) << 0x00000000) >>u 0x00000000):byte] >>u 0x00000004 t4:a1 & 3 a4:<invalid> t5:(int64) (int32) (a1 >>u 0x00000003) a3:9 -24(fp):<invalid> -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0018(64)

l0000000000018144:
	bLoc0118 = PHI(bLoc0118, bLoc0118)
	bLoc0117 = PHI(bLoc0117, bLoc0117)
	a3 = PHI(a3, a3)
	t4 = PHI(t4, t4)
	a4 = PHI(a4, a4)
	a5 = PHI(a5, a5)
	branch t5 == 0x0000000000000000 l00000000000181FC
// DataOut: a0 gp s10 s2 s3 s6 s8 s9 t4 t5
// DataOut (flags): 
// SymbolicIn: sp:fp + -288 a5:<invalid> t4:<invalid> a4:<invalid> t5:(int64) (int32) (a1 >>u 0x00000003) a3:9 -280(fp):<invalid> -279(fp):46 -24(fp):<invalid> -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0018(64)

l0000000000018148:
	a1 = (int64) ((word32) t5 + -1)
	a4 = t4
	t1 = 9
	a7 = 46
	t3 = -1
// DataOut: a0 a1 a4 a7 gp s10 s2 s3 s6 s8 s9 t1 t3 t4 t5
// DataOut (flags): 
// SymbolicIn: sp:fp + -288 a5:<invalid> t4:<invalid> a4:<invalid> t5:(int64) (int32) (a1 >>u 0x00000003) a3:9 -280(fp):<invalid> -279(fp):46 -24(fp):<invalid> -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0018(64)

l0000000000018190:
	t6 = PHI(t6, t6)
	a1 = PHI(a1, a1)
	a4 = PHI(a4, a4)
	a5 = a1 << 0x00000000
	a5 = a5 >>u 0x00000000
	a5 = a0 + a5
	a5 = (word64) Mem0[a5:byte]
	a2 = a5 & 15
	branch t1 <u a2 l00000000000181B4
	a5 = a1 << 0x00000000
	a5 = a5 >>u 0x00000000
	a5 = a0 + a5
	a5 = (word64) Mem0[a5:byte]
	a3 = (int64) ((word32) a4 + 1)
	a2 = a5 & 15
	a6 = a2 + 87
	branch t1 <u a2 l00000000000181B4
// DataOut: a0 a1 a2 a3 a4 a5 a6 a7 gp s10 s2 s3 s6 s8 s9 t1 t3 t4 t5
// DataOut (flags): 
// SymbolicIn: sp:fp + -288 a5:<invalid> t4:<invalid> a4:<invalid> t5:(int64) (int32) (a1 >>u 0x00000003) a1:<invalid> t1:9 a7:46 t3:-1 a3:<invalid> a2:<invalid> a6:<invalid> t6:fp + -16 -280(fp):<invalid> -279(fp):46 -24(fp):<invalid> -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0018(64)

l00000000000181B0:
	a6 = a2 + 48
// DataOut: a0 a1 a3 a4 a5 a6 a7 gp s10 s2 s3 s6 s8 s9 t1 t3 t4 t5
// DataOut (flags): 
// SymbolicIn: sp:fp + -288 a5:<invalid> t4:<invalid> a4:<invalid> t5:(int64) (int32) (a1 >>u 0x00000003) a1:<invalid> t1:9 a7:46 t3:-1 a2:<invalid> a3:<invalid> a6:<invalid> t6:fp + -16 -280(fp):<invalid> -279(fp):46 -24(fp):<invalid> -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0018(64)

l00000000000181B4:
	a6 = PHI(a6, a6)
	a2 = a4 << 0x00000000
	t6 = fp + -16
	a2 = a2 >>u 0x00000000
	a3 = a3 << 0x00000000
	a2 = fp + -16 + a2
	a3 = a3 >>u 0x00000000
	Mem0[a2 + 3832:byte] = a6
	a3 = fp + -16 + a3
	a5 = a5 >>u 0x00000004
	Mem0[a3 + 3832:byte] = a7
	a2 = (int64) ((word32) a4 + 2)
	a3 = (int64) ((word32) a4 + 3)
	a6 = a5 + 48
	branch t1 >=u a5 l0000000000018160
// DataOut: a0 a1 a2 a3 a4 a5 a6 a7 gp s10 s2 s3 s6 s8 s9 t1 t3 t4 t5
// DataOut (flags): 
// SymbolicIn: sp:fp + -288 a5:<invalid> t4:<invalid> a4:<invalid> t5:(int64) (int32) (a1 >>u 0x00000003) a1:<invalid> t1:9 a7:46 t3:-1 a2:<invalid> a3:<invalid> a6:<invalid> t6:fp + -16 -280(fp):<invalid> -279(fp):46 -24(fp):<invalid> -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0018(64)

l00000000000181EC:
	a6 = a5 + 87
// DataOut: a0 a1 a2 a3 a4 a6 a7 gp s10 s2 s3 s6 s8 s9 t1 t3 t4 t5
// DataOut (flags): 
// SymbolicIn: sp:fp + -288 a5:<invalid> t4:<invalid> a4:<invalid> t5:(int64) (int32) (a1 >>u 0x00000003) a1:<invalid> t1:9 a7:46 t3:-1 a2:<invalid> a3:<invalid> a6:<invalid> t6:fp + -16 -280(fp):<invalid> -279(fp):46 -24(fp):<invalid> -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0018(64)

l0000000000018160:
	a6 = PHI(a6, a6)
	a2 = a2 << 0x00000000
	a5 = fp + -16
	a2 = a2 >>u 0x00000000
	a3 = a3 << 0x00000000
	a2 = fp + -16 + a2
	a3 = a3 >>u 0x00000000
	Mem0[a2 + 3832:byte] = a6
	a3 = fp + -16 + a3
	Mem0[a3 + 3832:byte] = a7
	a1 = (int64) ((word32) a1 + -1)
	a4 = (int64) ((word32) a4 + 4)
	branch a1 == t3 l00000000000181F4
// DataOut: a0 a1 a4 a7 gp s10 s2 s3 s6 s8 s9 t1 t3 t4 t5
// DataOut (flags): 
// SymbolicIn: sp:fp + -288 a5:<invalid> t4:<invalid> a4:<invalid> t5:(int64) (int32) (a1 >>u 0x00000003) a1:<invalid> t1:9 a7:46 t3:-1 a2:<invalid> a3:<invalid> a6:<invalid> t6:fp + -16 -280(fp):<invalid> -279(fp):46 -24(fp):<invalid> -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0018(64)

l00000000000181F4:
	t5 = (int64) (int32) (t5 << 0x00000002)
	t4 = (int64) ((word32) t4 + t5)
// DataOut: gp s10 s2 s3 s6 s8 s9 t4
// DataOut (flags): 
// SymbolicIn: sp:fp + -288 a5:fp + -16 t4:<invalid> a4:<invalid> t5:(int64) (int32) (a1 >>u 0x00000003) a1:<invalid> t1:9 a7:46 t3:-1 a2:<invalid> a3:<invalid> a6:<invalid> t6:fp + -16 -280(fp):<invalid> -279(fp):46 -24(fp):<invalid> -16(fp):s0 -8(fp):ra
// LocalsOut: fp(64) Local -0018(64)

l00000000000181FC:
	t1 = PHI(t1, t1)
	a7 = PHI(a7, a7)
	t3 = PHI(t3, t3)
	t6 = PHI(t6, t6)
	a6 = PHI(a6, a6)
	a2 = PHI(a2, a2)
	a3 = PHI(a3, a3)
	a1 = PHI(a1, a1)
	t5 = PHI(t5, t5)
	t4 = PHI(t4, t4)
	t4 = t4 << 0x00000000
	a5 = 0x0000000000007000
	a4 = fp + -280
	t4 = t4 >>u 0x00000000
	t4 = fp + -280 + t4
	a4 = 28777
	a5 = 29281
	Mem0[t4 + 4:word16] = 29281
	a5 = 0x0000000000006000
	a5 = 24944
	Mem0[t4:word16] = 28777
	a4 = 0x0000000000003000
	a4 = 11830
	Mem0[t4 + 6:word16] = 24944
	a5 = 46
	a0 = fp + -280
	Mem0[t4 + 2:word16] = 11830
	Mem0[t4 + 8:word16] = a5
	__strdup()
// DataOut: a0 gp s10 s2 s3 s6 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp + -288 a5:<invalid> t4:<invalid> a4:<invalid> t5:<invalid> a3:<invalid> a1:<invalid> t1:9 a7:46 t3:-1 a2:<invalid> a6:<invalid> t6:fp + -16 -280(fp):<invalid> -279(fp):46 -24(fp):<invalid> -16(fp):s0 -8(fp):ra
// LocalsOut: Local -0018(64)

l0000000000018248:
	bLoc0118 = PHI(bLoc0118, bLoc0118)
	bLoc0117 = PHI(bLoc0117, bLoc0117)
	t1 = PHI(t1, t1)
	a7 = PHI(a7, a7)
	t3 = PHI(t3, t3)
	t6 = PHI(t6, t6)
	a6 = PHI(a6, a6)
	a2 = PHI(a2, a2)
	a3 = PHI(a3, a3)
	a1 = PHI(a1, a1)
	t5 = PHI(t5, t5)
	t4 = PHI(t4, t4)
	a0 = PHI(a0, a0)
	a4 = qwLoc18
	a5 = Mem0[gp + -1936:word64]
	branch a4 != a5 l00000000000182B0
// DataOut: a0 gp s10 s2 s3 s6 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp + -288 a5:<invalid> t4:<invalid> a0:<invalid> a4:11830 t5:<invalid> t3:<invalid> t1:<invalid> a3:<invalid> a1:<invalid> a7:46 a2:<invalid> a6:<invalid> t6:fp + -16 -280(fp):<invalid> -279(fp):46 -24(fp):<invalid> -16(fp):s0 -8(fp):ra

l00000000000182B0:
	__stack_chk_fail()
// DataOut: a0 gp s10 s2 s3 s6 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp + -288 a5:<invalid> t4:<invalid> a0:<invalid> a4:<invalid> t5:<invalid> t3:<invalid> t1:<invalid> a3:<invalid> a1:<invalid> a7:46 a2:<invalid> a6:<invalid> t6:fp + -16 -280(fp):<invalid> -279(fp):46 -24(fp):<invalid> -16(fp):s0 -8(fp):ra

l00000000000182B0_thunk_fn00000000000182B4:
	a0 = fn00000000000182B4(a0)
	return a0
// DataOut: a0 gp s10 s2 s3 s6 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp + -288 a5:<invalid> t4:<invalid> a0:<invalid> a4:<invalid> t3:<invalid> t1:<invalid> t5:<invalid> a3:<invalid> a1:<invalid> a7:46 a2:<invalid> a6:<invalid> t6:fp + -16 -280(fp):<invalid> -279(fp):46 -24(fp):<invalid> -16(fp):s0 -8(fp):ra

l0000000000018254:
	ra = qwLoc08
	s0 = qwLoc10
	sp = fp
	return a0
// DataOut: a0 gp s10 s2 s3 s6 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp + -288 a5:<invalid> t4:<invalid> a0:<invalid> a4:<invalid> t5:<invalid> t3:<invalid> t1:<invalid> a3:<invalid> a1:<invalid> a7:46 a2:<invalid> a6:<invalid> t6:fp + -16 -280(fp):<invalid> -279(fp):46 -24(fp):<invalid> -16(fp):s0 -8(fp):ra

fn0000000000018118_exit:
	a0 = PHI(a0, a0)
	ra = PHI(ra, ra)
	s0 = PHI(s0, s0)
	sp = PHI(sp, sp)
// DataOut: a0
// DataOut (flags): 
// SymbolicIn: sp:<invalid> a5:<invalid> t4:<invalid> a0:<invalid> a4:<invalid> ra:ra s0:s0 t3:<invalid> t1:<invalid> a3:<invalid> t5:<invalid> a1:<invalid> a7:46 a2:<invalid> a6:<invalid> t6:fp + -16 -280(fp):<invalid> -279(fp):46 -24(fp):<invalid> -16(fp):s0 -8(fp):ra



word64 fn00000000000182B4(word64 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0
// LiveOut: a0
// Trashed: a0 a3 a4 a5
// Preserved: sp
fn00000000000182B4_entry:
// DataOut: a0 a1 gp ra s0 s1 s10 s2 s3 s4 s5 s6 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000000000182B4:
	return (int64) (int32) (a0 >>u 0x00000018) | (int64) ((int32) (a0 << 0x00000018)) | (int64) ((int32) ((a0 & 0x0000000000FF0000) >> 0x00000008)) | (int64) ((int32) ((a0 & 65280) << 0x00000008))
// DataOut: a0 a1 gp ra s0 s1 s10 s2 s3 s4 s5 s6 s8 s9
// DataOut (flags): 
// SymbolicIn: sp:fp

fn00000000000182B4_exit:
// DataOut: a0
// DataOut (flags): 
// SymbolicIn: sp:fp a5:(int64) (int32) (a0 >>u 0x00000018) | (int64) ((int32) (a0 << 0x00000018)) | (int64) ((int32) ((a0 & 0x0000000000FF0000) >> 0x00000008)) a3:(int64) (int32) (a0 >>u 0x00000018) | (int64) ((int32) (a0 << 0x00000018)) a4:(int64) (int32) ((a0 & 0x0000000000FF0000) >> 0x00000008) a0:(int64) (int32) (a0 >>u 0x00000018) | (int64) ((int32) (a0 << 0x00000018)) | (int64) ((int32) ((a0 & 0x0000000000FF0000) >> 0x00000008)) | (int64) ((int32) (((a0 & 65280) & 65280) << 0x00000008))



void fn00000000000182E8()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: a5
// Preserved: a0 a1 a2 ra s0 s1 s2 s3 s4 s5 sp
fn00000000000182E8_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(64)

l00000000000182E8:
	word64 s0_43 = 0x0000000000019E18
	branch 0x0000000000019E20 - 0x0000000000019E18 >> 0x00000003 == 0x0000000000000000 l0000000000018354
// DataOut: s0 s2
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000018324:
// DataOut: s0 s1 s2
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 s0:0000000000019E18 s2:0x0000000000019E20 - 0x0000000000019E18 >> 0x00000003 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000018334:
	word64 a5_49 = Mem0[s0_43:word64]
	word64 sp_54
	word64 s0_55
	word64 s2_56
	word64 ra_57
	word64 s1_58
	word64 s3_59
	word64 s4_60
	word64 s5_61
	word64 a0_62
	word64 a1_63
	word64 a2_64
	word64 a5_65
	call a5_49 (retsize: 0; depth: 64)
		uses: a0_52,a1_51,a2_50,a5_49,qwLoc08_13,qwLoc10_4,qwLoc18_15,qwLoc20_6,qwLoc28_17,qwLoc30_19,qwLoc38_21,ra,s0_43,s1_53,s2_22,s3_45,s4_46,s5_47,sp_2
		defs: a0_62,a1_63,a2_64,a5_65,ra_57,s0_55,s1_58,s2_56,s3_59,s4_60,s5_61,sp_54
	s0_43 = s0_55 + 8
	branch s2_56 != s1_58 l0000000000018334
// DataOut: s0 s1 s2
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 s0:<invalid> s2:0x0000000000019E20 - 0x0000000000019E18 >> 0x00000003 s5:a0 s4:a1 s3:a2 s1:<invalid> a5:<invalid> a2:a2 a1:a1 a0:a0 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

l0000000000018354:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp + -64 s0:<invalid> s2:0x0000000000019E20 - 0x0000000000019E18 >> 0x00000003 s5:a0 s4:a1 s3:a2 s1:<invalid> a5:<invalid> a2:a2 a1:a1 a0:a0 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra

fn00000000000182E8_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp s0:s0 s2:s2 ra:ra s1:s1 s3:s3 s4:s4 s5:s5 a5:<invalid> a2:a2 a1:a1 a0:a0 -56(fp):s5 -48(fp):s4 -40(fp):s3 -32(fp):s2 -24(fp):s1 -16(fp):s0 -8(fp):ra



void fn0000000000018378()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
fn0000000000018378_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000000000018378:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0000000000018378_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



